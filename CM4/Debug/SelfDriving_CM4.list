
SelfDriving_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebbc  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0810ee60  0810ee60  0001ee60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0810f5ec  0810f5ec  0001f5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000008  0810f5f4  0810f5f4  0001f5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000290  10000000  0810f5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000041c  10000290  0810f88c  00020290  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100006ac  0810f88c  000206ac  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810f88c  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004d9a6  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008029  00000000  00000000  0006dc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c80  00000000  00000000  00075c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019a0  00000000  00000000  00077910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004725e  00000000  00000000  000792b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e5dc  00000000  00000000  000c050e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194dd8  00000000  00000000  000eeaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002838c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008ab0  00000000  00000000  00283918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000290 	.word	0x10000290
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ee44 	.word	0x0810ee44

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000294 	.word	0x10000294
 81002dc:	0810ee44 	.word	0x0810ee44

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_drsub>:
 81003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81003b4:	e002      	b.n	81003bc <__adddf3>
 81003b6:	bf00      	nop

081003b8 <__aeabi_dsub>:
 81003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081003bc <__adddf3>:
 81003bc:	b530      	push	{r4, r5, lr}
 81003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003c6:	ea94 0f05 	teq	r4, r5
 81003ca:	bf08      	it	eq
 81003cc:	ea90 0f02 	teqeq	r0, r2
 81003d0:	bf1f      	itttt	ne
 81003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003e2:	f000 80e2 	beq.w	81005aa <__adddf3+0x1ee>
 81003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ee:	bfb8      	it	lt
 81003f0:	426d      	neglt	r5, r5
 81003f2:	dd0c      	ble.n	810040e <__adddf3+0x52>
 81003f4:	442c      	add	r4, r5
 81003f6:	ea80 0202 	eor.w	r2, r0, r2
 81003fa:	ea81 0303 	eor.w	r3, r1, r3
 81003fe:	ea82 0000 	eor.w	r0, r2, r0
 8100402:	ea83 0101 	eor.w	r1, r3, r1
 8100406:	ea80 0202 	eor.w	r2, r0, r2
 810040a:	ea81 0303 	eor.w	r3, r1, r3
 810040e:	2d36      	cmp	r5, #54	; 0x36
 8100410:	bf88      	it	hi
 8100412:	bd30      	pophi	{r4, r5, pc}
 8100414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100424:	d002      	beq.n	810042c <__adddf3+0x70>
 8100426:	4240      	negs	r0, r0
 8100428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100438:	d002      	beq.n	8100440 <__adddf3+0x84>
 810043a:	4252      	negs	r2, r2
 810043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100440:	ea94 0f05 	teq	r4, r5
 8100444:	f000 80a7 	beq.w	8100596 <__adddf3+0x1da>
 8100448:	f1a4 0401 	sub.w	r4, r4, #1
 810044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100450:	db0d      	blt.n	810046e <__adddf3+0xb2>
 8100452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100456:	fa22 f205 	lsr.w	r2, r2, r5
 810045a:	1880      	adds	r0, r0, r2
 810045c:	f141 0100 	adc.w	r1, r1, #0
 8100460:	fa03 f20e 	lsl.w	r2, r3, lr
 8100464:	1880      	adds	r0, r0, r2
 8100466:	fa43 f305 	asr.w	r3, r3, r5
 810046a:	4159      	adcs	r1, r3
 810046c:	e00e      	b.n	810048c <__adddf3+0xd0>
 810046e:	f1a5 0520 	sub.w	r5, r5, #32
 8100472:	f10e 0e20 	add.w	lr, lr, #32
 8100476:	2a01      	cmp	r2, #1
 8100478:	fa03 fc0e 	lsl.w	ip, r3, lr
 810047c:	bf28      	it	cs
 810047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100482:	fa43 f305 	asr.w	r3, r3, r5
 8100486:	18c0      	adds	r0, r0, r3
 8100488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100490:	d507      	bpl.n	81004a2 <__adddf3+0xe6>
 8100492:	f04f 0e00 	mov.w	lr, #0
 8100496:	f1dc 0c00 	rsbs	ip, ip, #0
 810049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810049e:	eb6e 0101 	sbc.w	r1, lr, r1
 81004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81004a6:	d31b      	bcc.n	81004e0 <__adddf3+0x124>
 81004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81004ac:	d30c      	bcc.n	81004c8 <__adddf3+0x10c>
 81004ae:	0849      	lsrs	r1, r1, #1
 81004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 81004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81004b8:	f104 0401 	add.w	r4, r4, #1
 81004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004c4:	f080 809a 	bcs.w	81005fc <__adddf3+0x240>
 81004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004cc:	bf08      	it	eq
 81004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004d2:	f150 0000 	adcs.w	r0, r0, #0
 81004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004da:	ea41 0105 	orr.w	r1, r1, r5
 81004de:	bd30      	pop	{r4, r5, pc}
 81004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004e4:	4140      	adcs	r0, r0
 81004e6:	eb41 0101 	adc.w	r1, r1, r1
 81004ea:	3c01      	subs	r4, #1
 81004ec:	bf28      	it	cs
 81004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004f2:	d2e9      	bcs.n	81004c8 <__adddf3+0x10c>
 81004f4:	f091 0f00 	teq	r1, #0
 81004f8:	bf04      	itt	eq
 81004fa:	4601      	moveq	r1, r0
 81004fc:	2000      	moveq	r0, #0
 81004fe:	fab1 f381 	clz	r3, r1
 8100502:	bf08      	it	eq
 8100504:	3320      	addeq	r3, #32
 8100506:	f1a3 030b 	sub.w	r3, r3, #11
 810050a:	f1b3 0220 	subs.w	r2, r3, #32
 810050e:	da0c      	bge.n	810052a <__adddf3+0x16e>
 8100510:	320c      	adds	r2, #12
 8100512:	dd08      	ble.n	8100526 <__adddf3+0x16a>
 8100514:	f102 0c14 	add.w	ip, r2, #20
 8100518:	f1c2 020c 	rsb	r2, r2, #12
 810051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100520:	fa21 f102 	lsr.w	r1, r1, r2
 8100524:	e00c      	b.n	8100540 <__adddf3+0x184>
 8100526:	f102 0214 	add.w	r2, r2, #20
 810052a:	bfd8      	it	le
 810052c:	f1c2 0c20 	rsble	ip, r2, #32
 8100530:	fa01 f102 	lsl.w	r1, r1, r2
 8100534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100538:	bfdc      	itt	le
 810053a:	ea41 010c 	orrle.w	r1, r1, ip
 810053e:	4090      	lslle	r0, r2
 8100540:	1ae4      	subs	r4, r4, r3
 8100542:	bfa2      	ittt	ge
 8100544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100548:	4329      	orrge	r1, r5
 810054a:	bd30      	popge	{r4, r5, pc}
 810054c:	ea6f 0404 	mvn.w	r4, r4
 8100550:	3c1f      	subs	r4, #31
 8100552:	da1c      	bge.n	810058e <__adddf3+0x1d2>
 8100554:	340c      	adds	r4, #12
 8100556:	dc0e      	bgt.n	8100576 <__adddf3+0x1ba>
 8100558:	f104 0414 	add.w	r4, r4, #20
 810055c:	f1c4 0220 	rsb	r2, r4, #32
 8100560:	fa20 f004 	lsr.w	r0, r0, r4
 8100564:	fa01 f302 	lsl.w	r3, r1, r2
 8100568:	ea40 0003 	orr.w	r0, r0, r3
 810056c:	fa21 f304 	lsr.w	r3, r1, r4
 8100570:	ea45 0103 	orr.w	r1, r5, r3
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f1c4 040c 	rsb	r4, r4, #12
 810057a:	f1c4 0220 	rsb	r2, r4, #32
 810057e:	fa20 f002 	lsr.w	r0, r0, r2
 8100582:	fa01 f304 	lsl.w	r3, r1, r4
 8100586:	ea40 0003 	orr.w	r0, r0, r3
 810058a:	4629      	mov	r1, r5
 810058c:	bd30      	pop	{r4, r5, pc}
 810058e:	fa21 f004 	lsr.w	r0, r1, r4
 8100592:	4629      	mov	r1, r5
 8100594:	bd30      	pop	{r4, r5, pc}
 8100596:	f094 0f00 	teq	r4, #0
 810059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810059e:	bf06      	itte	eq
 81005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81005a4:	3401      	addeq	r4, #1
 81005a6:	3d01      	subne	r5, #1
 81005a8:	e74e      	b.n	8100448 <__adddf3+0x8c>
 81005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ae:	bf18      	it	ne
 81005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81005b4:	d029      	beq.n	810060a <__adddf3+0x24e>
 81005b6:	ea94 0f05 	teq	r4, r5
 81005ba:	bf08      	it	eq
 81005bc:	ea90 0f02 	teqeq	r0, r2
 81005c0:	d005      	beq.n	81005ce <__adddf3+0x212>
 81005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005c6:	bf04      	itt	eq
 81005c8:	4619      	moveq	r1, r3
 81005ca:	4610      	moveq	r0, r2
 81005cc:	bd30      	pop	{r4, r5, pc}
 81005ce:	ea91 0f03 	teq	r1, r3
 81005d2:	bf1e      	ittt	ne
 81005d4:	2100      	movne	r1, #0
 81005d6:	2000      	movne	r0, #0
 81005d8:	bd30      	popne	{r4, r5, pc}
 81005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005de:	d105      	bne.n	81005ec <__adddf3+0x230>
 81005e0:	0040      	lsls	r0, r0, #1
 81005e2:	4149      	adcs	r1, r1
 81005e4:	bf28      	it	cs
 81005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ea:	bd30      	pop	{r4, r5, pc}
 81005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005f0:	bf3c      	itt	cc
 81005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005f6:	bd30      	popcc	{r4, r5, pc}
 81005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100604:	f04f 0000 	mov.w	r0, #0
 8100608:	bd30      	pop	{r4, r5, pc}
 810060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810060e:	bf1a      	itte	ne
 8100610:	4619      	movne	r1, r3
 8100612:	4610      	movne	r0, r2
 8100614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100618:	bf1c      	itt	ne
 810061a:	460b      	movne	r3, r1
 810061c:	4602      	movne	r2, r0
 810061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100622:	bf06      	itte	eq
 8100624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100628:	ea91 0f03 	teqeq	r1, r3
 810062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100630:	bd30      	pop	{r4, r5, pc}
 8100632:	bf00      	nop

08100634 <__aeabi_ui2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f04f 0500 	mov.w	r5, #0
 810064c:	f04f 0100 	mov.w	r1, #0
 8100650:	e750      	b.n	81004f4 <__adddf3+0x138>
 8100652:	bf00      	nop

08100654 <__aeabi_i2d>:
 8100654:	f090 0f00 	teq	r0, #0
 8100658:	bf04      	itt	eq
 810065a:	2100      	moveq	r1, #0
 810065c:	4770      	bxeq	lr
 810065e:	b530      	push	{r4, r5, lr}
 8100660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810066c:	bf48      	it	mi
 810066e:	4240      	negmi	r0, r0
 8100670:	f04f 0100 	mov.w	r1, #0
 8100674:	e73e      	b.n	81004f4 <__adddf3+0x138>
 8100676:	bf00      	nop

08100678 <__aeabi_f2d>:
 8100678:	0042      	lsls	r2, r0, #1
 810067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100686:	bf1f      	itttt	ne
 8100688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100694:	4770      	bxne	lr
 8100696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810069a:	bf08      	it	eq
 810069c:	4770      	bxeq	lr
 810069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81006a2:	bf04      	itt	eq
 81006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81006a8:	4770      	bxeq	lr
 81006aa:	b530      	push	{r4, r5, lr}
 81006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81006b8:	e71c      	b.n	81004f4 <__adddf3+0x138>
 81006ba:	bf00      	nop

081006bc <__aeabi_ul2d>:
 81006bc:	ea50 0201 	orrs.w	r2, r0, r1
 81006c0:	bf08      	it	eq
 81006c2:	4770      	bxeq	lr
 81006c4:	b530      	push	{r4, r5, lr}
 81006c6:	f04f 0500 	mov.w	r5, #0
 81006ca:	e00a      	b.n	81006e2 <__aeabi_l2d+0x16>

081006cc <__aeabi_l2d>:
 81006cc:	ea50 0201 	orrs.w	r2, r0, r1
 81006d0:	bf08      	it	eq
 81006d2:	4770      	bxeq	lr
 81006d4:	b530      	push	{r4, r5, lr}
 81006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006da:	d502      	bpl.n	81006e2 <__aeabi_l2d+0x16>
 81006dc:	4240      	negs	r0, r0
 81006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ee:	f43f aed8 	beq.w	81004a2 <__adddf3+0xe6>
 81006f2:	f04f 0203 	mov.w	r2, #3
 81006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006fa:	bf18      	it	ne
 81006fc:	3203      	addne	r2, #3
 81006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100702:	bf18      	it	ne
 8100704:	3203      	addne	r2, #3
 8100706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810070a:	f1c2 0320 	rsb	r3, r2, #32
 810070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100712:	fa20 f002 	lsr.w	r0, r0, r2
 8100716:	fa01 fe03 	lsl.w	lr, r1, r3
 810071a:	ea40 000e 	orr.w	r0, r0, lr
 810071e:	fa21 f102 	lsr.w	r1, r1, r2
 8100722:	4414      	add	r4, r2
 8100724:	e6bd      	b.n	81004a2 <__adddf3+0xe6>
 8100726:	bf00      	nop

08100728 <__aeabi_dmul>:
 8100728:	b570      	push	{r4, r5, r6, lr}
 810072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100736:	bf1d      	ittte	ne
 8100738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810073c:	ea94 0f0c 	teqne	r4, ip
 8100740:	ea95 0f0c 	teqne	r5, ip
 8100744:	f000 f8de 	bleq	8100904 <__aeabi_dmul+0x1dc>
 8100748:	442c      	add	r4, r5
 810074a:	ea81 0603 	eor.w	r6, r1, r3
 810074e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810075a:	bf18      	it	ne
 810075c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100768:	d038      	beq.n	81007dc <__aeabi_dmul+0xb4>
 810076a:	fba0 ce02 	umull	ip, lr, r0, r2
 810076e:	f04f 0500 	mov.w	r5, #0
 8100772:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810077a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810077e:	f04f 0600 	mov.w	r6, #0
 8100782:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100786:	f09c 0f00 	teq	ip, #0
 810078a:	bf18      	it	ne
 810078c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810079c:	d204      	bcs.n	81007a8 <__aeabi_dmul+0x80>
 810079e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81007a2:	416d      	adcs	r5, r5
 81007a4:	eb46 0606 	adc.w	r6, r6, r6
 81007a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81007ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81007b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81007b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81007b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81007bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007c0:	bf88      	it	hi
 81007c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007c6:	d81e      	bhi.n	8100806 <__aeabi_dmul+0xde>
 81007c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007cc:	bf08      	it	eq
 81007ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007d2:	f150 0000 	adcs.w	r0, r0, #0
 81007d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007da:	bd70      	pop	{r4, r5, r6, pc}
 81007dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007e0:	ea46 0101 	orr.w	r1, r6, r1
 81007e4:	ea40 0002 	orr.w	r0, r0, r2
 81007e8:	ea81 0103 	eor.w	r1, r1, r3
 81007ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007f0:	bfc2      	ittt	gt
 81007f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007fa:	bd70      	popgt	{r4, r5, r6, pc}
 81007fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100800:	f04f 0e00 	mov.w	lr, #0
 8100804:	3c01      	subs	r4, #1
 8100806:	f300 80ab 	bgt.w	8100960 <__aeabi_dmul+0x238>
 810080a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810080e:	bfde      	ittt	le
 8100810:	2000      	movle	r0, #0
 8100812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100816:	bd70      	pople	{r4, r5, r6, pc}
 8100818:	f1c4 0400 	rsb	r4, r4, #0
 810081c:	3c20      	subs	r4, #32
 810081e:	da35      	bge.n	810088c <__aeabi_dmul+0x164>
 8100820:	340c      	adds	r4, #12
 8100822:	dc1b      	bgt.n	810085c <__aeabi_dmul+0x134>
 8100824:	f104 0414 	add.w	r4, r4, #20
 8100828:	f1c4 0520 	rsb	r5, r4, #32
 810082c:	fa00 f305 	lsl.w	r3, r0, r5
 8100830:	fa20 f004 	lsr.w	r0, r0, r4
 8100834:	fa01 f205 	lsl.w	r2, r1, r5
 8100838:	ea40 0002 	orr.w	r0, r0, r2
 810083c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100848:	fa21 f604 	lsr.w	r6, r1, r4
 810084c:	eb42 0106 	adc.w	r1, r2, r6
 8100850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100854:	bf08      	it	eq
 8100856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810085a:	bd70      	pop	{r4, r5, r6, pc}
 810085c:	f1c4 040c 	rsb	r4, r4, #12
 8100860:	f1c4 0520 	rsb	r5, r4, #32
 8100864:	fa00 f304 	lsl.w	r3, r0, r4
 8100868:	fa20 f005 	lsr.w	r0, r0, r5
 810086c:	fa01 f204 	lsl.w	r2, r1, r4
 8100870:	ea40 0002 	orr.w	r0, r0, r2
 8100874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810087c:	f141 0100 	adc.w	r1, r1, #0
 8100880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100884:	bf08      	it	eq
 8100886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810088a:	bd70      	pop	{r4, r5, r6, pc}
 810088c:	f1c4 0520 	rsb	r5, r4, #32
 8100890:	fa00 f205 	lsl.w	r2, r0, r5
 8100894:	ea4e 0e02 	orr.w	lr, lr, r2
 8100898:	fa20 f304 	lsr.w	r3, r0, r4
 810089c:	fa01 f205 	lsl.w	r2, r1, r5
 81008a0:	ea43 0302 	orr.w	r3, r3, r2
 81008a4:	fa21 f004 	lsr.w	r0, r1, r4
 81008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008ac:	fa21 f204 	lsr.w	r2, r1, r4
 81008b0:	ea20 0002 	bic.w	r0, r0, r2
 81008b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81008bc:	bf08      	it	eq
 81008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008c2:	bd70      	pop	{r4, r5, r6, pc}
 81008c4:	f094 0f00 	teq	r4, #0
 81008c8:	d10f      	bne.n	81008ea <__aeabi_dmul+0x1c2>
 81008ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ce:	0040      	lsls	r0, r0, #1
 81008d0:	eb41 0101 	adc.w	r1, r1, r1
 81008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3c01      	subeq	r4, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1a6>
 81008de:	ea41 0106 	orr.w	r1, r1, r6
 81008e2:	f095 0f00 	teq	r5, #0
 81008e6:	bf18      	it	ne
 81008e8:	4770      	bxne	lr
 81008ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ee:	0052      	lsls	r2, r2, #1
 81008f0:	eb43 0303 	adc.w	r3, r3, r3
 81008f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008f8:	bf08      	it	eq
 81008fa:	3d01      	subeq	r5, #1
 81008fc:	d0f7      	beq.n	81008ee <__aeabi_dmul+0x1c6>
 81008fe:	ea43 0306 	orr.w	r3, r3, r6
 8100902:	4770      	bx	lr
 8100904:	ea94 0f0c 	teq	r4, ip
 8100908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810090c:	bf18      	it	ne
 810090e:	ea95 0f0c 	teqne	r5, ip
 8100912:	d00c      	beq.n	810092e <__aeabi_dmul+0x206>
 8100914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100918:	bf18      	it	ne
 810091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091e:	d1d1      	bne.n	81008c4 <__aeabi_dmul+0x19c>
 8100920:	ea81 0103 	eor.w	r1, r1, r3
 8100924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100928:	f04f 0000 	mov.w	r0, #0
 810092c:	bd70      	pop	{r4, r5, r6, pc}
 810092e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100932:	bf06      	itte	eq
 8100934:	4610      	moveq	r0, r2
 8100936:	4619      	moveq	r1, r3
 8100938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810093c:	d019      	beq.n	8100972 <__aeabi_dmul+0x24a>
 810093e:	ea94 0f0c 	teq	r4, ip
 8100942:	d102      	bne.n	810094a <__aeabi_dmul+0x222>
 8100944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100948:	d113      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810094a:	ea95 0f0c 	teq	r5, ip
 810094e:	d105      	bne.n	810095c <__aeabi_dmul+0x234>
 8100950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100954:	bf1c      	itt	ne
 8100956:	4610      	movne	r0, r2
 8100958:	4619      	movne	r1, r3
 810095a:	d10a      	bne.n	8100972 <__aeabi_dmul+0x24a>
 810095c:	ea81 0103 	eor.w	r1, r1, r3
 8100960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810096c:	f04f 0000 	mov.w	r0, #0
 8100970:	bd70      	pop	{r4, r5, r6, pc}
 8100972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810097a:	bd70      	pop	{r4, r5, r6, pc}

0810097c <__aeabi_ddiv>:
 810097c:	b570      	push	{r4, r5, r6, lr}
 810097e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810098a:	bf1d      	ittte	ne
 810098c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100990:	ea94 0f0c 	teqne	r4, ip
 8100994:	ea95 0f0c 	teqne	r5, ip
 8100998:	f000 f8a7 	bleq	8100aea <__aeabi_ddiv+0x16e>
 810099c:	eba4 0405 	sub.w	r4, r4, r5
 81009a0:	ea81 0e03 	eor.w	lr, r1, r3
 81009a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81009a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81009ac:	f000 8088 	beq.w	8100ac0 <__aeabi_ddiv+0x144>
 81009b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81009b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81009b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81009bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009d4:	429d      	cmp	r5, r3
 81009d6:	bf08      	it	eq
 81009d8:	4296      	cmpeq	r6, r2
 81009da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009e2:	d202      	bcs.n	81009ea <__aeabi_ddiv+0x6e>
 81009e4:	085b      	lsrs	r3, r3, #1
 81009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ea:	1ab6      	subs	r6, r6, r2
 81009ec:	eb65 0503 	sbc.w	r5, r5, r3
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a06:	bf22      	ittt	cs
 8100a08:	1ab6      	subcs	r6, r6, r2
 8100a0a:	4675      	movcs	r5, lr
 8100a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100a10:	085b      	lsrs	r3, r3, #1
 8100a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a1e:	bf22      	ittt	cs
 8100a20:	1ab6      	subcs	r6, r6, r2
 8100a22:	4675      	movcs	r5, lr
 8100a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a28:	085b      	lsrs	r3, r3, #1
 8100a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a36:	bf22      	ittt	cs
 8100a38:	1ab6      	subcs	r6, r6, r2
 8100a3a:	4675      	movcs	r5, lr
 8100a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a40:	085b      	lsrs	r3, r3, #1
 8100a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a4e:	bf22      	ittt	cs
 8100a50:	1ab6      	subcs	r6, r6, r2
 8100a52:	4675      	movcs	r5, lr
 8100a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a58:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a5c:	d018      	beq.n	8100a90 <__aeabi_ddiv+0x114>
 8100a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a7a:	d1c0      	bne.n	81009fe <__aeabi_ddiv+0x82>
 8100a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a80:	d10b      	bne.n	8100a9a <__aeabi_ddiv+0x11e>
 8100a82:	ea41 0100 	orr.w	r1, r1, r0
 8100a86:	f04f 0000 	mov.w	r0, #0
 8100a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a8e:	e7b6      	b.n	81009fe <__aeabi_ddiv+0x82>
 8100a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a94:	bf04      	itt	eq
 8100a96:	4301      	orreq	r1, r0
 8100a98:	2000      	moveq	r0, #0
 8100a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a9e:	bf88      	it	hi
 8100aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100aa4:	f63f aeaf 	bhi.w	8100806 <__aeabi_dmul+0xde>
 8100aa8:	ebb5 0c03 	subs.w	ip, r5, r3
 8100aac:	bf04      	itt	eq
 8100aae:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100ab6:	f150 0000 	adcs.w	r0, r0, #0
 8100aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100abe:	bd70      	pop	{r4, r5, r6, pc}
 8100ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100acc:	bfc2      	ittt	gt
 8100ace:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ad6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100adc:	f04f 0e00 	mov.w	lr, #0
 8100ae0:	3c01      	subs	r4, #1
 8100ae2:	e690      	b.n	8100806 <__aeabi_dmul+0xde>
 8100ae4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ae8:	e68d      	b.n	8100806 <__aeabi_dmul+0xde>
 8100aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100aee:	ea94 0f0c 	teq	r4, ip
 8100af2:	bf08      	it	eq
 8100af4:	ea95 0f0c 	teqeq	r5, ip
 8100af8:	f43f af3b 	beq.w	8100972 <__aeabi_dmul+0x24a>
 8100afc:	ea94 0f0c 	teq	r4, ip
 8100b00:	d10a      	bne.n	8100b18 <__aeabi_ddiv+0x19c>
 8100b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100b06:	f47f af34 	bne.w	8100972 <__aeabi_dmul+0x24a>
 8100b0a:	ea95 0f0c 	teq	r5, ip
 8100b0e:	f47f af25 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b12:	4610      	mov	r0, r2
 8100b14:	4619      	mov	r1, r3
 8100b16:	e72c      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b18:	ea95 0f0c 	teq	r5, ip
 8100b1c:	d106      	bne.n	8100b2c <__aeabi_ddiv+0x1b0>
 8100b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b22:	f43f aefd 	beq.w	8100920 <__aeabi_dmul+0x1f8>
 8100b26:	4610      	mov	r0, r2
 8100b28:	4619      	mov	r1, r3
 8100b2a:	e722      	b.n	8100972 <__aeabi_dmul+0x24a>
 8100b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b30:	bf18      	it	ne
 8100b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b36:	f47f aec5 	bne.w	81008c4 <__aeabi_dmul+0x19c>
 8100b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b3e:	f47f af0d 	bne.w	810095c <__aeabi_dmul+0x234>
 8100b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b46:	f47f aeeb 	bne.w	8100920 <__aeabi_dmul+0x1f8>
 8100b4a:	e712      	b.n	8100972 <__aeabi_dmul+0x24a>

08100b4c <__gedf2>:
 8100b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b50:	e006      	b.n	8100b60 <__cmpdf2+0x4>
 8100b52:	bf00      	nop

08100b54 <__ledf2>:
 8100b54:	f04f 0c01 	mov.w	ip, #1
 8100b58:	e002      	b.n	8100b60 <__cmpdf2+0x4>
 8100b5a:	bf00      	nop

08100b5c <__cmpdf2>:
 8100b5c:	f04f 0c01 	mov.w	ip, #1
 8100b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b70:	bf18      	it	ne
 8100b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b76:	d01b      	beq.n	8100bb0 <__cmpdf2+0x54>
 8100b78:	b001      	add	sp, #4
 8100b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b7e:	bf0c      	ite	eq
 8100b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b84:	ea91 0f03 	teqne	r1, r3
 8100b88:	bf02      	ittt	eq
 8100b8a:	ea90 0f02 	teqeq	r0, r2
 8100b8e:	2000      	moveq	r0, #0
 8100b90:	4770      	bxeq	lr
 8100b92:	f110 0f00 	cmn.w	r0, #0
 8100b96:	ea91 0f03 	teq	r1, r3
 8100b9a:	bf58      	it	pl
 8100b9c:	4299      	cmppl	r1, r3
 8100b9e:	bf08      	it	eq
 8100ba0:	4290      	cmpeq	r0, r2
 8100ba2:	bf2c      	ite	cs
 8100ba4:	17d8      	asrcs	r0, r3, #31
 8100ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100baa:	f040 0001 	orr.w	r0, r0, #1
 8100bae:	4770      	bx	lr
 8100bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb8:	d102      	bne.n	8100bc0 <__cmpdf2+0x64>
 8100bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100bbe:	d107      	bne.n	8100bd0 <__cmpdf2+0x74>
 8100bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bc8:	d1d6      	bne.n	8100b78 <__cmpdf2+0x1c>
 8100bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bce:	d0d3      	beq.n	8100b78 <__cmpdf2+0x1c>
 8100bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bd4:	4770      	bx	lr
 8100bd6:	bf00      	nop

08100bd8 <__aeabi_cdrcmple>:
 8100bd8:	4684      	mov	ip, r0
 8100bda:	4610      	mov	r0, r2
 8100bdc:	4662      	mov	r2, ip
 8100bde:	468c      	mov	ip, r1
 8100be0:	4619      	mov	r1, r3
 8100be2:	4663      	mov	r3, ip
 8100be4:	e000      	b.n	8100be8 <__aeabi_cdcmpeq>
 8100be6:	bf00      	nop

08100be8 <__aeabi_cdcmpeq>:
 8100be8:	b501      	push	{r0, lr}
 8100bea:	f7ff ffb7 	bl	8100b5c <__cmpdf2>
 8100bee:	2800      	cmp	r0, #0
 8100bf0:	bf48      	it	mi
 8100bf2:	f110 0f00 	cmnmi.w	r0, #0
 8100bf6:	bd01      	pop	{r0, pc}

08100bf8 <__aeabi_dcmpeq>:
 8100bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bfc:	f7ff fff4 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c00:	bf0c      	ite	eq
 8100c02:	2001      	moveq	r0, #1
 8100c04:	2000      	movne	r0, #0
 8100c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c0a:	bf00      	nop

08100c0c <__aeabi_dcmplt>:
 8100c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c10:	f7ff ffea 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c14:	bf34      	ite	cc
 8100c16:	2001      	movcc	r0, #1
 8100c18:	2000      	movcs	r0, #0
 8100c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c1e:	bf00      	nop

08100c20 <__aeabi_dcmple>:
 8100c20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c24:	f7ff ffe0 	bl	8100be8 <__aeabi_cdcmpeq>
 8100c28:	bf94      	ite	ls
 8100c2a:	2001      	movls	r0, #1
 8100c2c:	2000      	movhi	r0, #0
 8100c2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c32:	bf00      	nop

08100c34 <__aeabi_dcmpge>:
 8100c34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c38:	f7ff ffce 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c3c:	bf94      	ite	ls
 8100c3e:	2001      	movls	r0, #1
 8100c40:	2000      	movhi	r0, #0
 8100c42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c46:	bf00      	nop

08100c48 <__aeabi_dcmpgt>:
 8100c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c4c:	f7ff ffc4 	bl	8100bd8 <__aeabi_cdrcmple>
 8100c50:	bf34      	ite	cc
 8100c52:	2001      	movcc	r0, #1
 8100c54:	2000      	movcs	r0, #0
 8100c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c5a:	bf00      	nop

08100c5c <__aeabi_dcmpun>:
 8100c5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c64:	d102      	bne.n	8100c6c <__aeabi_dcmpun+0x10>
 8100c66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c6a:	d10a      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c74:	d102      	bne.n	8100c7c <__aeabi_dcmpun+0x20>
 8100c76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c7a:	d102      	bne.n	8100c82 <__aeabi_dcmpun+0x26>
 8100c7c:	f04f 0000 	mov.w	r0, #0
 8100c80:	4770      	bx	lr
 8100c82:	f04f 0001 	mov.w	r0, #1
 8100c86:	4770      	bx	lr

08100c88 <__aeabi_d2iz>:
 8100c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c90:	d215      	bcs.n	8100cbe <__aeabi_d2iz+0x36>
 8100c92:	d511      	bpl.n	8100cb8 <__aeabi_d2iz+0x30>
 8100c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c9c:	d912      	bls.n	8100cc4 <__aeabi_d2iz+0x3c>
 8100c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100cae:	fa23 f002 	lsr.w	r0, r3, r2
 8100cb2:	bf18      	it	ne
 8100cb4:	4240      	negne	r0, r0
 8100cb6:	4770      	bx	lr
 8100cb8:	f04f 0000 	mov.w	r0, #0
 8100cbc:	4770      	bx	lr
 8100cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cc2:	d105      	bne.n	8100cd0 <__aeabi_d2iz+0x48>
 8100cc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100cc8:	bf08      	it	eq
 8100cca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cce:	4770      	bx	lr
 8100cd0:	f04f 0000 	mov.w	r0, #0
 8100cd4:	4770      	bx	lr
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_d2uiz>:
 8100cd8:	004a      	lsls	r2, r1, #1
 8100cda:	d211      	bcs.n	8100d00 <__aeabi_d2uiz+0x28>
 8100cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100ce0:	d211      	bcs.n	8100d06 <__aeabi_d2uiz+0x2e>
 8100ce2:	d50d      	bpl.n	8100d00 <__aeabi_d2uiz+0x28>
 8100ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100cec:	d40e      	bmi.n	8100d0c <__aeabi_d2uiz+0x34>
 8100cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cfa:	fa23 f002 	lsr.w	r0, r3, r2
 8100cfe:	4770      	bx	lr
 8100d00:	f04f 0000 	mov.w	r0, #0
 8100d04:	4770      	bx	lr
 8100d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100d0a:	d102      	bne.n	8100d12 <__aeabi_d2uiz+0x3a>
 8100d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d10:	4770      	bx	lr
 8100d12:	f04f 0000 	mov.w	r0, #0
 8100d16:	4770      	bx	lr

08100d18 <__aeabi_d2f>:
 8100d18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100d1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d20:	bf24      	itt	cs
 8100d22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d2a:	d90d      	bls.n	8100d48 <__aeabi_d2f+0x30>
 8100d2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d40:	bf08      	it	eq
 8100d42:	f020 0001 	biceq.w	r0, r0, #1
 8100d46:	4770      	bx	lr
 8100d48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d4c:	d121      	bne.n	8100d92 <__aeabi_d2f+0x7a>
 8100d4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d52:	bfbc      	itt	lt
 8100d54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d58:	4770      	bxlt	lr
 8100d5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d62:	f1c2 0218 	rsb	r2, r2, #24
 8100d66:	f1c2 0c20 	rsb	ip, r2, #32
 8100d6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d72:	bf18      	it	ne
 8100d74:	f040 0001 	orrne.w	r0, r0, #1
 8100d78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d84:	ea40 000c 	orr.w	r0, r0, ip
 8100d88:	fa23 f302 	lsr.w	r3, r3, r2
 8100d8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d90:	e7cc      	b.n	8100d2c <__aeabi_d2f+0x14>
 8100d92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d96:	d107      	bne.n	8100da8 <__aeabi_d2f+0x90>
 8100d98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d9c:	bf1e      	ittt	ne
 8100d9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100da2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100da6:	4770      	bxne	lr
 8100da8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop

08100db8 <__aeabi_d2lz>:
 8100db8:	b538      	push	{r3, r4, r5, lr}
 8100dba:	2200      	movs	r2, #0
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	460d      	mov	r5, r1
 8100dc2:	f7ff ff23 	bl	8100c0c <__aeabi_dcmplt>
 8100dc6:	b928      	cbnz	r0, 8100dd4 <__aeabi_d2lz+0x1c>
 8100dc8:	4620      	mov	r0, r4
 8100dca:	4629      	mov	r1, r5
 8100dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100dd0:	f000 b80a 	b.w	8100de8 <__aeabi_d2ulz>
 8100dd4:	4620      	mov	r0, r4
 8100dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dda:	f000 f805 	bl	8100de8 <__aeabi_d2ulz>
 8100dde:	4240      	negs	r0, r0
 8100de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100de4:	bd38      	pop	{r3, r4, r5, pc}
 8100de6:	bf00      	nop

08100de8 <__aeabi_d2ulz>:
 8100de8:	b5d0      	push	{r4, r6, r7, lr}
 8100dea:	4b0c      	ldr	r3, [pc, #48]	; (8100e1c <__aeabi_d2ulz+0x34>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	4606      	mov	r6, r0
 8100df0:	460f      	mov	r7, r1
 8100df2:	f7ff fc99 	bl	8100728 <__aeabi_dmul>
 8100df6:	f7ff ff6f 	bl	8100cd8 <__aeabi_d2uiz>
 8100dfa:	4604      	mov	r4, r0
 8100dfc:	f7ff fc1a 	bl	8100634 <__aeabi_ui2d>
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <__aeabi_d2ulz+0x38>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	f7ff fc90 	bl	8100728 <__aeabi_dmul>
 8100e08:	4602      	mov	r2, r0
 8100e0a:	460b      	mov	r3, r1
 8100e0c:	4630      	mov	r0, r6
 8100e0e:	4639      	mov	r1, r7
 8100e10:	f7ff fad2 	bl	81003b8 <__aeabi_dsub>
 8100e14:	f7ff ff60 	bl	8100cd8 <__aeabi_d2uiz>
 8100e18:	4621      	mov	r1, r4
 8100e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e1c:	3df00000 	.word	0x3df00000
 8100e20:	41f00000 	.word	0x41f00000

08100e24 <_ZN13PIDControllerC1Effff>:
{
	// TODO Auto-generated constructor stub
	
}

PIDController::PIDController(float newKi, float newKp, float newKd, float newSP)
 8100e24:	b480      	push	{r7}
 8100e26:	b087      	sub	sp, #28
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	6178      	str	r0, [r7, #20]
 8100e2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8100e30:	edc7 0a03 	vstr	s1, [r7, #12]
 8100e34:	ed87 1a02 	vstr	s2, [r7, #8]
 8100e38:	edc7 1a01 	vstr	s3, [r7, #4]
 8100e3c:	4a0a      	ldr	r2, [pc, #40]	; (8100e68 <_ZN13PIDControllerC1Effff+0x44>)
 8100e3e:	697b      	ldr	r3, [r7, #20]
 8100e40:	601a      	str	r2, [r3, #0]
{
	Ki = newKi;
 8100e42:	697b      	ldr	r3, [r7, #20]
 8100e44:	693a      	ldr	r2, [r7, #16]
 8100e46:	605a      	str	r2, [r3, #4]
	Kp = newKp;
 8100e48:	697b      	ldr	r3, [r7, #20]
 8100e4a:	68fa      	ldr	r2, [r7, #12]
 8100e4c:	609a      	str	r2, [r3, #8]
	Kd = newKd;
 8100e4e:	697b      	ldr	r3, [r7, #20]
 8100e50:	68ba      	ldr	r2, [r7, #8]
 8100e52:	60da      	str	r2, [r3, #12]
	SetPoint = newSP;
 8100e54:	697b      	ldr	r3, [r7, #20]
 8100e56:	687a      	ldr	r2, [r7, #4]
 8100e58:	621a      	str	r2, [r3, #32]
}
 8100e5a:	697b      	ldr	r3, [r7, #20]
 8100e5c:	4618      	mov	r0, r3
 8100e5e:	371c      	adds	r7, #28
 8100e60:	46bd      	mov	sp, r7
 8100e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e66:	4770      	bx	lr
 8100e68:	0810f05c 	.word	0x0810f05c

08100e6c <_ZN13PIDControllerD1Ev>:

PIDController::~PIDController()
 8100e6c:	b480      	push	{r7}
 8100e6e:	b083      	sub	sp, #12
 8100e70:	af00      	add	r7, sp, #0
 8100e72:	6078      	str	r0, [r7, #4]
 8100e74:	4a04      	ldr	r2, [pc, #16]	; (8100e88 <_ZN13PIDControllerD1Ev+0x1c>)
 8100e76:	687b      	ldr	r3, [r7, #4]
 8100e78:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8100e7a:	687b      	ldr	r3, [r7, #4]
 8100e7c:	4618      	mov	r0, r3
 8100e7e:	370c      	adds	r7, #12
 8100e80:	46bd      	mov	sp, r7
 8100e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e86:	4770      	bx	lr
 8100e88:	0810f05c 	.word	0x0810f05c

08100e8c <_ZN13PIDControllerD0Ev>:
PIDController::~PIDController()
 8100e8c:	b580      	push	{r7, lr}
 8100e8e:	b082      	sub	sp, #8
 8100e90:	af00      	add	r7, sp, #0
 8100e92:	6078      	str	r0, [r7, #4]
}
 8100e94:	6878      	ldr	r0, [r7, #4]
 8100e96:	f7ff ffe9 	bl	8100e6c <_ZN13PIDControllerD1Ev>
 8100e9a:	2128      	movs	r1, #40	; 0x28
 8100e9c:	6878      	ldr	r0, [r7, #4]
 8100e9e:	f008 fdaf 	bl	8109a00 <_ZdlPvj>
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	4618      	mov	r0, r3
 8100ea6:	3708      	adds	r7, #8
 8100ea8:	46bd      	mov	sp, r7
 8100eaa:	bd80      	pop	{r7, pc}

08100eac <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8100eac:	b580      	push	{r7, lr}
 8100eae:	b086      	sub	sp, #24
 8100eb0:	af02      	add	r7, sp, #8
 8100eb2:	60f8      	str	r0, [r7, #12]
 8100eb4:	60b9      	str	r1, [r7, #8]
 8100eb6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8100eb8:	68fb      	ldr	r3, [r7, #12]
 8100eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100ec0:	d101      	bne.n	8100ec6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8100ec2:	4b09      	ldr	r3, [pc, #36]	; (8100ee8 <rpmsg_send+0x3c>)
 8100ec4:	e00c      	b.n	8100ee0 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8100ec6:	68fb      	ldr	r3, [r7, #12]
 8100ec8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8100eca:	68fb      	ldr	r3, [r7, #12]
 8100ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8100ece:	2301      	movs	r3, #1
 8100ed0:	9301      	str	r3, [sp, #4]
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	9300      	str	r3, [sp, #0]
 8100ed6:	68bb      	ldr	r3, [r7, #8]
 8100ed8:	68f8      	ldr	r0, [r7, #12]
 8100eda:	f006 f87f 	bl	8106fdc <rpmsg_send_offchannel_raw>
 8100ede:	4603      	mov	r3, r0
					 len, true);
}
 8100ee0:	4618      	mov	r0, r3
 8100ee2:	3710      	adds	r7, #16
 8100ee4:	46bd      	mov	sp, r7
 8100ee6:	bd80      	pop	{r7, pc}
 8100ee8:	fffff829 	.word	0xfffff829

08100eec <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8100eec:	b580      	push	{r7, lr}
 8100eee:	b084      	sub	sp, #16
 8100ef0:	af00      	add	r7, sp, #0
 8100ef2:	60f8      	str	r0, [r7, #12]
 8100ef4:	60b9      	str	r1, [r7, #8]
 8100ef6:	607a      	str	r2, [r7, #4]
 8100ef8:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8100efa:	68bb      	ldr	r3, [r7, #8]
 8100efc:	681b      	ldr	r3, [r3, #0]
 8100efe:	4a09      	ldr	r2, [pc, #36]	; (8100f24 <rpmsg_recv_callback+0x38>)
 8100f00:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8100f02:	68bb      	ldr	r3, [r7, #8]
 8100f04:	4a08      	ldr	r2, [pc, #32]	; (8100f28 <rpmsg_recv_callback+0x3c>)
 8100f06:	6013      	str	r3, [r2, #0]
	message_received=1;
 8100f08:	4b08      	ldr	r3, [pc, #32]	; (8100f2c <rpmsg_recv_callback+0x40>)
 8100f0a:	2201      	movs	r2, #1
 8100f0c:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8100f0e:	4b05      	ldr	r3, [pc, #20]	; (8100f24 <rpmsg_recv_callback+0x38>)
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	b2db      	uxtb	r3, r3
 8100f14:	4618      	mov	r0, r3
 8100f16:	f000 f853 	bl	8100fc0 <parseRecievedMessages>
	return 0;
 8100f1a:	2300      	movs	r3, #0
}
 8100f1c:	4618      	mov	r0, r3
 8100f1e:	3710      	adds	r7, #16
 8100f20:	46bd      	mov	sp, r7
 8100f22:	bd80      	pop	{r7, pc}
 8100f24:	10000418 	.word	0x10000418
 8100f28:	100002ac 	.word	0x100002ac
 8100f2c:	100004ac 	.word	0x100004ac

08100f30 <receive_message>:

#ifdef CORE_CM4
unsigned int receive_message(void)
{
 8100f30:	b580      	push	{r7, lr}
 8100f32:	af00      	add	r7, sp, #0
	while (message_received == 0)
 8100f34:	e001      	b.n	8100f3a <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8100f36:	f008 fcfd 	bl	8109934 <OPENAMP_check_for_message>
	while (message_received == 0)
 8100f3a:	4b05      	ldr	r3, [pc, #20]	; (8100f50 <receive_message+0x20>)
 8100f3c:	681b      	ldr	r3, [r3, #0]
 8100f3e:	2b00      	cmp	r3, #0
 8100f40:	d0f9      	beq.n	8100f36 <receive_message+0x6>
	}
	message_received = 0;
 8100f42:	4b03      	ldr	r3, [pc, #12]	; (8100f50 <receive_message+0x20>)
 8100f44:	2200      	movs	r2, #0
 8100f46:	601a      	str	r2, [r3, #0]

	return received_data;
 8100f48:	4b02      	ldr	r3, [pc, #8]	; (8100f54 <receive_message+0x24>)
 8100f4a:	681b      	ldr	r3, [r3, #0]
}
 8100f4c:	4618      	mov	r0, r3
 8100f4e:	bd80      	pop	{r7, pc}
 8100f50:	100004ac 	.word	0x100004ac
 8100f54:	10000418 	.word	0x10000418

08100f58 <sendAnglesToCM7>:

void sendAnglesToCM7(tAHRSDATA chasisAHRS, tAHRSDATA lidarAHRS)
{
 8100f58:	b084      	sub	sp, #16
 8100f5a:	b580      	push	{r7, lr}
 8100f5c:	b088      	sub	sp, #32
 8100f5e:	af00      	add	r7, sp, #0
 8100f60:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8100f64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_GetTick() - lastAnglesSentToCM7Time > 100)
 8100f68:	f000 fe90 	bl	8101c8c <HAL_GetTick>
 8100f6c:	4602      	mov	r2, r0
 8100f6e:	4b12      	ldr	r3, [pc, #72]	; (8100fb8 <sendAnglesToCM7+0x60>)
 8100f70:	681b      	ldr	r3, [r3, #0]
 8100f72:	1ad3      	subs	r3, r2, r3
 8100f74:	2b64      	cmp	r3, #100	; 0x64
 8100f76:	d918      	bls.n	8100faa <sendAnglesToCM7+0x52>
	{
		tANGLESMESSAGES sentAnglesData;

		sentAnglesData.opCode = 1;
 8100f78:	2301      	movs	r3, #1
 8100f7a:	713b      	strb	r3, [r7, #4]
		sentAnglesData.bodyAngles.Pitch = chasisAHRS.Pitch;
 8100f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8100f7e:	60fb      	str	r3, [r7, #12]
		sentAnglesData.bodyAngles.Roll = chasisAHRS.Roll;
 8100f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100f82:	60bb      	str	r3, [r7, #8]
		sentAnglesData.bodyAngles.Yaw = chasisAHRS.Yaw;
 8100f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100f86:	613b      	str	r3, [r7, #16]
		sentAnglesData.lidarAngles.Pitch = lidarAHRS.Pitch;
 8100f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8100f8a:	61bb      	str	r3, [r7, #24]
		sentAnglesData.lidarAngles.Roll = lidarAHRS.Roll;
 8100f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8100f8e:	617b      	str	r3, [r7, #20]
		sentAnglesData.lidarAngles.Yaw = lidarAHRS.Yaw;
 8100f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8100f92:	61fb      	str	r3, [r7, #28]

		OPENAMP_send(&rp_endpoint,&sentAnglesData, sizeof(sentAnglesData));
 8100f94:	1d3b      	adds	r3, r7, #4
 8100f96:	221c      	movs	r2, #28
 8100f98:	4619      	mov	r1, r3
 8100f9a:	4808      	ldr	r0, [pc, #32]	; (8100fbc <sendAnglesToCM7+0x64>)
 8100f9c:	f7ff ff86 	bl	8100eac <rpmsg_send>
		lastAnglesSentToCM7Time = HAL_GetTick();
 8100fa0:	f000 fe74 	bl	8101c8c <HAL_GetTick>
 8100fa4:	4603      	mov	r3, r0
 8100fa6:	4a04      	ldr	r2, [pc, #16]	; (8100fb8 <sendAnglesToCM7+0x60>)
 8100fa8:	6013      	str	r3, [r2, #0]
	}
}
 8100faa:	bf00      	nop
 8100fac:	3720      	adds	r7, #32
 8100fae:	46bd      	mov	sp, r7
 8100fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8100fb4:	b004      	add	sp, #16
 8100fb6:	4770      	bx	lr
 8100fb8:	100002b4 	.word	0x100002b4
 8100fbc:	1000046c 	.word	0x1000046c

08100fc0 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8100fc0:	b480      	push	{r7}
 8100fc2:	b083      	sub	sp, #12
 8100fc4:	af00      	add	r7, sp, #0
 8100fc6:	4603      	mov	r3, r0
 8100fc8:	71fb      	strb	r3, [r7, #7]
		default:
		{

		}
	}
}
 8100fca:	bf00      	nop
 8100fcc:	370c      	adds	r7, #12
 8100fce:	46bd      	mov	sp, r7
 8100fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd4:	4770      	bx	lr
	...

08100fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fd8:	b480      	push	{r7}
 8100fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fdc:	4b0b      	ldr	r3, [pc, #44]	; (810100c <SystemInit+0x34>)
 8100fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fe2:	4a0a      	ldr	r2, [pc, #40]	; (810100c <SystemInit+0x34>)
 8100fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100fec:	4b07      	ldr	r3, [pc, #28]	; (810100c <SystemInit+0x34>)
 8100fee:	691b      	ldr	r3, [r3, #16]
 8100ff0:	4a06      	ldr	r2, [pc, #24]	; (810100c <SystemInit+0x34>)
 8100ff2:	f043 0310 	orr.w	r3, r3, #16
 8100ff6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100ff8:	4b04      	ldr	r3, [pc, #16]	; (810100c <SystemInit+0x34>)
 8100ffa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100ffe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101000:	bf00      	nop
 8101002:	46bd      	mov	sp, r7
 8101004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101008:	4770      	bx	lr
 810100a:	bf00      	nop
 810100c:	e000ed00 	.word	0xe000ed00

08101010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101010:	b480      	push	{r7}
 8101012:	b083      	sub	sp, #12
 8101014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101016:	4b0a      	ldr	r3, [pc, #40]	; (8101040 <MX_DMA_Init+0x30>)
 8101018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810101c:	4a08      	ldr	r2, [pc, #32]	; (8101040 <MX_DMA_Init+0x30>)
 810101e:	f043 0301 	orr.w	r3, r3, #1
 8101022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101026:	4b06      	ldr	r3, [pc, #24]	; (8101040 <MX_DMA_Init+0x30>)
 8101028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810102c:	f003 0301 	and.w	r3, r3, #1
 8101030:	607b      	str	r3, [r7, #4]
 8101032:	687b      	ldr	r3, [r7, #4]

}
 8101034:	bf00      	nop
 8101036:	370c      	adds	r7, #12
 8101038:	46bd      	mov	sp, r7
 810103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103e:	4770      	bx	lr
 8101040:	58024400 	.word	0x58024400

08101044 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101044:	b480      	push	{r7}
 8101046:	b085      	sub	sp, #20
 8101048:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810104a:	4b19      	ldr	r3, [pc, #100]	; (81010b0 <MX_GPIO_Init+0x6c>)
 810104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101050:	4a17      	ldr	r2, [pc, #92]	; (81010b0 <MX_GPIO_Init+0x6c>)
 8101052:	f043 0301 	orr.w	r3, r3, #1
 8101056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810105a:	4b15      	ldr	r3, [pc, #84]	; (81010b0 <MX_GPIO_Init+0x6c>)
 810105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101060:	f003 0301 	and.w	r3, r3, #1
 8101064:	60fb      	str	r3, [r7, #12]
 8101066:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101068:	4b11      	ldr	r3, [pc, #68]	; (81010b0 <MX_GPIO_Init+0x6c>)
 810106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810106e:	4a10      	ldr	r2, [pc, #64]	; (81010b0 <MX_GPIO_Init+0x6c>)
 8101070:	f043 0302 	orr.w	r3, r3, #2
 8101074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101078:	4b0d      	ldr	r3, [pc, #52]	; (81010b0 <MX_GPIO_Init+0x6c>)
 810107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810107e:	f003 0302 	and.w	r3, r3, #2
 8101082:	60bb      	str	r3, [r7, #8]
 8101084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101086:	4b0a      	ldr	r3, [pc, #40]	; (81010b0 <MX_GPIO_Init+0x6c>)
 8101088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810108c:	4a08      	ldr	r2, [pc, #32]	; (81010b0 <MX_GPIO_Init+0x6c>)
 810108e:	f043 0308 	orr.w	r3, r3, #8
 8101092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101096:	4b06      	ldr	r3, [pc, #24]	; (81010b0 <MX_GPIO_Init+0x6c>)
 8101098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810109c:	f003 0308 	and.w	r3, r3, #8
 81010a0:	607b      	str	r3, [r7, #4]
 81010a2:	687b      	ldr	r3, [r7, #4]

}
 81010a4:	bf00      	nop
 81010a6:	3714      	adds	r7, #20
 81010a8:	46bd      	mov	sp, r7
 81010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ae:	4770      	bx	lr
 81010b0:	58024400 	.word	0x58024400

081010b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 81010b4:	b580      	push	{r7, lr}
 81010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 81010b8:	4b1b      	ldr	r3, [pc, #108]	; (8101128 <MX_I2C2_Init+0x74>)
 81010ba:	4a1c      	ldr	r2, [pc, #112]	; (810112c <MX_I2C2_Init+0x78>)
 81010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301242;
 81010be:	4b1a      	ldr	r3, [pc, #104]	; (8101128 <MX_I2C2_Init+0x74>)
 81010c0:	4a1b      	ldr	r2, [pc, #108]	; (8101130 <MX_I2C2_Init+0x7c>)
 81010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81010c4:	4b18      	ldr	r3, [pc, #96]	; (8101128 <MX_I2C2_Init+0x74>)
 81010c6:	2200      	movs	r2, #0
 81010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81010ca:	4b17      	ldr	r3, [pc, #92]	; (8101128 <MX_I2C2_Init+0x74>)
 81010cc:	2201      	movs	r2, #1
 81010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81010d0:	4b15      	ldr	r3, [pc, #84]	; (8101128 <MX_I2C2_Init+0x74>)
 81010d2:	2200      	movs	r2, #0
 81010d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 81010d6:	4b14      	ldr	r3, [pc, #80]	; (8101128 <MX_I2C2_Init+0x74>)
 81010d8:	2200      	movs	r2, #0
 81010da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81010dc:	4b12      	ldr	r3, [pc, #72]	; (8101128 <MX_I2C2_Init+0x74>)
 81010de:	2200      	movs	r2, #0
 81010e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81010e2:	4b11      	ldr	r3, [pc, #68]	; (8101128 <MX_I2C2_Init+0x74>)
 81010e4:	2200      	movs	r2, #0
 81010e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81010e8:	4b0f      	ldr	r3, [pc, #60]	; (8101128 <MX_I2C2_Init+0x74>)
 81010ea:	2200      	movs	r2, #0
 81010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81010ee:	480e      	ldr	r0, [pc, #56]	; (8101128 <MX_I2C2_Init+0x74>)
 81010f0:	f001 f956 	bl	81023a0 <HAL_I2C_Init>
 81010f4:	4603      	mov	r3, r0
 81010f6:	2b00      	cmp	r3, #0
 81010f8:	d001      	beq.n	81010fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81010fa:	f000 f9df 	bl	81014bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81010fe:	2100      	movs	r1, #0
 8101100:	4809      	ldr	r0, [pc, #36]	; (8101128 <MX_I2C2_Init+0x74>)
 8101102:	f001 fe41 	bl	8102d88 <HAL_I2CEx_ConfigAnalogFilter>
 8101106:	4603      	mov	r3, r0
 8101108:	2b00      	cmp	r3, #0
 810110a:	d001      	beq.n	8101110 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 810110c:	f000 f9d6 	bl	81014bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8101110:	2100      	movs	r1, #0
 8101112:	4805      	ldr	r0, [pc, #20]	; (8101128 <MX_I2C2_Init+0x74>)
 8101114:	f001 fe83 	bl	8102e1e <HAL_I2CEx_ConfigDigitalFilter>
 8101118:	4603      	mov	r3, r0
 810111a:	2b00      	cmp	r3, #0
 810111c:	d001      	beq.n	8101122 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 810111e:	f000 f9cd 	bl	81014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8101122:	bf00      	nop
 8101124:	bd80      	pop	{r7, pc}
 8101126:	bf00      	nop
 8101128:	100003c8 	.word	0x100003c8
 810112c:	40005800 	.word	0x40005800
 8101130:	00301242 	.word	0x00301242

08101134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101134:	b580      	push	{r7, lr}
 8101136:	b0b8      	sub	sp, #224	; 0xe0
 8101138:	af00      	add	r7, sp, #0
 810113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810113c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101140:	2200      	movs	r2, #0
 8101142:	601a      	str	r2, [r3, #0]
 8101144:	605a      	str	r2, [r3, #4]
 8101146:	609a      	str	r2, [r3, #8]
 8101148:	60da      	str	r2, [r3, #12]
 810114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810114c:	f107 0310 	add.w	r3, r7, #16
 8101150:	22bc      	movs	r2, #188	; 0xbc
 8101152:	2100      	movs	r1, #0
 8101154:	4618      	mov	r0, r3
 8101156:	f009 fa87 	bl	810a668 <memset>
  if(i2cHandle->Instance==I2C2)
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	681b      	ldr	r3, [r3, #0]
 810115e:	4a29      	ldr	r2, [pc, #164]	; (8101204 <HAL_I2C_MspInit+0xd0>)
 8101160:	4293      	cmp	r3, r2
 8101162:	d14a      	bne.n	81011fa <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101164:	2308      	movs	r3, #8
 8101166:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101168:	2300      	movs	r3, #0
 810116a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810116e:	f107 0310 	add.w	r3, r7, #16
 8101172:	4618      	mov	r0, r3
 8101174:	f002 f8a2 	bl	81032bc <HAL_RCCEx_PeriphCLKConfig>
 8101178:	4603      	mov	r3, r0
 810117a:	2b00      	cmp	r3, #0
 810117c:	d001      	beq.n	8101182 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 810117e:	f000 f99d 	bl	81014bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101182:	4b21      	ldr	r3, [pc, #132]	; (8101208 <HAL_I2C_MspInit+0xd4>)
 8101184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101188:	4a1f      	ldr	r2, [pc, #124]	; (8101208 <HAL_I2C_MspInit+0xd4>)
 810118a:	f043 0302 	orr.w	r3, r3, #2
 810118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101192:	4b1d      	ldr	r3, [pc, #116]	; (8101208 <HAL_I2C_MspInit+0xd4>)
 8101194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101198:	f003 0302 	and.w	r3, r3, #2
 810119c:	60fb      	str	r3, [r7, #12]
 810119e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL___OLED_Screen_Pin|I2C2_SDA___OLED_Screen_Pin;
 81011a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81011a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81011a8:	2312      	movs	r3, #18
 81011aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011ae:	2300      	movs	r3, #0
 81011b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011b4:	2300      	movs	r3, #0
 81011b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 81011ba:	2304      	movs	r3, #4
 81011bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81011c4:	4619      	mov	r1, r3
 81011c6:	4811      	ldr	r0, [pc, #68]	; (810120c <HAL_I2C_MspInit+0xd8>)
 81011c8:	f000 fee0 	bl	8101f8c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 81011cc:	4b0e      	ldr	r3, [pc, #56]	; (8101208 <HAL_I2C_MspInit+0xd4>)
 81011ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81011d2:	4a0d      	ldr	r2, [pc, #52]	; (8101208 <HAL_I2C_MspInit+0xd4>)
 81011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81011d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81011dc:	4b0a      	ldr	r3, [pc, #40]	; (8101208 <HAL_I2C_MspInit+0xd4>)
 81011de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81011e6:	60bb      	str	r3, [r7, #8]
 81011e8:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 81011ea:	2200      	movs	r2, #0
 81011ec:	2100      	movs	r1, #0
 81011ee:	2021      	movs	r0, #33	; 0x21
 81011f0:	f000 fe75 	bl	8101ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 81011f4:	2021      	movs	r0, #33	; 0x21
 81011f6:	f000 fe8c 	bl	8101f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 81011fa:	bf00      	nop
 81011fc:	37e0      	adds	r7, #224	; 0xe0
 81011fe:	46bd      	mov	sp, r7
 8101200:	bd80      	pop	{r7, pc}
 8101202:	bf00      	nop
 8101204:	40005800 	.word	0x40005800
 8101208:	58024400 	.word	0x58024400
 810120c:	58020400 	.word	0x58020400

08101210 <rpmsg_send>:
{
 8101210:	b580      	push	{r7, lr}
 8101212:	b086      	sub	sp, #24
 8101214:	af02      	add	r7, sp, #8
 8101216:	60f8      	str	r0, [r7, #12]
 8101218:	60b9      	str	r1, [r7, #8]
 810121a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 810121c:	68fb      	ldr	r3, [r7, #12]
 810121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101224:	d101      	bne.n	810122a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8101226:	4b09      	ldr	r3, [pc, #36]	; (810124c <rpmsg_send+0x3c>)
 8101228:	e00c      	b.n	8101244 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 810122a:	68fb      	ldr	r3, [r7, #12]
 810122c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 810122e:	68fb      	ldr	r3, [r7, #12]
 8101230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101232:	2301      	movs	r3, #1
 8101234:	9301      	str	r3, [sp, #4]
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	9300      	str	r3, [sp, #0]
 810123a:	68bb      	ldr	r3, [r7, #8]
 810123c:	68f8      	ldr	r0, [r7, #12]
 810123e:	f005 fecd 	bl	8106fdc <rpmsg_send_offchannel_raw>
 8101242:	4603      	mov	r3, r0
}
 8101244:	4618      	mov	r0, r3
 8101246:	3710      	adds	r7, #16
 8101248:	46bd      	mov	sp, r7
 810124a:	bd80      	pop	{r7, pc}
 810124c:	fffff829 	.word	0xfffff829

08101250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101252:	b0a5      	sub	sp, #148	; 0x94
 8101254:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE BEGIN 1 */
	int32_t status = 0;
 8101256:	2300      	movs	r3, #0
 8101258:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810125a:	4b8b      	ldr	r3, [pc, #556]	; (8101488 <main+0x238>)
 810125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101260:	4a89      	ldr	r2, [pc, #548]	; (8101488 <main+0x238>)
 8101262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810126a:	4b87      	ldr	r3, [pc, #540]	; (8101488 <main+0x238>)
 810126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101274:	603b      	str	r3, [r7, #0]
 8101276:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101278:	2001      	movs	r0, #1
 810127a:	f001 f865 	bl	8102348 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810127e:	f001 fe95 	bl	8102fac <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101282:	2201      	movs	r2, #1
 8101284:	2102      	movs	r1, #2
 8101286:	2000      	movs	r0, #0
 8101288:	f001 fe16 	bl	8102eb8 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810128c:	4b7f      	ldr	r3, [pc, #508]	; (810148c <main+0x23c>)
 810128e:	681b      	ldr	r3, [r3, #0]
 8101290:	091b      	lsrs	r3, r3, #4
 8101292:	f003 030f 	and.w	r3, r3, #15
 8101296:	2b07      	cmp	r3, #7
 8101298:	d108      	bne.n	81012ac <main+0x5c>
 810129a:	4b7d      	ldr	r3, [pc, #500]	; (8101490 <main+0x240>)
 810129c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81012a0:	4a7b      	ldr	r2, [pc, #492]	; (8101490 <main+0x240>)
 81012a2:	f043 0301 	orr.w	r3, r3, #1
 81012a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81012aa:	e007      	b.n	81012bc <main+0x6c>
 81012ac:	4b78      	ldr	r3, [pc, #480]	; (8101490 <main+0x240>)
 81012ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81012b2:	4a77      	ldr	r2, [pc, #476]	; (8101490 <main+0x240>)
 81012b4:	f043 0301 	orr.w	r3, r3, #1
 81012b8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);
 81012bc:	207e      	movs	r0, #126	; 0x7e
 81012be:	f000 fe42 	bl	8101f46 <HAL_NVIC_ClearPendingIRQ>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81012c2:	f000 fc3b 	bl	8101b3c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81012c6:	f7ff febd 	bl	8101044 <MX_GPIO_Init>
  MX_DMA_Init();
 81012ca:	f7ff fea1 	bl	8101010 <MX_DMA_Init>
  MX_I2C2_Init();
 81012ce:	f7ff fef1 	bl	81010b4 <MX_I2C2_Init>
  MX_SPI1_Init();
 81012d2:	f000 f8f9 	bl	81014c8 <MX_SPI1_Init>
  MX_TIM2_Init();
 81012d6:	f000 fb21 	bl	810191c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initServo(&chasisServo, htim2, TIM_CHANNEL_1, TIM2);
 81012da:	4e6e      	ldr	r6, [pc, #440]	; (8101494 <main+0x244>)
 81012dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81012e0:	9311      	str	r3, [sp, #68]	; 0x44
 81012e2:	2300      	movs	r3, #0
 81012e4:	9310      	str	r3, [sp, #64]	; 0x40
 81012e6:	466d      	mov	r5, sp
 81012e8:	f106 040c 	add.w	r4, r6, #12
 81012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81012f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81012f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81012fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101300:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8101304:	4864      	ldr	r0, [pc, #400]	; (8101498 <main+0x248>)
 8101306:	f008 fb3d 	bl	8109984 <initServo>
//  	initServo(lidarServo, htim2, TIM_CHANNEL_2, TIM2);
  	startPWM(chasisServo, 1500);
 810130a:	4c63      	ldr	r4, [pc, #396]	; (8101498 <main+0x248>)
 810130c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8101310:	9311      	str	r3, [sp, #68]	; 0x44
 8101312:	4668      	mov	r0, sp
 8101314:	f104 0310 	add.w	r3, r4, #16
 8101318:	2244      	movs	r2, #68	; 0x44
 810131a:	4619      	mov	r1, r3
 810131c:	f009 f996 	bl	810a64c <memcpy>
 8101320:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101324:	f008 fb4c 	bl	81099c0 <startPWM>
//  TIM2->CCR1 = 1500;
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 8101328:	f008 f946 	bl	81095b8 <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 810132c:	2100      	movs	r1, #0
 810132e:	2001      	movs	r0, #1
 8101330:	f008 fa4c 	bl	81097cc <MX_OPENAMP_Init>
 8101334:	4603      	mov	r3, r0
 8101336:	2b00      	cmp	r3, #0
 8101338:	d001      	beq.n	810133e <main+0xee>
	{
		Error_Handler();
 810133a:	f000 f8bf 	bl	81014bc <Error_Handler>
	}

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 810133e:	2300      	movs	r3, #0
 8101340:	9300      	str	r3, [sp, #0]
 8101342:	4b56      	ldr	r3, [pc, #344]	; (810149c <main+0x24c>)
 8101344:	f04f 32ff 	mov.w	r2, #4294967295
 8101348:	4955      	ldr	r1, [pc, #340]	; (81014a0 <main+0x250>)
 810134a:	4856      	ldr	r0, [pc, #344]	; (81014a4 <main+0x254>)
 810134c:	f008 fad4 	bl	81098f8 <OPENAMP_create_endpoint>
 8101350:	6078      	str	r0, [r7, #4]
			rpmsg_recv_callback, NULL);
	if (status < 0)
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	2b00      	cmp	r3, #0
 8101356:	da17      	bge.n	8101388 <main+0x138>
	{
		Error_Handler();
 8101358:	f000 f8b0 	bl	81014bc <Error_Handler>
	}

	/* Pingpong application*/
	/* Reveice an interger from the master, incremennt it and send back the result to the master*/
	while (message < 100)
 810135c:	e014      	b.n	8101388 <main+0x138>
	{
		message = receive_message();
 810135e:	f7ff fde7 	bl	8100f30 <receive_message>
 8101362:	4603      	mov	r3, r0
 8101364:	4a50      	ldr	r2, [pc, #320]	; (81014a8 <main+0x258>)
 8101366:	6013      	str	r3, [r2, #0]
		message++;
 8101368:	4b4f      	ldr	r3, [pc, #316]	; (81014a8 <main+0x258>)
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	3301      	adds	r3, #1
 810136e:	4a4e      	ldr	r2, [pc, #312]	; (81014a8 <main+0x258>)
 8101370:	6013      	str	r3, [r2, #0]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8101372:	2204      	movs	r2, #4
 8101374:	494c      	ldr	r1, [pc, #304]	; (81014a8 <main+0x258>)
 8101376:	484b      	ldr	r0, [pc, #300]	; (81014a4 <main+0x254>)
 8101378:	f7ff ff4a 	bl	8101210 <rpmsg_send>
 810137c:	6078      	str	r0, [r7, #4]
		if (status < 0)
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	2b00      	cmp	r3, #0
 8101382:	da01      	bge.n	8101388 <main+0x138>
		{
			Error_Handler();
 8101384:	f000 f89a 	bl	81014bc <Error_Handler>
	while (message < 100)
 8101388:	4b47      	ldr	r3, [pc, #284]	; (81014a8 <main+0x258>)
 810138a:	681b      	ldr	r3, [r3, #0]
 810138c:	2b63      	cmp	r3, #99	; 0x63
 810138e:	d9e6      	bls.n	810135e <main+0x10e>
		}
	}

	chasisIMU.deviceAddress = 0x68<<1;
 8101390:	4b46      	ldr	r3, [pc, #280]	; (81014ac <main+0x25c>)
 8101392:	22d0      	movs	r2, #208	; 0xd0
 8101394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	chasisIMU.i2cID = hi2c2;
 8101398:	4a44      	ldr	r2, [pc, #272]	; (81014ac <main+0x25c>)
 810139a:	4b45      	ldr	r3, [pc, #276]	; (81014b0 <main+0x260>)
 810139c:	4610      	mov	r0, r2
 810139e:	4619      	mov	r1, r3
 81013a0:	234c      	movs	r3, #76	; 0x4c
 81013a2:	461a      	mov	r2, r3
 81013a4:	f009 f952 	bl	810a64c <memcpy>
	initMPU(chasisIMU);
 81013a8:	4e40      	ldr	r6, [pc, #256]	; (81014ac <main+0x25c>)
 81013aa:	466d      	mov	r5, sp
 81013ac:	f106 0410 	add.w	r4, r6, #16
 81013b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81013b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81013b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81013b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81013ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81013bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81013c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81013c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81013c8:	f008 f8c0 	bl	810954c <initMPU>

	initAHRS(&chasisIMUAHRS);
 81013cc:	4839      	ldr	r0, [pc, #228]	; (81014b4 <main+0x264>)
 81013ce:	f007 fecb 	bl	8109168 <initAHRS>

	initServo(&chasisServo, htim2, TIM_CHANNEL_1, TIM2);
 81013d2:	4e30      	ldr	r6, [pc, #192]	; (8101494 <main+0x244>)
 81013d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81013d8:	9311      	str	r3, [sp, #68]	; 0x44
 81013da:	2300      	movs	r3, #0
 81013dc:	9310      	str	r3, [sp, #64]	; 0x40
 81013de:	466d      	mov	r5, sp
 81013e0:	f106 040c 	add.w	r4, r6, #12
 81013e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81013e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81013ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81013f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81013f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81013f8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 81013fc:	4826      	ldr	r0, [pc, #152]	; (8101498 <main+0x248>)
 81013fe:	f008 fac1 	bl	8109984 <initServo>
	initServo(&lidarServo, htim2, TIM_CHANNEL_2, TIM2);
 8101402:	4e24      	ldr	r6, [pc, #144]	; (8101494 <main+0x244>)
 8101404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8101408:	9311      	str	r3, [sp, #68]	; 0x44
 810140a:	2304      	movs	r3, #4
 810140c:	9310      	str	r3, [sp, #64]	; 0x40
 810140e:	466d      	mov	r5, sp
 8101410:	f106 040c 	add.w	r4, r6, #12
 8101414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101420:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8101424:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8101428:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 810142c:	4822      	ldr	r0, [pc, #136]	; (81014b8 <main+0x268>)
 810142e:	f008 faa9 	bl	8109984 <initServo>
	startPWM(chasisServo, 1500);
 8101432:	4c19      	ldr	r4, [pc, #100]	; (8101498 <main+0x248>)
 8101434:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8101438:	9311      	str	r3, [sp, #68]	; 0x44
 810143a:	4668      	mov	r0, sp
 810143c:	f104 0310 	add.w	r3, r4, #16
 8101440:	2244      	movs	r2, #68	; 0x44
 8101442:	4619      	mov	r1, r3
 8101444:	f009 f902 	bl	810a64c <memcpy>
 8101448:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810144c:	f008 fab8 	bl	81099c0 <startPWM>
  /* USER CODE BEGIN WHILE */


	while (1)
	{
		runAHRSCycle();
 8101450:	f007 feaa 	bl	81091a8 <runAHRSCycle>
		sendAnglesToCM7(chasisIMUAHRS, chasisIMUAHRS);
 8101454:	4e17      	ldr	r6, [pc, #92]	; (81014b4 <main+0x264>)
 8101456:	4a17      	ldr	r2, [pc, #92]	; (81014b4 <main+0x264>)
 8101458:	ab0f      	add	r3, sp, #60	; 0x3c
 810145a:	4611      	mov	r1, r2
 810145c:	224c      	movs	r2, #76	; 0x4c
 810145e:	4618      	mov	r0, r3
 8101460:	f009 f8f4 	bl	810a64c <memcpy>
 8101464:	466d      	mov	r5, sp
 8101466:	f106 0410 	add.w	r4, r6, #16
 810146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8101474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8101476:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 810147a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 810147e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8101482:	f7ff fd69 	bl	8100f58 <sendAnglesToCM7>
		runAHRSCycle();
 8101486:	e7e3      	b.n	8101450 <main+0x200>
 8101488:	58024400 	.word	0x58024400
 810148c:	e000ed00 	.word	0xe000ed00
 8101490:	58026400 	.word	0x58026400
 8101494:	10000584 	.word	0x10000584
 8101498:	100005f4 	.word	0x100005f4
 810149c:	08100eed 	.word	0x08100eed
 81014a0:	0810ee60 	.word	0x0810ee60
 81014a4:	1000046c 	.word	0x1000046c
 81014a8:	10000414 	.word	0x10000414
 81014ac:	1000041c 	.word	0x1000041c
 81014b0:	100003c8 	.word	0x100003c8
 81014b4:	100004b0 	.word	0x100004b0
 81014b8:	10000648 	.word	0x10000648

081014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014bc:	b480      	push	{r7}
 81014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81014c0:	b672      	cpsid	i
}
 81014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 81014c4:	e7fe      	b.n	81014c4 <Error_Handler+0x8>
	...

081014c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81014c8:	b580      	push	{r7, lr}
 81014ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 81014cc:	4b28      	ldr	r3, [pc, #160]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014ce:	4a29      	ldr	r2, [pc, #164]	; (8101574 <MX_SPI1_Init+0xac>)
 81014d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81014d2:	4b27      	ldr	r3, [pc, #156]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81014d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 81014da:	4b25      	ldr	r3, [pc, #148]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014dc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 81014e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 81014e2:	4b23      	ldr	r3, [pc, #140]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014e4:	2203      	movs	r2, #3
 81014e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81014e8:	4b21      	ldr	r3, [pc, #132]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014ea:	2200      	movs	r2, #0
 81014ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81014ee:	4b20      	ldr	r3, [pc, #128]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014f0:	2200      	movs	r2, #0
 81014f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81014f4:	4b1e      	ldr	r3, [pc, #120]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81014fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 81014fc:	4b1c      	ldr	r3, [pc, #112]	; (8101570 <MX_SPI1_Init+0xa8>)
 81014fe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8101502:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101504:	4b1a      	ldr	r3, [pc, #104]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101506:	2200      	movs	r2, #0
 8101508:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810150a:	4b19      	ldr	r3, [pc, #100]	; (8101570 <MX_SPI1_Init+0xa8>)
 810150c:	2200      	movs	r2, #0
 810150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101510:	4b17      	ldr	r3, [pc, #92]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101512:	2200      	movs	r2, #0
 8101514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101516:	4b16      	ldr	r3, [pc, #88]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101518:	2200      	movs	r2, #0
 810151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810151c:	4b14      	ldr	r3, [pc, #80]	; (8101570 <MX_SPI1_Init+0xa8>)
 810151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101522:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101524:	4b12      	ldr	r3, [pc, #72]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101526:	2200      	movs	r2, #0
 8101528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810152a:	4b11      	ldr	r3, [pc, #68]	; (8101570 <MX_SPI1_Init+0xa8>)
 810152c:	2200      	movs	r2, #0
 810152e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101530:	4b0f      	ldr	r3, [pc, #60]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101532:	2200      	movs	r2, #0
 8101534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101536:	4b0e      	ldr	r3, [pc, #56]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101538:	2200      	movs	r2, #0
 810153a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810153c:	4b0c      	ldr	r3, [pc, #48]	; (8101570 <MX_SPI1_Init+0xa8>)
 810153e:	2200      	movs	r2, #0
 8101540:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101542:	4b0b      	ldr	r3, [pc, #44]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101544:	2200      	movs	r2, #0
 8101546:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101548:	4b09      	ldr	r3, [pc, #36]	; (8101570 <MX_SPI1_Init+0xa8>)
 810154a:	2200      	movs	r2, #0
 810154c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810154e:	4b08      	ldr	r3, [pc, #32]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101550:	2200      	movs	r2, #0
 8101552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101554:	4b06      	ldr	r3, [pc, #24]	; (8101570 <MX_SPI1_Init+0xa8>)
 8101556:	2200      	movs	r2, #0
 8101558:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810155a:	4805      	ldr	r0, [pc, #20]	; (8101570 <MX_SPI1_Init+0xa8>)
 810155c:	f002 ff52 	bl	8104404 <HAL_SPI_Init>
 8101560:	4603      	mov	r3, r0
 8101562:	2b00      	cmp	r3, #0
 8101564:	d001      	beq.n	810156a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8101566:	f7ff ffa9 	bl	81014bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 810156a:	bf00      	nop
 810156c:	bd80      	pop	{r7, pc}
 810156e:	bf00      	nop
 8101570:	100004fc 	.word	0x100004fc
 8101574:	40013000 	.word	0x40013000

08101578 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101578:	b580      	push	{r7, lr}
 810157a:	b0ba      	sub	sp, #232	; 0xe8
 810157c:	af00      	add	r7, sp, #0
 810157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101580:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101584:	2200      	movs	r2, #0
 8101586:	601a      	str	r2, [r3, #0]
 8101588:	605a      	str	r2, [r3, #4]
 810158a:	609a      	str	r2, [r3, #8]
 810158c:	60da      	str	r2, [r3, #12]
 810158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101590:	f107 0318 	add.w	r3, r7, #24
 8101594:	22bc      	movs	r2, #188	; 0xbc
 8101596:	2100      	movs	r1, #0
 8101598:	4618      	mov	r0, r3
 810159a:	f009 f865 	bl	810a668 <memset>
  if(spiHandle->Instance==SPI1)
 810159e:	687b      	ldr	r3, [r7, #4]
 81015a0:	681b      	ldr	r3, [r3, #0]
 81015a2:	4a36      	ldr	r2, [pc, #216]	; (810167c <HAL_SPI_MspInit+0x104>)
 81015a4:	4293      	cmp	r3, r2
 81015a6:	d165      	bne.n	8101674 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81015ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81015ae:	2300      	movs	r3, #0
 81015b0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015b2:	f107 0318 	add.w	r3, r7, #24
 81015b6:	4618      	mov	r0, r3
 81015b8:	f001 fe80 	bl	81032bc <HAL_RCCEx_PeriphCLKConfig>
 81015bc:	4603      	mov	r3, r0
 81015be:	2b00      	cmp	r3, #0
 81015c0:	d001      	beq.n	81015c6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 81015c2:	f7ff ff7b 	bl	81014bc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81015c6:	4b2e      	ldr	r3, [pc, #184]	; (8101680 <HAL_SPI_MspInit+0x108>)
 81015c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81015cc:	4a2c      	ldr	r2, [pc, #176]	; (8101680 <HAL_SPI_MspInit+0x108>)
 81015ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81015d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81015d6:	4b2a      	ldr	r3, [pc, #168]	; (8101680 <HAL_SPI_MspInit+0x108>)
 81015d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81015e0:	617b      	str	r3, [r7, #20]
 81015e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015e4:	4b26      	ldr	r3, [pc, #152]	; (8101680 <HAL_SPI_MspInit+0x108>)
 81015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ea:	4a25      	ldr	r2, [pc, #148]	; (8101680 <HAL_SPI_MspInit+0x108>)
 81015ec:	f043 0301 	orr.w	r3, r3, #1
 81015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015f4:	4b22      	ldr	r3, [pc, #136]	; (8101680 <HAL_SPI_MspInit+0x108>)
 81015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015fa:	f003 0301 	and.w	r3, r3, #1
 81015fe:	613b      	str	r3, [r7, #16]
 8101600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101602:	4b1f      	ldr	r3, [pc, #124]	; (8101680 <HAL_SPI_MspInit+0x108>)
 8101604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101608:	4a1d      	ldr	r2, [pc, #116]	; (8101680 <HAL_SPI_MspInit+0x108>)
 810160a:	f043 0308 	orr.w	r3, r3, #8
 810160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101612:	4b1b      	ldr	r3, [pc, #108]	; (8101680 <HAL_SPI_MspInit+0x108>)
 8101614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101618:	f003 0308 	and.w	r3, r3, #8
 810161c:	60fb      	str	r3, [r7, #12]
 810161e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101620:	2320      	movs	r3, #32
 8101622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101626:	2302      	movs	r3, #2
 8101628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810162c:	2300      	movs	r3, #0
 810162e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101632:	2300      	movs	r3, #0
 8101634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101638:	2305      	movs	r3, #5
 810163a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810163e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101642:	4619      	mov	r1, r3
 8101644:	480f      	ldr	r0, [pc, #60]	; (8101684 <HAL_SPI_MspInit+0x10c>)
 8101646:	f000 fca1 	bl	8101f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 810164a:	2380      	movs	r3, #128	; 0x80
 810164c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101650:	2302      	movs	r3, #2
 8101652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101656:	2300      	movs	r3, #0
 8101658:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810165c:	2300      	movs	r3, #0
 810165e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101662:	2305      	movs	r3, #5
 8101664:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101668:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810166c:	4619      	mov	r1, r3
 810166e:	4806      	ldr	r0, [pc, #24]	; (8101688 <HAL_SPI_MspInit+0x110>)
 8101670:	f000 fc8c 	bl	8101f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101674:	bf00      	nop
 8101676:	37e8      	adds	r7, #232	; 0xe8
 8101678:	46bd      	mov	sp, r7
 810167a:	bd80      	pop	{r7, pc}
 810167c:	40013000 	.word	0x40013000
 8101680:	58024400 	.word	0x58024400
 8101684:	58020000 	.word	0x58020000
 8101688:	58020c00 	.word	0x58020c00

0810168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810168c:	b580      	push	{r7, lr}
 810168e:	b082      	sub	sp, #8
 8101690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101692:	4b15      	ldr	r3, [pc, #84]	; (81016e8 <HAL_MspInit+0x5c>)
 8101694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101698:	4a13      	ldr	r2, [pc, #76]	; (81016e8 <HAL_MspInit+0x5c>)
 810169a:	f043 0302 	orr.w	r3, r3, #2
 810169e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81016a2:	4b11      	ldr	r3, [pc, #68]	; (81016e8 <HAL_MspInit+0x5c>)
 81016a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81016a8:	f003 0302 	and.w	r3, r3, #2
 81016ac:	607b      	str	r3, [r7, #4]
 81016ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 4, 0);
 81016b0:	2200      	movs	r2, #0
 81016b2:	2104      	movs	r1, #4
 81016b4:	2040      	movs	r0, #64	; 0x40
 81016b6:	f000 fc12 	bl	8101ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 81016ba:	2040      	movs	r0, #64	; 0x40
 81016bc:	f000 fc29 	bl	8101f12 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 4, 0);
 81016c0:	2200      	movs	r2, #0
 81016c2:	2104      	movs	r1, #4
 81016c4:	207e      	movs	r0, #126	; 0x7e
 81016c6:	f000 fc0a 	bl	8101ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81016ca:	207e      	movs	r0, #126	; 0x7e
 81016cc:	f000 fc21 	bl	8101f12 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 81016d0:	2200      	movs	r2, #0
 81016d2:	2104      	movs	r1, #4
 81016d4:	2094      	movs	r0, #148	; 0x94
 81016d6:	f000 fc02 	bl	8101ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 81016da:	2094      	movs	r0, #148	; 0x94
 81016dc:	f000 fc19 	bl	8101f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81016e0:	bf00      	nop
 81016e2:	3708      	adds	r7, #8
 81016e4:	46bd      	mov	sp, r7
 81016e6:	bd80      	pop	{r7, pc}
 81016e8:	58024400 	.word	0x58024400

081016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81016ec:	b480      	push	{r7}
 81016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81016f0:	e7fe      	b.n	81016f0 <NMI_Handler+0x4>

081016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81016f2:	b480      	push	{r7}
 81016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81016f6:	e7fe      	b.n	81016f6 <HardFault_Handler+0x4>

081016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81016f8:	b480      	push	{r7}
 81016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81016fc:	e7fe      	b.n	81016fc <MemManage_Handler+0x4>

081016fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81016fe:	b480      	push	{r7}
 8101700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101702:	e7fe      	b.n	8101702 <BusFault_Handler+0x4>

08101704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101704:	b480      	push	{r7}
 8101706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101708:	e7fe      	b.n	8101708 <UsageFault_Handler+0x4>

0810170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810170a:	b480      	push	{r7}
 810170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810170e:	bf00      	nop
 8101710:	46bd      	mov	sp, r7
 8101712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101716:	4770      	bx	lr

08101718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101718:	b480      	push	{r7}
 810171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810171c:	bf00      	nop
 810171e:	46bd      	mov	sp, r7
 8101720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101724:	4770      	bx	lr

08101726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101726:	b480      	push	{r7}
 8101728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810172a:	bf00      	nop
 810172c:	46bd      	mov	sp, r7
 810172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101732:	4770      	bx	lr

08101734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101738:	f000 fa94 	bl	8101c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810173c:	bf00      	nop
 810173e:	bd80      	pop	{r7, pc}

08101740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8101740:	b580      	push	{r7, lr}
 8101742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8101744:	4802      	ldr	r0, [pc, #8]	; (8101750 <TIM2_IRQHandler+0x10>)
 8101746:	f003 f8d9 	bl	81048fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810174a:	bf00      	nop
 810174c:	bd80      	pop	{r7, pc}
 810174e:	bf00      	nop
 8101750:	10000584 	.word	0x10000584

08101754 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8101754:	b580      	push	{r7, lr}
 8101756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8101758:	4802      	ldr	r0, [pc, #8]	; (8101764 <I2C2_EV_IRQHandler+0x10>)
 810175a:	f001 f8df 	bl	810291c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 810175e:	bf00      	nop
 8101760:	bd80      	pop	{r7, pc}
 8101762:	bf00      	nop
 8101764:	100003c8 	.word	0x100003c8

08101768 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101768:	b480      	push	{r7}
 810176a:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 810176c:	bf00      	nop
 810176e:	46bd      	mov	sp, r7
 8101770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101774:	4770      	bx	lr

08101776 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101776:	b580      	push	{r7, lr}
 8101778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810177a:	f000 fdf7 	bl	810236c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810177e:	bf00      	nop
 8101780:	bd80      	pop	{r7, pc}

08101782 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8101782:	b480      	push	{r7}
 8101784:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8101786:	bf00      	nop
 8101788:	46bd      	mov	sp, r7
 810178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178e:	4770      	bx	lr

08101790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101790:	b480      	push	{r7}
 8101792:	af00      	add	r7, sp, #0
	return 1;
 8101794:	2301      	movs	r3, #1
}
 8101796:	4618      	mov	r0, r3
 8101798:	46bd      	mov	sp, r7
 810179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179e:	4770      	bx	lr

081017a0 <_kill>:

int _kill(int pid, int sig)
{
 81017a0:	b580      	push	{r7, lr}
 81017a2:	b082      	sub	sp, #8
 81017a4:	af00      	add	r7, sp, #0
 81017a6:	6078      	str	r0, [r7, #4]
 81017a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81017aa:	f008 ff03 	bl	810a5b4 <__errno>
 81017ae:	4603      	mov	r3, r0
 81017b0:	2216      	movs	r2, #22
 81017b2:	601a      	str	r2, [r3, #0]
	return -1;
 81017b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81017b8:	4618      	mov	r0, r3
 81017ba:	3708      	adds	r7, #8
 81017bc:	46bd      	mov	sp, r7
 81017be:	bd80      	pop	{r7, pc}

081017c0 <_exit>:

void _exit (int status)
{
 81017c0:	b580      	push	{r7, lr}
 81017c2:	b082      	sub	sp, #8
 81017c4:	af00      	add	r7, sp, #0
 81017c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81017c8:	f04f 31ff 	mov.w	r1, #4294967295
 81017cc:	6878      	ldr	r0, [r7, #4]
 81017ce:	f7ff ffe7 	bl	81017a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 81017d2:	e7fe      	b.n	81017d2 <_exit+0x12>

081017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81017d4:	b580      	push	{r7, lr}
 81017d6:	b086      	sub	sp, #24
 81017d8:	af00      	add	r7, sp, #0
 81017da:	60f8      	str	r0, [r7, #12]
 81017dc:	60b9      	str	r1, [r7, #8]
 81017de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81017e0:	2300      	movs	r3, #0
 81017e2:	617b      	str	r3, [r7, #20]
 81017e4:	e00a      	b.n	81017fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81017e6:	f3af 8000 	nop.w
 81017ea:	4601      	mov	r1, r0
 81017ec:	68bb      	ldr	r3, [r7, #8]
 81017ee:	1c5a      	adds	r2, r3, #1
 81017f0:	60ba      	str	r2, [r7, #8]
 81017f2:	b2ca      	uxtb	r2, r1
 81017f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81017f6:	697b      	ldr	r3, [r7, #20]
 81017f8:	3301      	adds	r3, #1
 81017fa:	617b      	str	r3, [r7, #20]
 81017fc:	697a      	ldr	r2, [r7, #20]
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	429a      	cmp	r2, r3
 8101802:	dbf0      	blt.n	81017e6 <_read+0x12>
	}

return len;
 8101804:	687b      	ldr	r3, [r7, #4]
}
 8101806:	4618      	mov	r0, r3
 8101808:	3718      	adds	r7, #24
 810180a:	46bd      	mov	sp, r7
 810180c:	bd80      	pop	{r7, pc}

0810180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810180e:	b580      	push	{r7, lr}
 8101810:	b086      	sub	sp, #24
 8101812:	af00      	add	r7, sp, #0
 8101814:	60f8      	str	r0, [r7, #12]
 8101816:	60b9      	str	r1, [r7, #8]
 8101818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810181a:	2300      	movs	r3, #0
 810181c:	617b      	str	r3, [r7, #20]
 810181e:	e009      	b.n	8101834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101820:	68bb      	ldr	r3, [r7, #8]
 8101822:	1c5a      	adds	r2, r3, #1
 8101824:	60ba      	str	r2, [r7, #8]
 8101826:	781b      	ldrb	r3, [r3, #0]
 8101828:	4618      	mov	r0, r3
 810182a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810182e:	697b      	ldr	r3, [r7, #20]
 8101830:	3301      	adds	r3, #1
 8101832:	617b      	str	r3, [r7, #20]
 8101834:	697a      	ldr	r2, [r7, #20]
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	429a      	cmp	r2, r3
 810183a:	dbf1      	blt.n	8101820 <_write+0x12>
	}
	return len;
 810183c:	687b      	ldr	r3, [r7, #4]
}
 810183e:	4618      	mov	r0, r3
 8101840:	3718      	adds	r7, #24
 8101842:	46bd      	mov	sp, r7
 8101844:	bd80      	pop	{r7, pc}

08101846 <_close>:

int _close(int file)
{
 8101846:	b480      	push	{r7}
 8101848:	b083      	sub	sp, #12
 810184a:	af00      	add	r7, sp, #0
 810184c:	6078      	str	r0, [r7, #4]
	return -1;
 810184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101852:	4618      	mov	r0, r3
 8101854:	370c      	adds	r7, #12
 8101856:	46bd      	mov	sp, r7
 8101858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810185c:	4770      	bx	lr

0810185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810185e:	b480      	push	{r7}
 8101860:	b083      	sub	sp, #12
 8101862:	af00      	add	r7, sp, #0
 8101864:	6078      	str	r0, [r7, #4]
 8101866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101868:	683b      	ldr	r3, [r7, #0]
 810186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810186e:	605a      	str	r2, [r3, #4]
	return 0;
 8101870:	2300      	movs	r3, #0
}
 8101872:	4618      	mov	r0, r3
 8101874:	370c      	adds	r7, #12
 8101876:	46bd      	mov	sp, r7
 8101878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810187c:	4770      	bx	lr

0810187e <_isatty>:

int _isatty(int file)
{
 810187e:	b480      	push	{r7}
 8101880:	b083      	sub	sp, #12
 8101882:	af00      	add	r7, sp, #0
 8101884:	6078      	str	r0, [r7, #4]
	return 1;
 8101886:	2301      	movs	r3, #1
}
 8101888:	4618      	mov	r0, r3
 810188a:	370c      	adds	r7, #12
 810188c:	46bd      	mov	sp, r7
 810188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101892:	4770      	bx	lr

08101894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101894:	b480      	push	{r7}
 8101896:	b085      	sub	sp, #20
 8101898:	af00      	add	r7, sp, #0
 810189a:	60f8      	str	r0, [r7, #12]
 810189c:	60b9      	str	r1, [r7, #8]
 810189e:	607a      	str	r2, [r7, #4]
	return 0;
 81018a0:	2300      	movs	r3, #0
}
 81018a2:	4618      	mov	r0, r3
 81018a4:	3714      	adds	r7, #20
 81018a6:	46bd      	mov	sp, r7
 81018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ac:	4770      	bx	lr
	...

081018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b086      	sub	sp, #24
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81018b8:	4a14      	ldr	r2, [pc, #80]	; (810190c <_sbrk+0x5c>)
 81018ba:	4b15      	ldr	r3, [pc, #84]	; (8101910 <_sbrk+0x60>)
 81018bc:	1ad3      	subs	r3, r2, r3
 81018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81018c0:	697b      	ldr	r3, [r7, #20]
 81018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81018c4:	4b13      	ldr	r3, [pc, #76]	; (8101914 <_sbrk+0x64>)
 81018c6:	681b      	ldr	r3, [r3, #0]
 81018c8:	2b00      	cmp	r3, #0
 81018ca:	d102      	bne.n	81018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81018cc:	4b11      	ldr	r3, [pc, #68]	; (8101914 <_sbrk+0x64>)
 81018ce:	4a12      	ldr	r2, [pc, #72]	; (8101918 <_sbrk+0x68>)
 81018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81018d2:	4b10      	ldr	r3, [pc, #64]	; (8101914 <_sbrk+0x64>)
 81018d4:	681a      	ldr	r2, [r3, #0]
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	4413      	add	r3, r2
 81018da:	693a      	ldr	r2, [r7, #16]
 81018dc:	429a      	cmp	r2, r3
 81018de:	d207      	bcs.n	81018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81018e0:	f008 fe68 	bl	810a5b4 <__errno>
 81018e4:	4603      	mov	r3, r0
 81018e6:	220c      	movs	r2, #12
 81018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81018ea:	f04f 33ff 	mov.w	r3, #4294967295
 81018ee:	e009      	b.n	8101904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81018f0:	4b08      	ldr	r3, [pc, #32]	; (8101914 <_sbrk+0x64>)
 81018f2:	681b      	ldr	r3, [r3, #0]
 81018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81018f6:	4b07      	ldr	r3, [pc, #28]	; (8101914 <_sbrk+0x64>)
 81018f8:	681a      	ldr	r2, [r3, #0]
 81018fa:	687b      	ldr	r3, [r7, #4]
 81018fc:	4413      	add	r3, r2
 81018fe:	4a05      	ldr	r2, [pc, #20]	; (8101914 <_sbrk+0x64>)
 8101900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101902:	68fb      	ldr	r3, [r7, #12]
}
 8101904:	4618      	mov	r0, r3
 8101906:	3718      	adds	r7, #24
 8101908:	46bd      	mov	sp, r7
 810190a:	bd80      	pop	{r7, pc}
 810190c:	10048000 	.word	0x10048000
 8101910:	00000400 	.word	0x00000400
 8101914:	100002b8 	.word	0x100002b8
 8101918:	100006b0 	.word	0x100006b0

0810191c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 810191c:	b580      	push	{r7, lr}
 810191e:	b08a      	sub	sp, #40	; 0x28
 8101920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101922:	f107 031c 	add.w	r3, r7, #28
 8101926:	2200      	movs	r2, #0
 8101928:	601a      	str	r2, [r3, #0]
 810192a:	605a      	str	r2, [r3, #4]
 810192c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810192e:	463b      	mov	r3, r7
 8101930:	2200      	movs	r2, #0
 8101932:	601a      	str	r2, [r3, #0]
 8101934:	605a      	str	r2, [r3, #4]
 8101936:	609a      	str	r2, [r3, #8]
 8101938:	60da      	str	r2, [r3, #12]
 810193a:	611a      	str	r2, [r3, #16]
 810193c:	615a      	str	r2, [r3, #20]
 810193e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101940:	4b28      	ldr	r3, [pc, #160]	; (81019e4 <MX_TIM2_Init+0xc8>)
 8101942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8101948:	4b26      	ldr	r3, [pc, #152]	; (81019e4 <MX_TIM2_Init+0xc8>)
 810194a:	224b      	movs	r2, #75	; 0x4b
 810194c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810194e:	4b25      	ldr	r3, [pc, #148]	; (81019e4 <MX_TIM2_Init+0xc8>)
 8101950:	2200      	movs	r2, #0
 8101952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8101954:	4b23      	ldr	r3, [pc, #140]	; (81019e4 <MX_TIM2_Init+0xc8>)
 8101956:	f644 6220 	movw	r2, #20000	; 0x4e20
 810195a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810195c:	4b21      	ldr	r3, [pc, #132]	; (81019e4 <MX_TIM2_Init+0xc8>)
 810195e:	2200      	movs	r2, #0
 8101960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8101962:	4b20      	ldr	r3, [pc, #128]	; (81019e4 <MX_TIM2_Init+0xc8>)
 8101964:	2280      	movs	r2, #128	; 0x80
 8101966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8101968:	481e      	ldr	r0, [pc, #120]	; (81019e4 <MX_TIM2_Init+0xc8>)
 810196a:	f002 fe68 	bl	810463e <HAL_TIM_PWM_Init>
 810196e:	4603      	mov	r3, r0
 8101970:	2b00      	cmp	r3, #0
 8101972:	d001      	beq.n	8101978 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8101974:	f7ff fda2 	bl	81014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101978:	2300      	movs	r3, #0
 810197a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810197c:	2300      	movs	r3, #0
 810197e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101980:	f107 031c 	add.w	r3, r7, #28
 8101984:	4619      	mov	r1, r3
 8101986:	4817      	ldr	r0, [pc, #92]	; (81019e4 <MX_TIM2_Init+0xc8>)
 8101988:	f003 fda8 	bl	81054dc <HAL_TIMEx_MasterConfigSynchronization>
 810198c:	4603      	mov	r3, r0
 810198e:	2b00      	cmp	r3, #0
 8101990:	d001      	beq.n	8101996 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8101992:	f7ff fd93 	bl	81014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101996:	2360      	movs	r3, #96	; 0x60
 8101998:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 810199a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 810199e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81019a0:	2300      	movs	r3, #0
 81019a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81019a4:	2300      	movs	r3, #0
 81019a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81019a8:	463b      	mov	r3, r7
 81019aa:	2200      	movs	r2, #0
 81019ac:	4619      	mov	r1, r3
 81019ae:	480d      	ldr	r0, [pc, #52]	; (81019e4 <MX_TIM2_Init+0xc8>)
 81019b0:	f003 f8c4 	bl	8104b3c <HAL_TIM_PWM_ConfigChannel>
 81019b4:	4603      	mov	r3, r0
 81019b6:	2b00      	cmp	r3, #0
 81019b8:	d001      	beq.n	81019be <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 81019ba:	f7ff fd7f 	bl	81014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81019be:	463b      	mov	r3, r7
 81019c0:	2204      	movs	r2, #4
 81019c2:	4619      	mov	r1, r3
 81019c4:	4807      	ldr	r0, [pc, #28]	; (81019e4 <MX_TIM2_Init+0xc8>)
 81019c6:	f003 f8b9 	bl	8104b3c <HAL_TIM_PWM_ConfigChannel>
 81019ca:	4603      	mov	r3, r0
 81019cc:	2b00      	cmp	r3, #0
 81019ce:	d001      	beq.n	81019d4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 81019d0:	f7ff fd74 	bl	81014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 81019d4:	4803      	ldr	r0, [pc, #12]	; (81019e4 <MX_TIM2_Init+0xc8>)
 81019d6:	f000 f82d 	bl	8101a34 <HAL_TIM_MspPostInit>

}
 81019da:	bf00      	nop
 81019dc:	3728      	adds	r7, #40	; 0x28
 81019de:	46bd      	mov	sp, r7
 81019e0:	bd80      	pop	{r7, pc}
 81019e2:	bf00      	nop
 81019e4:	10000584 	.word	0x10000584

081019e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 81019e8:	b580      	push	{r7, lr}
 81019ea:	b084      	sub	sp, #16
 81019ec:	af00      	add	r7, sp, #0
 81019ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 81019f0:	687b      	ldr	r3, [r7, #4]
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81019f8:	d116      	bne.n	8101a28 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 81019fa:	4b0d      	ldr	r3, [pc, #52]	; (8101a30 <HAL_TIM_PWM_MspInit+0x48>)
 81019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a00:	4a0b      	ldr	r2, [pc, #44]	; (8101a30 <HAL_TIM_PWM_MspInit+0x48>)
 8101a02:	f043 0301 	orr.w	r3, r3, #1
 8101a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101a0a:	4b09      	ldr	r3, [pc, #36]	; (8101a30 <HAL_TIM_PWM_MspInit+0x48>)
 8101a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a10:	f003 0301 	and.w	r3, r3, #1
 8101a14:	60fb      	str	r3, [r7, #12]
 8101a16:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101a18:	2200      	movs	r2, #0
 8101a1a:	2100      	movs	r1, #0
 8101a1c:	201c      	movs	r0, #28
 8101a1e:	f000 fa5e 	bl	8101ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8101a22:	201c      	movs	r0, #28
 8101a24:	f000 fa75 	bl	8101f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8101a28:	bf00      	nop
 8101a2a:	3710      	adds	r7, #16
 8101a2c:	46bd      	mov	sp, r7
 8101a2e:	bd80      	pop	{r7, pc}
 8101a30:	58024400 	.word	0x58024400

08101a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101a34:	b580      	push	{r7, lr}
 8101a36:	b08a      	sub	sp, #40	; 0x28
 8101a38:	af00      	add	r7, sp, #0
 8101a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a3c:	f107 0314 	add.w	r3, r7, #20
 8101a40:	2200      	movs	r2, #0
 8101a42:	601a      	str	r2, [r3, #0]
 8101a44:	605a      	str	r2, [r3, #4]
 8101a46:	609a      	str	r2, [r3, #8]
 8101a48:	60da      	str	r2, [r3, #12]
 8101a4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101a54:	d13d      	bne.n	8101ad2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a56:	4b21      	ldr	r3, [pc, #132]	; (8101adc <HAL_TIM_MspPostInit+0xa8>)
 8101a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a5c:	4a1f      	ldr	r2, [pc, #124]	; (8101adc <HAL_TIM_MspPostInit+0xa8>)
 8101a5e:	f043 0301 	orr.w	r3, r3, #1
 8101a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a66:	4b1d      	ldr	r3, [pc, #116]	; (8101adc <HAL_TIM_MspPostInit+0xa8>)
 8101a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a6c:	f003 0301 	and.w	r3, r3, #1
 8101a70:	613b      	str	r3, [r7, #16]
 8101a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101a74:	4b19      	ldr	r3, [pc, #100]	; (8101adc <HAL_TIM_MspPostInit+0xa8>)
 8101a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a7a:	4a18      	ldr	r2, [pc, #96]	; (8101adc <HAL_TIM_MspPostInit+0xa8>)
 8101a7c:	f043 0302 	orr.w	r3, r3, #2
 8101a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a84:	4b15      	ldr	r3, [pc, #84]	; (8101adc <HAL_TIM_MspPostInit+0xa8>)
 8101a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a8a:	f003 0302 	and.w	r3, r3, #2
 8101a8e:	60fb      	str	r3, [r7, #12]
 8101a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101a92:	2301      	movs	r3, #1
 8101a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a96:	2302      	movs	r3, #2
 8101a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a9a:	2300      	movs	r3, #0
 8101a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a9e:	2300      	movs	r3, #0
 8101aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101aa2:	2301      	movs	r3, #1
 8101aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101aa6:	f107 0314 	add.w	r3, r7, #20
 8101aaa:	4619      	mov	r1, r3
 8101aac:	480c      	ldr	r0, [pc, #48]	; (8101ae0 <HAL_TIM_MspPostInit+0xac>)
 8101aae:	f000 fa6d 	bl	8101f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101ab2:	2308      	movs	r3, #8
 8101ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ab6:	2302      	movs	r3, #2
 8101ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aba:	2300      	movs	r3, #0
 8101abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101abe:	2300      	movs	r3, #0
 8101ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101ac2:	2301      	movs	r3, #1
 8101ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ac6:	f107 0314 	add.w	r3, r7, #20
 8101aca:	4619      	mov	r1, r3
 8101acc:	4805      	ldr	r0, [pc, #20]	; (8101ae4 <HAL_TIM_MspPostInit+0xb0>)
 8101ace:	f000 fa5d 	bl	8101f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8101ad2:	bf00      	nop
 8101ad4:	3728      	adds	r7, #40	; 0x28
 8101ad6:	46bd      	mov	sp, r7
 8101ad8:	bd80      	pop	{r7, pc}
 8101ada:	bf00      	nop
 8101adc:	58024400 	.word	0x58024400
 8101ae0:	58020000 	.word	0x58020000
 8101ae4:	58020400 	.word	0x58020400

08101ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101b20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101aec:	f7ff fa74 	bl	8100fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101af0:	480c      	ldr	r0, [pc, #48]	; (8101b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101af2:	490d      	ldr	r1, [pc, #52]	; (8101b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101af4:	4a0d      	ldr	r2, [pc, #52]	; (8101b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101af8:	e002      	b.n	8101b00 <LoopCopyDataInit>

08101afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101afe:	3304      	adds	r3, #4

08101b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101b04:	d3f9      	bcc.n	8101afa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101b06:	4a0a      	ldr	r2, [pc, #40]	; (8101b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101b08:	4c0a      	ldr	r4, [pc, #40]	; (8101b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101b0c:	e001      	b.n	8101b12 <LoopFillZerobss>

08101b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101b10:	3204      	adds	r2, #4

08101b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101b14:	d3fb      	bcc.n	8101b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101b16:	f008 fd65 	bl	810a5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101b1a:	f7ff fb99 	bl	8101250 <main>
  bx  lr
 8101b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101b20:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101b24:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101b28:	10000290 	.word	0x10000290
  ldr r2, =_sidata
 8101b2c:	0810f5fc 	.word	0x0810f5fc
  ldr r2, =_sbss
 8101b30:	10000290 	.word	0x10000290
  ldr r4, =_ebss
 8101b34:	100006ac 	.word	0x100006ac

08101b38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101b38:	e7fe      	b.n	8101b38 <ADC3_IRQHandler>
	...

08101b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b082      	sub	sp, #8
 8101b40:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101b42:	4b28      	ldr	r3, [pc, #160]	; (8101be4 <HAL_Init+0xa8>)
 8101b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b48:	4a26      	ldr	r2, [pc, #152]	; (8101be4 <HAL_Init+0xa8>)
 8101b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101b4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b52:	4b24      	ldr	r3, [pc, #144]	; (8101be4 <HAL_Init+0xa8>)
 8101b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101b5c:	603b      	str	r3, [r7, #0]
 8101b5e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101b60:	4b21      	ldr	r3, [pc, #132]	; (8101be8 <HAL_Init+0xac>)
 8101b62:	681b      	ldr	r3, [r3, #0]
 8101b64:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101b6c:	4a1e      	ldr	r2, [pc, #120]	; (8101be8 <HAL_Init+0xac>)
 8101b6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101b72:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101b74:	4b1c      	ldr	r3, [pc, #112]	; (8101be8 <HAL_Init+0xac>)
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	4a1b      	ldr	r2, [pc, #108]	; (8101be8 <HAL_Init+0xac>)
 8101b7a:	f043 0301 	orr.w	r3, r3, #1
 8101b7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101b80:	2003      	movs	r0, #3
 8101b82:	f000 f9a1 	bl	8101ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101b86:	f001 fa1f 	bl	8102fc8 <HAL_RCC_GetSysClockFreq>
 8101b8a:	4602      	mov	r2, r0
 8101b8c:	4b15      	ldr	r3, [pc, #84]	; (8101be4 <HAL_Init+0xa8>)
 8101b8e:	699b      	ldr	r3, [r3, #24]
 8101b90:	0a1b      	lsrs	r3, r3, #8
 8101b92:	f003 030f 	and.w	r3, r3, #15
 8101b96:	4915      	ldr	r1, [pc, #84]	; (8101bec <HAL_Init+0xb0>)
 8101b98:	5ccb      	ldrb	r3, [r1, r3]
 8101b9a:	f003 031f 	and.w	r3, r3, #31
 8101b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8101ba2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ba4:	4b0f      	ldr	r3, [pc, #60]	; (8101be4 <HAL_Init+0xa8>)
 8101ba6:	699b      	ldr	r3, [r3, #24]
 8101ba8:	f003 030f 	and.w	r3, r3, #15
 8101bac:	4a0f      	ldr	r2, [pc, #60]	; (8101bec <HAL_Init+0xb0>)
 8101bae:	5cd3      	ldrb	r3, [r2, r3]
 8101bb0:	f003 031f 	and.w	r3, r3, #31
 8101bb4:	687a      	ldr	r2, [r7, #4]
 8101bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8101bba:	4a0d      	ldr	r2, [pc, #52]	; (8101bf0 <HAL_Init+0xb4>)
 8101bbc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101bbe:	4b0c      	ldr	r3, [pc, #48]	; (8101bf0 <HAL_Init+0xb4>)
 8101bc0:	681b      	ldr	r3, [r3, #0]
 8101bc2:	4a0c      	ldr	r2, [pc, #48]	; (8101bf4 <HAL_Init+0xb8>)
 8101bc4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101bc6:	2000      	movs	r0, #0
 8101bc8:	f000 f816 	bl	8101bf8 <HAL_InitTick>
 8101bcc:	4603      	mov	r3, r0
 8101bce:	2b00      	cmp	r3, #0
 8101bd0:	d001      	beq.n	8101bd6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101bd2:	2301      	movs	r3, #1
 8101bd4:	e002      	b.n	8101bdc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101bd6:	f7ff fd59 	bl	810168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101bda:	2300      	movs	r3, #0
}
 8101bdc:	4618      	mov	r0, r3
 8101bde:	3708      	adds	r7, #8
 8101be0:	46bd      	mov	sp, r7
 8101be2:	bd80      	pop	{r7, pc}
 8101be4:	58024400 	.word	0x58024400
 8101be8:	40024400 	.word	0x40024400
 8101bec:	0810f064 	.word	0x0810f064
 8101bf0:	10000004 	.word	0x10000004
 8101bf4:	10000000 	.word	0x10000000

08101bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101bf8:	b580      	push	{r7, lr}
 8101bfa:	b082      	sub	sp, #8
 8101bfc:	af00      	add	r7, sp, #0
 8101bfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101c00:	4b15      	ldr	r3, [pc, #84]	; (8101c58 <HAL_InitTick+0x60>)
 8101c02:	781b      	ldrb	r3, [r3, #0]
 8101c04:	2b00      	cmp	r3, #0
 8101c06:	d101      	bne.n	8101c0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101c08:	2301      	movs	r3, #1
 8101c0a:	e021      	b.n	8101c50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101c0c:	4b13      	ldr	r3, [pc, #76]	; (8101c5c <HAL_InitTick+0x64>)
 8101c0e:	681a      	ldr	r2, [r3, #0]
 8101c10:	4b11      	ldr	r3, [pc, #68]	; (8101c58 <HAL_InitTick+0x60>)
 8101c12:	781b      	ldrb	r3, [r3, #0]
 8101c14:	4619      	mov	r1, r3
 8101c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8101c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101c22:	4618      	mov	r0, r3
 8101c24:	f000 f983 	bl	8101f2e <HAL_SYSTICK_Config>
 8101c28:	4603      	mov	r3, r0
 8101c2a:	2b00      	cmp	r3, #0
 8101c2c:	d001      	beq.n	8101c32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101c2e:	2301      	movs	r3, #1
 8101c30:	e00e      	b.n	8101c50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	2b0f      	cmp	r3, #15
 8101c36:	d80a      	bhi.n	8101c4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101c38:	2200      	movs	r2, #0
 8101c3a:	6879      	ldr	r1, [r7, #4]
 8101c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8101c40:	f000 f94d 	bl	8101ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101c44:	4a06      	ldr	r2, [pc, #24]	; (8101c60 <HAL_InitTick+0x68>)
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101c4a:	2300      	movs	r3, #0
 8101c4c:	e000      	b.n	8101c50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101c4e:	2301      	movs	r3, #1
}
 8101c50:	4618      	mov	r0, r3
 8101c52:	3708      	adds	r7, #8
 8101c54:	46bd      	mov	sp, r7
 8101c56:	bd80      	pop	{r7, pc}
 8101c58:	1000000c 	.word	0x1000000c
 8101c5c:	10000000 	.word	0x10000000
 8101c60:	10000008 	.word	0x10000008

08101c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101c64:	b480      	push	{r7}
 8101c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101c68:	4b06      	ldr	r3, [pc, #24]	; (8101c84 <HAL_IncTick+0x20>)
 8101c6a:	781b      	ldrb	r3, [r3, #0]
 8101c6c:	461a      	mov	r2, r3
 8101c6e:	4b06      	ldr	r3, [pc, #24]	; (8101c88 <HAL_IncTick+0x24>)
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	4413      	add	r3, r2
 8101c74:	4a04      	ldr	r2, [pc, #16]	; (8101c88 <HAL_IncTick+0x24>)
 8101c76:	6013      	str	r3, [r2, #0]
}
 8101c78:	bf00      	nop
 8101c7a:	46bd      	mov	sp, r7
 8101c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c80:	4770      	bx	lr
 8101c82:	bf00      	nop
 8101c84:	1000000c 	.word	0x1000000c
 8101c88:	100005d0 	.word	0x100005d0

08101c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101c8c:	b480      	push	{r7}
 8101c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8101c90:	4b03      	ldr	r3, [pc, #12]	; (8101ca0 <HAL_GetTick+0x14>)
 8101c92:	681b      	ldr	r3, [r3, #0]
}
 8101c94:	4618      	mov	r0, r3
 8101c96:	46bd      	mov	sp, r7
 8101c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c9c:	4770      	bx	lr
 8101c9e:	bf00      	nop
 8101ca0:	100005d0 	.word	0x100005d0

08101ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101ca4:	b580      	push	{r7, lr}
 8101ca6:	b084      	sub	sp, #16
 8101ca8:	af00      	add	r7, sp, #0
 8101caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101cac:	f7ff ffee 	bl	8101c8c <HAL_GetTick>
 8101cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101cb6:	68fb      	ldr	r3, [r7, #12]
 8101cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101cbc:	d005      	beq.n	8101cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101cbe:	4b0a      	ldr	r3, [pc, #40]	; (8101ce8 <HAL_Delay+0x44>)
 8101cc0:	781b      	ldrb	r3, [r3, #0]
 8101cc2:	461a      	mov	r2, r3
 8101cc4:	68fb      	ldr	r3, [r7, #12]
 8101cc6:	4413      	add	r3, r2
 8101cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101cca:	bf00      	nop
 8101ccc:	f7ff ffde 	bl	8101c8c <HAL_GetTick>
 8101cd0:	4602      	mov	r2, r0
 8101cd2:	68bb      	ldr	r3, [r7, #8]
 8101cd4:	1ad3      	subs	r3, r2, r3
 8101cd6:	68fa      	ldr	r2, [r7, #12]
 8101cd8:	429a      	cmp	r2, r3
 8101cda:	d8f7      	bhi.n	8101ccc <HAL_Delay+0x28>
  {
  }
}
 8101cdc:	bf00      	nop
 8101cde:	bf00      	nop
 8101ce0:	3710      	adds	r7, #16
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	bd80      	pop	{r7, pc}
 8101ce6:	bf00      	nop
 8101ce8:	1000000c 	.word	0x1000000c

08101cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101cec:	b480      	push	{r7}
 8101cee:	b085      	sub	sp, #20
 8101cf0:	af00      	add	r7, sp, #0
 8101cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	f003 0307 	and.w	r3, r3, #7
 8101cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101cfc:	4b0c      	ldr	r3, [pc, #48]	; (8101d30 <__NVIC_SetPriorityGrouping+0x44>)
 8101cfe:	68db      	ldr	r3, [r3, #12]
 8101d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d02:	68ba      	ldr	r2, [r7, #8]
 8101d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101d08:	4013      	ands	r3, r2
 8101d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101d0c:	68fb      	ldr	r3, [r7, #12]
 8101d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d10:	68bb      	ldr	r3, [r7, #8]
 8101d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101d1e:	4a04      	ldr	r2, [pc, #16]	; (8101d30 <__NVIC_SetPriorityGrouping+0x44>)
 8101d20:	68bb      	ldr	r3, [r7, #8]
 8101d22:	60d3      	str	r3, [r2, #12]
}
 8101d24:	bf00      	nop
 8101d26:	3714      	adds	r7, #20
 8101d28:	46bd      	mov	sp, r7
 8101d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d2e:	4770      	bx	lr
 8101d30:	e000ed00 	.word	0xe000ed00

08101d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101d34:	b480      	push	{r7}
 8101d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101d38:	4b04      	ldr	r3, [pc, #16]	; (8101d4c <__NVIC_GetPriorityGrouping+0x18>)
 8101d3a:	68db      	ldr	r3, [r3, #12]
 8101d3c:	0a1b      	lsrs	r3, r3, #8
 8101d3e:	f003 0307 	and.w	r3, r3, #7
}
 8101d42:	4618      	mov	r0, r3
 8101d44:	46bd      	mov	sp, r7
 8101d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d4a:	4770      	bx	lr
 8101d4c:	e000ed00 	.word	0xe000ed00

08101d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101d50:	b480      	push	{r7}
 8101d52:	b083      	sub	sp, #12
 8101d54:	af00      	add	r7, sp, #0
 8101d56:	4603      	mov	r3, r0
 8101d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	db0b      	blt.n	8101d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101d62:	88fb      	ldrh	r3, [r7, #6]
 8101d64:	f003 021f 	and.w	r2, r3, #31
 8101d68:	4907      	ldr	r1, [pc, #28]	; (8101d88 <__NVIC_EnableIRQ+0x38>)
 8101d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d6e:	095b      	lsrs	r3, r3, #5
 8101d70:	2001      	movs	r0, #1
 8101d72:	fa00 f202 	lsl.w	r2, r0, r2
 8101d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101d7a:	bf00      	nop
 8101d7c:	370c      	adds	r7, #12
 8101d7e:	46bd      	mov	sp, r7
 8101d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d84:	4770      	bx	lr
 8101d86:	bf00      	nop
 8101d88:	e000e100 	.word	0xe000e100

08101d8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101d8c:	b480      	push	{r7}
 8101d8e:	b083      	sub	sp, #12
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	4603      	mov	r3, r0
 8101d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	db0c      	blt.n	8101db8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101d9e:	88fb      	ldrh	r3, [r7, #6]
 8101da0:	f003 021f 	and.w	r2, r3, #31
 8101da4:	4907      	ldr	r1, [pc, #28]	; (8101dc4 <__NVIC_ClearPendingIRQ+0x38>)
 8101da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101daa:	095b      	lsrs	r3, r3, #5
 8101dac:	2001      	movs	r0, #1
 8101dae:	fa00 f202 	lsl.w	r2, r0, r2
 8101db2:	3360      	adds	r3, #96	; 0x60
 8101db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101db8:	bf00      	nop
 8101dba:	370c      	adds	r7, #12
 8101dbc:	46bd      	mov	sp, r7
 8101dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dc2:	4770      	bx	lr
 8101dc4:	e000e100 	.word	0xe000e100

08101dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101dc8:	b480      	push	{r7}
 8101dca:	b083      	sub	sp, #12
 8101dcc:	af00      	add	r7, sp, #0
 8101dce:	4603      	mov	r3, r0
 8101dd0:	6039      	str	r1, [r7, #0]
 8101dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	db0a      	blt.n	8101df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ddc:	683b      	ldr	r3, [r7, #0]
 8101dde:	b2da      	uxtb	r2, r3
 8101de0:	490c      	ldr	r1, [pc, #48]	; (8101e14 <__NVIC_SetPriority+0x4c>)
 8101de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101de6:	0112      	lsls	r2, r2, #4
 8101de8:	b2d2      	uxtb	r2, r2
 8101dea:	440b      	add	r3, r1
 8101dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101df0:	e00a      	b.n	8101e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101df2:	683b      	ldr	r3, [r7, #0]
 8101df4:	b2da      	uxtb	r2, r3
 8101df6:	4908      	ldr	r1, [pc, #32]	; (8101e18 <__NVIC_SetPriority+0x50>)
 8101df8:	88fb      	ldrh	r3, [r7, #6]
 8101dfa:	f003 030f 	and.w	r3, r3, #15
 8101dfe:	3b04      	subs	r3, #4
 8101e00:	0112      	lsls	r2, r2, #4
 8101e02:	b2d2      	uxtb	r2, r2
 8101e04:	440b      	add	r3, r1
 8101e06:	761a      	strb	r2, [r3, #24]
}
 8101e08:	bf00      	nop
 8101e0a:	370c      	adds	r7, #12
 8101e0c:	46bd      	mov	sp, r7
 8101e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e12:	4770      	bx	lr
 8101e14:	e000e100 	.word	0xe000e100
 8101e18:	e000ed00 	.word	0xe000ed00

08101e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e1c:	b480      	push	{r7}
 8101e1e:	b089      	sub	sp, #36	; 0x24
 8101e20:	af00      	add	r7, sp, #0
 8101e22:	60f8      	str	r0, [r7, #12]
 8101e24:	60b9      	str	r1, [r7, #8]
 8101e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101e28:	68fb      	ldr	r3, [r7, #12]
 8101e2a:	f003 0307 	and.w	r3, r3, #7
 8101e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101e30:	69fb      	ldr	r3, [r7, #28]
 8101e32:	f1c3 0307 	rsb	r3, r3, #7
 8101e36:	2b04      	cmp	r3, #4
 8101e38:	bf28      	it	cs
 8101e3a:	2304      	movcs	r3, #4
 8101e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101e3e:	69fb      	ldr	r3, [r7, #28]
 8101e40:	3304      	adds	r3, #4
 8101e42:	2b06      	cmp	r3, #6
 8101e44:	d902      	bls.n	8101e4c <NVIC_EncodePriority+0x30>
 8101e46:	69fb      	ldr	r3, [r7, #28]
 8101e48:	3b03      	subs	r3, #3
 8101e4a:	e000      	b.n	8101e4e <NVIC_EncodePriority+0x32>
 8101e4c:	2300      	movs	r3, #0
 8101e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e50:	f04f 32ff 	mov.w	r2, #4294967295
 8101e54:	69bb      	ldr	r3, [r7, #24]
 8101e56:	fa02 f303 	lsl.w	r3, r2, r3
 8101e5a:	43da      	mvns	r2, r3
 8101e5c:	68bb      	ldr	r3, [r7, #8]
 8101e5e:	401a      	ands	r2, r3
 8101e60:	697b      	ldr	r3, [r7, #20]
 8101e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101e64:	f04f 31ff 	mov.w	r1, #4294967295
 8101e68:	697b      	ldr	r3, [r7, #20]
 8101e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8101e6e:	43d9      	mvns	r1, r3
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e74:	4313      	orrs	r3, r2
         );
}
 8101e76:	4618      	mov	r0, r3
 8101e78:	3724      	adds	r7, #36	; 0x24
 8101e7a:	46bd      	mov	sp, r7
 8101e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e80:	4770      	bx	lr
	...

08101e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101e84:	b580      	push	{r7, lr}
 8101e86:	b082      	sub	sp, #8
 8101e88:	af00      	add	r7, sp, #0
 8101e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	3b01      	subs	r3, #1
 8101e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101e94:	d301      	bcc.n	8101e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101e96:	2301      	movs	r3, #1
 8101e98:	e00f      	b.n	8101eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101e9a:	4a0a      	ldr	r2, [pc, #40]	; (8101ec4 <SysTick_Config+0x40>)
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	3b01      	subs	r3, #1
 8101ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101ea2:	210f      	movs	r1, #15
 8101ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8101ea8:	f7ff ff8e 	bl	8101dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101eac:	4b05      	ldr	r3, [pc, #20]	; (8101ec4 <SysTick_Config+0x40>)
 8101eae:	2200      	movs	r2, #0
 8101eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101eb2:	4b04      	ldr	r3, [pc, #16]	; (8101ec4 <SysTick_Config+0x40>)
 8101eb4:	2207      	movs	r2, #7
 8101eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101eb8:	2300      	movs	r3, #0
}
 8101eba:	4618      	mov	r0, r3
 8101ebc:	3708      	adds	r7, #8
 8101ebe:	46bd      	mov	sp, r7
 8101ec0:	bd80      	pop	{r7, pc}
 8101ec2:	bf00      	nop
 8101ec4:	e000e010 	.word	0xe000e010

08101ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ec8:	b580      	push	{r7, lr}
 8101eca:	b082      	sub	sp, #8
 8101ecc:	af00      	add	r7, sp, #0
 8101ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101ed0:	6878      	ldr	r0, [r7, #4]
 8101ed2:	f7ff ff0b 	bl	8101cec <__NVIC_SetPriorityGrouping>
}
 8101ed6:	bf00      	nop
 8101ed8:	3708      	adds	r7, #8
 8101eda:	46bd      	mov	sp, r7
 8101edc:	bd80      	pop	{r7, pc}

08101ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ede:	b580      	push	{r7, lr}
 8101ee0:	b086      	sub	sp, #24
 8101ee2:	af00      	add	r7, sp, #0
 8101ee4:	4603      	mov	r3, r0
 8101ee6:	60b9      	str	r1, [r7, #8]
 8101ee8:	607a      	str	r2, [r7, #4]
 8101eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101eec:	f7ff ff22 	bl	8101d34 <__NVIC_GetPriorityGrouping>
 8101ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ef2:	687a      	ldr	r2, [r7, #4]
 8101ef4:	68b9      	ldr	r1, [r7, #8]
 8101ef6:	6978      	ldr	r0, [r7, #20]
 8101ef8:	f7ff ff90 	bl	8101e1c <NVIC_EncodePriority>
 8101efc:	4602      	mov	r2, r0
 8101efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101f02:	4611      	mov	r1, r2
 8101f04:	4618      	mov	r0, r3
 8101f06:	f7ff ff5f 	bl	8101dc8 <__NVIC_SetPriority>
}
 8101f0a:	bf00      	nop
 8101f0c:	3718      	adds	r7, #24
 8101f0e:	46bd      	mov	sp, r7
 8101f10:	bd80      	pop	{r7, pc}

08101f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101f12:	b580      	push	{r7, lr}
 8101f14:	b082      	sub	sp, #8
 8101f16:	af00      	add	r7, sp, #0
 8101f18:	4603      	mov	r3, r0
 8101f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f20:	4618      	mov	r0, r3
 8101f22:	f7ff ff15 	bl	8101d50 <__NVIC_EnableIRQ>
}
 8101f26:	bf00      	nop
 8101f28:	3708      	adds	r7, #8
 8101f2a:	46bd      	mov	sp, r7
 8101f2c:	bd80      	pop	{r7, pc}

08101f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101f2e:	b580      	push	{r7, lr}
 8101f30:	b082      	sub	sp, #8
 8101f32:	af00      	add	r7, sp, #0
 8101f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101f36:	6878      	ldr	r0, [r7, #4]
 8101f38:	f7ff ffa4 	bl	8101e84 <SysTick_Config>
 8101f3c:	4603      	mov	r3, r0
}
 8101f3e:	4618      	mov	r0, r3
 8101f40:	3708      	adds	r7, #8
 8101f42:	46bd      	mov	sp, r7
 8101f44:	bd80      	pop	{r7, pc}

08101f46 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8101f46:	b580      	push	{r7, lr}
 8101f48:	b082      	sub	sp, #8
 8101f4a:	af00      	add	r7, sp, #0
 8101f4c:	4603      	mov	r3, r0
 8101f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8101f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f54:	4618      	mov	r0, r3
 8101f56:	f7ff ff19 	bl	8101d8c <__NVIC_ClearPendingIRQ>
}
 8101f5a:	bf00      	nop
 8101f5c:	3708      	adds	r7, #8
 8101f5e:	46bd      	mov	sp, r7
 8101f60:	bd80      	pop	{r7, pc}
	...

08101f64 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101f64:	b480      	push	{r7}
 8101f66:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101f68:	4b07      	ldr	r3, [pc, #28]	; (8101f88 <HAL_GetCurrentCPUID+0x24>)
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	091b      	lsrs	r3, r3, #4
 8101f6e:	f003 030f 	and.w	r3, r3, #15
 8101f72:	2b07      	cmp	r3, #7
 8101f74:	d101      	bne.n	8101f7a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101f76:	2303      	movs	r3, #3
 8101f78:	e000      	b.n	8101f7c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101f7a:	2301      	movs	r3, #1
  }
}
 8101f7c:	4618      	mov	r0, r3
 8101f7e:	46bd      	mov	sp, r7
 8101f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f84:	4770      	bx	lr
 8101f86:	bf00      	nop
 8101f88:	e000ed00 	.word	0xe000ed00

08101f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101f8c:	b480      	push	{r7}
 8101f8e:	b089      	sub	sp, #36	; 0x24
 8101f90:	af00      	add	r7, sp, #0
 8101f92:	6078      	str	r0, [r7, #4]
 8101f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101f96:	2300      	movs	r3, #0
 8101f98:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101f9a:	4b89      	ldr	r3, [pc, #548]	; (81021c0 <HAL_GPIO_Init+0x234>)
 8101f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f9e:	e194      	b.n	81022ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101fa0:	683b      	ldr	r3, [r7, #0]
 8101fa2:	681a      	ldr	r2, [r3, #0]
 8101fa4:	2101      	movs	r1, #1
 8101fa6:	69fb      	ldr	r3, [r7, #28]
 8101fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8101fac:	4013      	ands	r3, r2
 8101fae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101fb0:	693b      	ldr	r3, [r7, #16]
 8101fb2:	2b00      	cmp	r3, #0
 8101fb4:	f000 8186 	beq.w	81022c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101fb8:	683b      	ldr	r3, [r7, #0]
 8101fba:	685b      	ldr	r3, [r3, #4]
 8101fbc:	2b01      	cmp	r3, #1
 8101fbe:	d00b      	beq.n	8101fd8 <HAL_GPIO_Init+0x4c>
 8101fc0:	683b      	ldr	r3, [r7, #0]
 8101fc2:	685b      	ldr	r3, [r3, #4]
 8101fc4:	2b02      	cmp	r3, #2
 8101fc6:	d007      	beq.n	8101fd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101fc8:	683b      	ldr	r3, [r7, #0]
 8101fca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101fcc:	2b11      	cmp	r3, #17
 8101fce:	d003      	beq.n	8101fd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101fd0:	683b      	ldr	r3, [r7, #0]
 8101fd2:	685b      	ldr	r3, [r3, #4]
 8101fd4:	2b12      	cmp	r3, #18
 8101fd6:	d130      	bne.n	810203a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	689b      	ldr	r3, [r3, #8]
 8101fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101fde:	69fb      	ldr	r3, [r7, #28]
 8101fe0:	005b      	lsls	r3, r3, #1
 8101fe2:	2203      	movs	r2, #3
 8101fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8101fe8:	43db      	mvns	r3, r3
 8101fea:	69ba      	ldr	r2, [r7, #24]
 8101fec:	4013      	ands	r3, r2
 8101fee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101ff0:	683b      	ldr	r3, [r7, #0]
 8101ff2:	68da      	ldr	r2, [r3, #12]
 8101ff4:	69fb      	ldr	r3, [r7, #28]
 8101ff6:	005b      	lsls	r3, r3, #1
 8101ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8101ffc:	69ba      	ldr	r2, [r7, #24]
 8101ffe:	4313      	orrs	r3, r2
 8102000:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	69ba      	ldr	r2, [r7, #24]
 8102006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	685b      	ldr	r3, [r3, #4]
 810200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810200e:	2201      	movs	r2, #1
 8102010:	69fb      	ldr	r3, [r7, #28]
 8102012:	fa02 f303 	lsl.w	r3, r2, r3
 8102016:	43db      	mvns	r3, r3
 8102018:	69ba      	ldr	r2, [r7, #24]
 810201a:	4013      	ands	r3, r2
 810201c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810201e:	683b      	ldr	r3, [r7, #0]
 8102020:	685b      	ldr	r3, [r3, #4]
 8102022:	091b      	lsrs	r3, r3, #4
 8102024:	f003 0201 	and.w	r2, r3, #1
 8102028:	69fb      	ldr	r3, [r7, #28]
 810202a:	fa02 f303 	lsl.w	r3, r2, r3
 810202e:	69ba      	ldr	r2, [r7, #24]
 8102030:	4313      	orrs	r3, r2
 8102032:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	69ba      	ldr	r2, [r7, #24]
 8102038:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	68db      	ldr	r3, [r3, #12]
 810203e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102040:	69fb      	ldr	r3, [r7, #28]
 8102042:	005b      	lsls	r3, r3, #1
 8102044:	2203      	movs	r2, #3
 8102046:	fa02 f303 	lsl.w	r3, r2, r3
 810204a:	43db      	mvns	r3, r3
 810204c:	69ba      	ldr	r2, [r7, #24]
 810204e:	4013      	ands	r3, r2
 8102050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102052:	683b      	ldr	r3, [r7, #0]
 8102054:	689a      	ldr	r2, [r3, #8]
 8102056:	69fb      	ldr	r3, [r7, #28]
 8102058:	005b      	lsls	r3, r3, #1
 810205a:	fa02 f303 	lsl.w	r3, r2, r3
 810205e:	69ba      	ldr	r2, [r7, #24]
 8102060:	4313      	orrs	r3, r2
 8102062:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	69ba      	ldr	r2, [r7, #24]
 8102068:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810206a:	683b      	ldr	r3, [r7, #0]
 810206c:	685b      	ldr	r3, [r3, #4]
 810206e:	2b02      	cmp	r3, #2
 8102070:	d003      	beq.n	810207a <HAL_GPIO_Init+0xee>
 8102072:	683b      	ldr	r3, [r7, #0]
 8102074:	685b      	ldr	r3, [r3, #4]
 8102076:	2b12      	cmp	r3, #18
 8102078:	d123      	bne.n	81020c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810207a:	69fb      	ldr	r3, [r7, #28]
 810207c:	08da      	lsrs	r2, r3, #3
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	3208      	adds	r2, #8
 8102082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102088:	69fb      	ldr	r3, [r7, #28]
 810208a:	f003 0307 	and.w	r3, r3, #7
 810208e:	009b      	lsls	r3, r3, #2
 8102090:	220f      	movs	r2, #15
 8102092:	fa02 f303 	lsl.w	r3, r2, r3
 8102096:	43db      	mvns	r3, r3
 8102098:	69ba      	ldr	r2, [r7, #24]
 810209a:	4013      	ands	r3, r2
 810209c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810209e:	683b      	ldr	r3, [r7, #0]
 81020a0:	691a      	ldr	r2, [r3, #16]
 81020a2:	69fb      	ldr	r3, [r7, #28]
 81020a4:	f003 0307 	and.w	r3, r3, #7
 81020a8:	009b      	lsls	r3, r3, #2
 81020aa:	fa02 f303 	lsl.w	r3, r2, r3
 81020ae:	69ba      	ldr	r2, [r7, #24]
 81020b0:	4313      	orrs	r3, r2
 81020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81020b4:	69fb      	ldr	r3, [r7, #28]
 81020b6:	08da      	lsrs	r2, r3, #3
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	3208      	adds	r2, #8
 81020bc:	69b9      	ldr	r1, [r7, #24]
 81020be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	681b      	ldr	r3, [r3, #0]
 81020c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81020c8:	69fb      	ldr	r3, [r7, #28]
 81020ca:	005b      	lsls	r3, r3, #1
 81020cc:	2203      	movs	r2, #3
 81020ce:	fa02 f303 	lsl.w	r3, r2, r3
 81020d2:	43db      	mvns	r3, r3
 81020d4:	69ba      	ldr	r2, [r7, #24]
 81020d6:	4013      	ands	r3, r2
 81020d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81020da:	683b      	ldr	r3, [r7, #0]
 81020dc:	685b      	ldr	r3, [r3, #4]
 81020de:	f003 0203 	and.w	r2, r3, #3
 81020e2:	69fb      	ldr	r3, [r7, #28]
 81020e4:	005b      	lsls	r3, r3, #1
 81020e6:	fa02 f303 	lsl.w	r3, r2, r3
 81020ea:	69ba      	ldr	r2, [r7, #24]
 81020ec:	4313      	orrs	r3, r2
 81020ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	69ba      	ldr	r2, [r7, #24]
 81020f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81020f6:	683b      	ldr	r3, [r7, #0]
 81020f8:	685b      	ldr	r3, [r3, #4]
 81020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81020fe:	2b00      	cmp	r3, #0
 8102100:	f000 80e0 	beq.w	81022c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102104:	4b2f      	ldr	r3, [pc, #188]	; (81021c4 <HAL_GPIO_Init+0x238>)
 8102106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810210a:	4a2e      	ldr	r2, [pc, #184]	; (81021c4 <HAL_GPIO_Init+0x238>)
 810210c:	f043 0302 	orr.w	r3, r3, #2
 8102110:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102114:	4b2b      	ldr	r3, [pc, #172]	; (81021c4 <HAL_GPIO_Init+0x238>)
 8102116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810211a:	f003 0302 	and.w	r3, r3, #2
 810211e:	60fb      	str	r3, [r7, #12]
 8102120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102122:	4a29      	ldr	r2, [pc, #164]	; (81021c8 <HAL_GPIO_Init+0x23c>)
 8102124:	69fb      	ldr	r3, [r7, #28]
 8102126:	089b      	lsrs	r3, r3, #2
 8102128:	3302      	adds	r3, #2
 810212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102130:	69fb      	ldr	r3, [r7, #28]
 8102132:	f003 0303 	and.w	r3, r3, #3
 8102136:	009b      	lsls	r3, r3, #2
 8102138:	220f      	movs	r2, #15
 810213a:	fa02 f303 	lsl.w	r3, r2, r3
 810213e:	43db      	mvns	r3, r3
 8102140:	69ba      	ldr	r2, [r7, #24]
 8102142:	4013      	ands	r3, r2
 8102144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	4a20      	ldr	r2, [pc, #128]	; (81021cc <HAL_GPIO_Init+0x240>)
 810214a:	4293      	cmp	r3, r2
 810214c:	d052      	beq.n	81021f4 <HAL_GPIO_Init+0x268>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	4a1f      	ldr	r2, [pc, #124]	; (81021d0 <HAL_GPIO_Init+0x244>)
 8102152:	4293      	cmp	r3, r2
 8102154:	d031      	beq.n	81021ba <HAL_GPIO_Init+0x22e>
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	4a1e      	ldr	r2, [pc, #120]	; (81021d4 <HAL_GPIO_Init+0x248>)
 810215a:	4293      	cmp	r3, r2
 810215c:	d02b      	beq.n	81021b6 <HAL_GPIO_Init+0x22a>
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	4a1d      	ldr	r2, [pc, #116]	; (81021d8 <HAL_GPIO_Init+0x24c>)
 8102162:	4293      	cmp	r3, r2
 8102164:	d025      	beq.n	81021b2 <HAL_GPIO_Init+0x226>
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	4a1c      	ldr	r2, [pc, #112]	; (81021dc <HAL_GPIO_Init+0x250>)
 810216a:	4293      	cmp	r3, r2
 810216c:	d01f      	beq.n	81021ae <HAL_GPIO_Init+0x222>
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	4a1b      	ldr	r2, [pc, #108]	; (81021e0 <HAL_GPIO_Init+0x254>)
 8102172:	4293      	cmp	r3, r2
 8102174:	d019      	beq.n	81021aa <HAL_GPIO_Init+0x21e>
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	4a1a      	ldr	r2, [pc, #104]	; (81021e4 <HAL_GPIO_Init+0x258>)
 810217a:	4293      	cmp	r3, r2
 810217c:	d013      	beq.n	81021a6 <HAL_GPIO_Init+0x21a>
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	4a19      	ldr	r2, [pc, #100]	; (81021e8 <HAL_GPIO_Init+0x25c>)
 8102182:	4293      	cmp	r3, r2
 8102184:	d00d      	beq.n	81021a2 <HAL_GPIO_Init+0x216>
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	4a18      	ldr	r2, [pc, #96]	; (81021ec <HAL_GPIO_Init+0x260>)
 810218a:	4293      	cmp	r3, r2
 810218c:	d007      	beq.n	810219e <HAL_GPIO_Init+0x212>
 810218e:	687b      	ldr	r3, [r7, #4]
 8102190:	4a17      	ldr	r2, [pc, #92]	; (81021f0 <HAL_GPIO_Init+0x264>)
 8102192:	4293      	cmp	r3, r2
 8102194:	d101      	bne.n	810219a <HAL_GPIO_Init+0x20e>
 8102196:	2309      	movs	r3, #9
 8102198:	e02d      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 810219a:	230a      	movs	r3, #10
 810219c:	e02b      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 810219e:	2308      	movs	r3, #8
 81021a0:	e029      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021a2:	2307      	movs	r3, #7
 81021a4:	e027      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021a6:	2306      	movs	r3, #6
 81021a8:	e025      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021aa:	2305      	movs	r3, #5
 81021ac:	e023      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021ae:	2304      	movs	r3, #4
 81021b0:	e021      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021b2:	2303      	movs	r3, #3
 81021b4:	e01f      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021b6:	2302      	movs	r3, #2
 81021b8:	e01d      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021ba:	2301      	movs	r3, #1
 81021bc:	e01b      	b.n	81021f6 <HAL_GPIO_Init+0x26a>
 81021be:	bf00      	nop
 81021c0:	580000c0 	.word	0x580000c0
 81021c4:	58024400 	.word	0x58024400
 81021c8:	58000400 	.word	0x58000400
 81021cc:	58020000 	.word	0x58020000
 81021d0:	58020400 	.word	0x58020400
 81021d4:	58020800 	.word	0x58020800
 81021d8:	58020c00 	.word	0x58020c00
 81021dc:	58021000 	.word	0x58021000
 81021e0:	58021400 	.word	0x58021400
 81021e4:	58021800 	.word	0x58021800
 81021e8:	58021c00 	.word	0x58021c00
 81021ec:	58022000 	.word	0x58022000
 81021f0:	58022400 	.word	0x58022400
 81021f4:	2300      	movs	r3, #0
 81021f6:	69fa      	ldr	r2, [r7, #28]
 81021f8:	f002 0203 	and.w	r2, r2, #3
 81021fc:	0092      	lsls	r2, r2, #2
 81021fe:	4093      	lsls	r3, r2
 8102200:	69ba      	ldr	r2, [r7, #24]
 8102202:	4313      	orrs	r3, r2
 8102204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102206:	4938      	ldr	r1, [pc, #224]	; (81022e8 <HAL_GPIO_Init+0x35c>)
 8102208:	69fb      	ldr	r3, [r7, #28]
 810220a:	089b      	lsrs	r3, r3, #2
 810220c:	3302      	adds	r3, #2
 810220e:	69ba      	ldr	r2, [r7, #24]
 8102210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102214:	697b      	ldr	r3, [r7, #20]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810221a:	693b      	ldr	r3, [r7, #16]
 810221c:	43db      	mvns	r3, r3
 810221e:	69ba      	ldr	r2, [r7, #24]
 8102220:	4013      	ands	r3, r2
 8102222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8102224:	683b      	ldr	r3, [r7, #0]
 8102226:	685b      	ldr	r3, [r3, #4]
 8102228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810222c:	2b00      	cmp	r3, #0
 810222e:	d003      	beq.n	8102238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8102230:	69ba      	ldr	r2, [r7, #24]
 8102232:	693b      	ldr	r3, [r7, #16]
 8102234:	4313      	orrs	r3, r2
 8102236:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102238:	697b      	ldr	r3, [r7, #20]
 810223a:	69ba      	ldr	r2, [r7, #24]
 810223c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810223e:	697b      	ldr	r3, [r7, #20]
 8102240:	685b      	ldr	r3, [r3, #4]
 8102242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102244:	693b      	ldr	r3, [r7, #16]
 8102246:	43db      	mvns	r3, r3
 8102248:	69ba      	ldr	r2, [r7, #24]
 810224a:	4013      	ands	r3, r2
 810224c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810224e:	683b      	ldr	r3, [r7, #0]
 8102250:	685b      	ldr	r3, [r3, #4]
 8102252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102256:	2b00      	cmp	r3, #0
 8102258:	d003      	beq.n	8102262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810225a:	69ba      	ldr	r2, [r7, #24]
 810225c:	693b      	ldr	r3, [r7, #16]
 810225e:	4313      	orrs	r3, r2
 8102260:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102262:	697b      	ldr	r3, [r7, #20]
 8102264:	69ba      	ldr	r2, [r7, #24]
 8102266:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102270:	693b      	ldr	r3, [r7, #16]
 8102272:	43db      	mvns	r3, r3
 8102274:	69ba      	ldr	r2, [r7, #24]
 8102276:	4013      	ands	r3, r2
 8102278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810227a:	683b      	ldr	r3, [r7, #0]
 810227c:	685b      	ldr	r3, [r3, #4]
 810227e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102282:	2b00      	cmp	r3, #0
 8102284:	d003      	beq.n	810228e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8102286:	69ba      	ldr	r2, [r7, #24]
 8102288:	693b      	ldr	r3, [r7, #16]
 810228a:	4313      	orrs	r3, r2
 810228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810228e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102292:	69bb      	ldr	r3, [r7, #24]
 8102294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810229a:	685b      	ldr	r3, [r3, #4]
 810229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810229e:	693b      	ldr	r3, [r7, #16]
 81022a0:	43db      	mvns	r3, r3
 81022a2:	69ba      	ldr	r2, [r7, #24]
 81022a4:	4013      	ands	r3, r2
 81022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81022a8:	683b      	ldr	r3, [r7, #0]
 81022aa:	685b      	ldr	r3, [r3, #4]
 81022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81022b0:	2b00      	cmp	r3, #0
 81022b2:	d003      	beq.n	81022bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81022b4:	69ba      	ldr	r2, [r7, #24]
 81022b6:	693b      	ldr	r3, [r7, #16]
 81022b8:	4313      	orrs	r3, r2
 81022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81022bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81022c0:	69bb      	ldr	r3, [r7, #24]
 81022c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81022c4:	69fb      	ldr	r3, [r7, #28]
 81022c6:	3301      	adds	r3, #1
 81022c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81022ca:	683b      	ldr	r3, [r7, #0]
 81022cc:	681a      	ldr	r2, [r3, #0]
 81022ce:	69fb      	ldr	r3, [r7, #28]
 81022d0:	fa22 f303 	lsr.w	r3, r2, r3
 81022d4:	2b00      	cmp	r3, #0
 81022d6:	f47f ae63 	bne.w	8101fa0 <HAL_GPIO_Init+0x14>
  }
}
 81022da:	bf00      	nop
 81022dc:	bf00      	nop
 81022de:	3724      	adds	r7, #36	; 0x24
 81022e0:	46bd      	mov	sp, r7
 81022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e6:	4770      	bx	lr
 81022e8:	58000400 	.word	0x58000400

081022ec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81022ec:	b480      	push	{r7}
 81022ee:	b083      	sub	sp, #12
 81022f0:	af00      	add	r7, sp, #0
 81022f2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81022f4:	4a08      	ldr	r2, [pc, #32]	; (8102318 <HAL_HSEM_FastTake+0x2c>)
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	3320      	adds	r3, #32
 81022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81022fe:	4a07      	ldr	r2, [pc, #28]	; (810231c <HAL_HSEM_FastTake+0x30>)
 8102300:	4293      	cmp	r3, r2
 8102302:	d101      	bne.n	8102308 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8102304:	2300      	movs	r3, #0
 8102306:	e000      	b.n	810230a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8102308:	2301      	movs	r3, #1
}
 810230a:	4618      	mov	r0, r3
 810230c:	370c      	adds	r7, #12
 810230e:	46bd      	mov	sp, r7
 8102310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102314:	4770      	bx	lr
 8102316:	bf00      	nop
 8102318:	58026400 	.word	0x58026400
 810231c:	80000100 	.word	0x80000100

08102320 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8102320:	b480      	push	{r7}
 8102322:	b083      	sub	sp, #12
 8102324:	af00      	add	r7, sp, #0
 8102326:	6078      	str	r0, [r7, #4]
 8102328:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810232a:	4906      	ldr	r1, [pc, #24]	; (8102344 <HAL_HSEM_Release+0x24>)
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8102338:	bf00      	nop
 810233a:	370c      	adds	r7, #12
 810233c:	46bd      	mov	sp, r7
 810233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102342:	4770      	bx	lr
 8102344:	58026400 	.word	0x58026400

08102348 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102348:	b480      	push	{r7}
 810234a:	b083      	sub	sp, #12
 810234c:	af00      	add	r7, sp, #0
 810234e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102350:	4b05      	ldr	r3, [pc, #20]	; (8102368 <HAL_HSEM_ActivateNotification+0x20>)
 8102352:	681a      	ldr	r2, [r3, #0]
 8102354:	4904      	ldr	r1, [pc, #16]	; (8102368 <HAL_HSEM_ActivateNotification+0x20>)
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	4313      	orrs	r3, r2
 810235a:	600b      	str	r3, [r1, #0]
#endif
}
 810235c:	bf00      	nop
 810235e:	370c      	adds	r7, #12
 8102360:	46bd      	mov	sp, r7
 8102362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102366:	4770      	bx	lr
 8102368:	58026510 	.word	0x58026510

0810236c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810236c:	b580      	push	{r7, lr}
 810236e:	b082      	sub	sp, #8
 8102370:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8102372:	4b0a      	ldr	r3, [pc, #40]	; (810239c <HAL_HSEM_IRQHandler+0x30>)
 8102374:	68db      	ldr	r3, [r3, #12]
 8102376:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8102378:	4b08      	ldr	r3, [pc, #32]	; (810239c <HAL_HSEM_IRQHandler+0x30>)
 810237a:	681a      	ldr	r2, [r3, #0]
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	43db      	mvns	r3, r3
 8102380:	4906      	ldr	r1, [pc, #24]	; (810239c <HAL_HSEM_IRQHandler+0x30>)
 8102382:	4013      	ands	r3, r2
 8102384:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8102386:	4a05      	ldr	r2, [pc, #20]	; (810239c <HAL_HSEM_IRQHandler+0x30>)
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810238c:	6878      	ldr	r0, [r7, #4]
 810238e:	f007 f903 	bl	8109598 <HAL_HSEM_FreeCallback>
}
 8102392:	bf00      	nop
 8102394:	3708      	adds	r7, #8
 8102396:	46bd      	mov	sp, r7
 8102398:	bd80      	pop	{r7, pc}
 810239a:	bf00      	nop
 810239c:	58026510 	.word	0x58026510

081023a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81023a0:	b580      	push	{r7, lr}
 81023a2:	b082      	sub	sp, #8
 81023a4:	af00      	add	r7, sp, #0
 81023a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	d101      	bne.n	81023b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81023ae:	2301      	movs	r3, #1
 81023b0:	e081      	b.n	81024b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81023b8:	b2db      	uxtb	r3, r3
 81023ba:	2b00      	cmp	r3, #0
 81023bc:	d106      	bne.n	81023cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	2200      	movs	r2, #0
 81023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81023c6:	6878      	ldr	r0, [r7, #4]
 81023c8:	f7fe feb4 	bl	8101134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	2224      	movs	r2, #36	; 0x24
 81023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	681a      	ldr	r2, [r3, #0]
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	f022 0201 	bic.w	r2, r2, #1
 81023e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	685a      	ldr	r2, [r3, #4]
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81023f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	689a      	ldr	r2, [r3, #8]
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	68db      	ldr	r3, [r3, #12]
 8102406:	2b01      	cmp	r3, #1
 8102408:	d107      	bne.n	810241a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	689a      	ldr	r2, [r3, #8]
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	681b      	ldr	r3, [r3, #0]
 8102412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102416:	609a      	str	r2, [r3, #8]
 8102418:	e006      	b.n	8102428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	689a      	ldr	r2, [r3, #8]
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	68db      	ldr	r3, [r3, #12]
 810242c:	2b02      	cmp	r3, #2
 810242e:	d104      	bne.n	810243a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	685b      	ldr	r3, [r3, #4]
 8102440:	687a      	ldr	r2, [r7, #4]
 8102442:	6812      	ldr	r2, [r2, #0]
 8102444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810244c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	68da      	ldr	r2, [r3, #12]
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810245c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	691a      	ldr	r2, [r3, #16]
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	695b      	ldr	r3, [r3, #20]
 8102466:	ea42 0103 	orr.w	r1, r2, r3
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	699b      	ldr	r3, [r3, #24]
 810246e:	021a      	lsls	r2, r3, #8
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	430a      	orrs	r2, r1
 8102476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	69d9      	ldr	r1, [r3, #28]
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	6a1a      	ldr	r2, [r3, #32]
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	430a      	orrs	r2, r1
 8102486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102488:	687b      	ldr	r3, [r7, #4]
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	681a      	ldr	r2, [r3, #0]
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	f042 0201 	orr.w	r2, r2, #1
 8102496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	2200      	movs	r2, #0
 810249c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	2220      	movs	r2, #32
 81024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	2200      	movs	r2, #0
 81024aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	2200      	movs	r2, #0
 81024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81024b4:	2300      	movs	r3, #0
}
 81024b6:	4618      	mov	r0, r3
 81024b8:	3708      	adds	r7, #8
 81024ba:	46bd      	mov	sp, r7
 81024bc:	bd80      	pop	{r7, pc}
	...

081024c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81024c0:	b580      	push	{r7, lr}
 81024c2:	b088      	sub	sp, #32
 81024c4:	af02      	add	r7, sp, #8
 81024c6:	60f8      	str	r0, [r7, #12]
 81024c8:	4608      	mov	r0, r1
 81024ca:	4611      	mov	r1, r2
 81024cc:	461a      	mov	r2, r3
 81024ce:	4603      	mov	r3, r0
 81024d0:	817b      	strh	r3, [r7, #10]
 81024d2:	460b      	mov	r3, r1
 81024d4:	813b      	strh	r3, [r7, #8]
 81024d6:	4613      	mov	r3, r2
 81024d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81024da:	68fb      	ldr	r3, [r7, #12]
 81024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81024e0:	b2db      	uxtb	r3, r3
 81024e2:	2b20      	cmp	r3, #32
 81024e4:	f040 80f9 	bne.w	81026da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81024e8:	6a3b      	ldr	r3, [r7, #32]
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d002      	beq.n	81024f4 <HAL_I2C_Mem_Write+0x34>
 81024ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81024f0:	2b00      	cmp	r3, #0
 81024f2:	d105      	bne.n	8102500 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81024f4:	68fb      	ldr	r3, [r7, #12]
 81024f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81024fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81024fc:	2301      	movs	r3, #1
 81024fe:	e0ed      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102500:	68fb      	ldr	r3, [r7, #12]
 8102502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102506:	2b01      	cmp	r3, #1
 8102508:	d101      	bne.n	810250e <HAL_I2C_Mem_Write+0x4e>
 810250a:	2302      	movs	r3, #2
 810250c:	e0e6      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
 810250e:	68fb      	ldr	r3, [r7, #12]
 8102510:	2201      	movs	r2, #1
 8102512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102516:	f7ff fbb9 	bl	8101c8c <HAL_GetTick>
 810251a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810251c:	697b      	ldr	r3, [r7, #20]
 810251e:	9300      	str	r3, [sp, #0]
 8102520:	2319      	movs	r3, #25
 8102522:	2201      	movs	r2, #1
 8102524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102528:	68f8      	ldr	r0, [r7, #12]
 810252a:	f000 fadd 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 810252e:	4603      	mov	r3, r0
 8102530:	2b00      	cmp	r3, #0
 8102532:	d001      	beq.n	8102538 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102534:	2301      	movs	r3, #1
 8102536:	e0d1      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102538:	68fb      	ldr	r3, [r7, #12]
 810253a:	2221      	movs	r2, #33	; 0x21
 810253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102540:	68fb      	ldr	r3, [r7, #12]
 8102542:	2240      	movs	r2, #64	; 0x40
 8102544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	2200      	movs	r2, #0
 810254c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810254e:	68fb      	ldr	r3, [r7, #12]
 8102550:	6a3a      	ldr	r2, [r7, #32]
 8102552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	2200      	movs	r2, #0
 810255e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102560:	88f8      	ldrh	r0, [r7, #6]
 8102562:	893a      	ldrh	r2, [r7, #8]
 8102564:	8979      	ldrh	r1, [r7, #10]
 8102566:	697b      	ldr	r3, [r7, #20]
 8102568:	9301      	str	r3, [sp, #4]
 810256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810256c:	9300      	str	r3, [sp, #0]
 810256e:	4603      	mov	r3, r0
 8102570:	68f8      	ldr	r0, [r7, #12]
 8102572:	f000 f9ed 	bl	8102950 <I2C_RequestMemoryWrite>
 8102576:	4603      	mov	r3, r0
 8102578:	2b00      	cmp	r3, #0
 810257a:	d005      	beq.n	8102588 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810257c:	68fb      	ldr	r3, [r7, #12]
 810257e:	2200      	movs	r2, #0
 8102580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102584:	2301      	movs	r3, #1
 8102586:	e0a9      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810258c:	b29b      	uxth	r3, r3
 810258e:	2bff      	cmp	r3, #255	; 0xff
 8102590:	d90e      	bls.n	81025b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102592:	68fb      	ldr	r3, [r7, #12]
 8102594:	22ff      	movs	r2, #255	; 0xff
 8102596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102598:	68fb      	ldr	r3, [r7, #12]
 810259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810259c:	b2da      	uxtb	r2, r3
 810259e:	8979      	ldrh	r1, [r7, #10]
 81025a0:	2300      	movs	r3, #0
 81025a2:	9300      	str	r3, [sp, #0]
 81025a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81025a8:	68f8      	ldr	r0, [r7, #12]
 81025aa:	f000 fbbf 	bl	8102d2c <I2C_TransferConfig>
 81025ae:	e00f      	b.n	81025d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025b4:	b29a      	uxth	r2, r3
 81025b6:	68fb      	ldr	r3, [r7, #12]
 81025b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81025ba:	68fb      	ldr	r3, [r7, #12]
 81025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025be:	b2da      	uxtb	r2, r3
 81025c0:	8979      	ldrh	r1, [r7, #10]
 81025c2:	2300      	movs	r3, #0
 81025c4:	9300      	str	r3, [sp, #0]
 81025c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81025ca:	68f8      	ldr	r0, [r7, #12]
 81025cc:	f000 fbae 	bl	8102d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81025d0:	697a      	ldr	r2, [r7, #20]
 81025d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81025d4:	68f8      	ldr	r0, [r7, #12]
 81025d6:	f000 fac7 	bl	8102b68 <I2C_WaitOnTXISFlagUntilTimeout>
 81025da:	4603      	mov	r3, r0
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d001      	beq.n	81025e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81025e0:	2301      	movs	r3, #1
 81025e2:	e07b      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81025e4:	68fb      	ldr	r3, [r7, #12]
 81025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81025e8:	781a      	ldrb	r2, [r3, #0]
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81025f0:	68fb      	ldr	r3, [r7, #12]
 81025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81025f4:	1c5a      	adds	r2, r3, #1
 81025f6:	68fb      	ldr	r3, [r7, #12]
 81025f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81025fa:	68fb      	ldr	r3, [r7, #12]
 81025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025fe:	b29b      	uxth	r3, r3
 8102600:	3b01      	subs	r3, #1
 8102602:	b29a      	uxth	r2, r3
 8102604:	68fb      	ldr	r3, [r7, #12]
 8102606:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102608:	68fb      	ldr	r3, [r7, #12]
 810260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810260c:	3b01      	subs	r3, #1
 810260e:	b29a      	uxth	r2, r3
 8102610:	68fb      	ldr	r3, [r7, #12]
 8102612:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102618:	b29b      	uxth	r3, r3
 810261a:	2b00      	cmp	r3, #0
 810261c:	d034      	beq.n	8102688 <HAL_I2C_Mem_Write+0x1c8>
 810261e:	68fb      	ldr	r3, [r7, #12]
 8102620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102622:	2b00      	cmp	r3, #0
 8102624:	d130      	bne.n	8102688 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102626:	697b      	ldr	r3, [r7, #20]
 8102628:	9300      	str	r3, [sp, #0]
 810262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810262c:	2200      	movs	r2, #0
 810262e:	2180      	movs	r1, #128	; 0x80
 8102630:	68f8      	ldr	r0, [r7, #12]
 8102632:	f000 fa59 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 8102636:	4603      	mov	r3, r0
 8102638:	2b00      	cmp	r3, #0
 810263a:	d001      	beq.n	8102640 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 810263c:	2301      	movs	r3, #1
 810263e:	e04d      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102640:	68fb      	ldr	r3, [r7, #12]
 8102642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102644:	b29b      	uxth	r3, r3
 8102646:	2bff      	cmp	r3, #255	; 0xff
 8102648:	d90e      	bls.n	8102668 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810264a:	68fb      	ldr	r3, [r7, #12]
 810264c:	22ff      	movs	r2, #255	; 0xff
 810264e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102650:	68fb      	ldr	r3, [r7, #12]
 8102652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102654:	b2da      	uxtb	r2, r3
 8102656:	8979      	ldrh	r1, [r7, #10]
 8102658:	2300      	movs	r3, #0
 810265a:	9300      	str	r3, [sp, #0]
 810265c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102660:	68f8      	ldr	r0, [r7, #12]
 8102662:	f000 fb63 	bl	8102d2c <I2C_TransferConfig>
 8102666:	e00f      	b.n	8102688 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102668:	68fb      	ldr	r3, [r7, #12]
 810266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810266c:	b29a      	uxth	r2, r3
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102672:	68fb      	ldr	r3, [r7, #12]
 8102674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102676:	b2da      	uxtb	r2, r3
 8102678:	8979      	ldrh	r1, [r7, #10]
 810267a:	2300      	movs	r3, #0
 810267c:	9300      	str	r3, [sp, #0]
 810267e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102682:	68f8      	ldr	r0, [r7, #12]
 8102684:	f000 fb52 	bl	8102d2c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810268c:	b29b      	uxth	r3, r3
 810268e:	2b00      	cmp	r3, #0
 8102690:	d19e      	bne.n	81025d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102692:	697a      	ldr	r2, [r7, #20]
 8102694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102696:	68f8      	ldr	r0, [r7, #12]
 8102698:	f000 faa6 	bl	8102be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 810269c:	4603      	mov	r3, r0
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d001      	beq.n	81026a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81026a2:	2301      	movs	r3, #1
 81026a4:	e01a      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	2220      	movs	r2, #32
 81026ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81026ae:	68fb      	ldr	r3, [r7, #12]
 81026b0:	681b      	ldr	r3, [r3, #0]
 81026b2:	6859      	ldr	r1, [r3, #4]
 81026b4:	68fb      	ldr	r3, [r7, #12]
 81026b6:	681a      	ldr	r2, [r3, #0]
 81026b8:	4b0a      	ldr	r3, [pc, #40]	; (81026e4 <HAL_I2C_Mem_Write+0x224>)
 81026ba:	400b      	ands	r3, r1
 81026bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81026be:	68fb      	ldr	r3, [r7, #12]
 81026c0:	2220      	movs	r2, #32
 81026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81026c6:	68fb      	ldr	r3, [r7, #12]
 81026c8:	2200      	movs	r2, #0
 81026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	2200      	movs	r2, #0
 81026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81026d6:	2300      	movs	r3, #0
 81026d8:	e000      	b.n	81026dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81026da:	2302      	movs	r3, #2
  }
}
 81026dc:	4618      	mov	r0, r3
 81026de:	3718      	adds	r7, #24
 81026e0:	46bd      	mov	sp, r7
 81026e2:	bd80      	pop	{r7, pc}
 81026e4:	fe00e800 	.word	0xfe00e800

081026e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81026e8:	b580      	push	{r7, lr}
 81026ea:	b088      	sub	sp, #32
 81026ec:	af02      	add	r7, sp, #8
 81026ee:	60f8      	str	r0, [r7, #12]
 81026f0:	4608      	mov	r0, r1
 81026f2:	4611      	mov	r1, r2
 81026f4:	461a      	mov	r2, r3
 81026f6:	4603      	mov	r3, r0
 81026f8:	817b      	strh	r3, [r7, #10]
 81026fa:	460b      	mov	r3, r1
 81026fc:	813b      	strh	r3, [r7, #8]
 81026fe:	4613      	mov	r3, r2
 8102700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102702:	68fb      	ldr	r3, [r7, #12]
 8102704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102708:	b2db      	uxtb	r3, r3
 810270a:	2b20      	cmp	r3, #32
 810270c:	f040 80fd 	bne.w	810290a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102710:	6a3b      	ldr	r3, [r7, #32]
 8102712:	2b00      	cmp	r3, #0
 8102714:	d002      	beq.n	810271c <HAL_I2C_Mem_Read+0x34>
 8102716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102718:	2b00      	cmp	r3, #0
 810271a:	d105      	bne.n	8102728 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102722:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102724:	2301      	movs	r3, #1
 8102726:	e0f1      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102728:	68fb      	ldr	r3, [r7, #12]
 810272a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810272e:	2b01      	cmp	r3, #1
 8102730:	d101      	bne.n	8102736 <HAL_I2C_Mem_Read+0x4e>
 8102732:	2302      	movs	r3, #2
 8102734:	e0ea      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
 8102736:	68fb      	ldr	r3, [r7, #12]
 8102738:	2201      	movs	r2, #1
 810273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810273e:	f7ff faa5 	bl	8101c8c <HAL_GetTick>
 8102742:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102744:	697b      	ldr	r3, [r7, #20]
 8102746:	9300      	str	r3, [sp, #0]
 8102748:	2319      	movs	r3, #25
 810274a:	2201      	movs	r2, #1
 810274c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102750:	68f8      	ldr	r0, [r7, #12]
 8102752:	f000 f9c9 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 8102756:	4603      	mov	r3, r0
 8102758:	2b00      	cmp	r3, #0
 810275a:	d001      	beq.n	8102760 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810275c:	2301      	movs	r3, #1
 810275e:	e0d5      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102760:	68fb      	ldr	r3, [r7, #12]
 8102762:	2222      	movs	r2, #34	; 0x22
 8102764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102768:	68fb      	ldr	r3, [r7, #12]
 810276a:	2240      	movs	r2, #64	; 0x40
 810276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102770:	68fb      	ldr	r3, [r7, #12]
 8102772:	2200      	movs	r2, #0
 8102774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	6a3a      	ldr	r2, [r7, #32]
 810277a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102782:	68fb      	ldr	r3, [r7, #12]
 8102784:	2200      	movs	r2, #0
 8102786:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102788:	88f8      	ldrh	r0, [r7, #6]
 810278a:	893a      	ldrh	r2, [r7, #8]
 810278c:	8979      	ldrh	r1, [r7, #10]
 810278e:	697b      	ldr	r3, [r7, #20]
 8102790:	9301      	str	r3, [sp, #4]
 8102792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102794:	9300      	str	r3, [sp, #0]
 8102796:	4603      	mov	r3, r0
 8102798:	68f8      	ldr	r0, [r7, #12]
 810279a:	f000 f92d 	bl	81029f8 <I2C_RequestMemoryRead>
 810279e:	4603      	mov	r3, r0
 81027a0:	2b00      	cmp	r3, #0
 81027a2:	d005      	beq.n	81027b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81027a4:	68fb      	ldr	r3, [r7, #12]
 81027a6:	2200      	movs	r2, #0
 81027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81027ac:	2301      	movs	r3, #1
 81027ae:	e0ad      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027b4:	b29b      	uxth	r3, r3
 81027b6:	2bff      	cmp	r3, #255	; 0xff
 81027b8:	d90e      	bls.n	81027d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81027ba:	68fb      	ldr	r3, [r7, #12]
 81027bc:	22ff      	movs	r2, #255	; 0xff
 81027be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027c4:	b2da      	uxtb	r2, r3
 81027c6:	8979      	ldrh	r1, [r7, #10]
 81027c8:	4b52      	ldr	r3, [pc, #328]	; (8102914 <HAL_I2C_Mem_Read+0x22c>)
 81027ca:	9300      	str	r3, [sp, #0]
 81027cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81027d0:	68f8      	ldr	r0, [r7, #12]
 81027d2:	f000 faab 	bl	8102d2c <I2C_TransferConfig>
 81027d6:	e00f      	b.n	81027f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81027d8:	68fb      	ldr	r3, [r7, #12]
 81027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027dc:	b29a      	uxth	r2, r3
 81027de:	68fb      	ldr	r3, [r7, #12]
 81027e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81027e2:	68fb      	ldr	r3, [r7, #12]
 81027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027e6:	b2da      	uxtb	r2, r3
 81027e8:	8979      	ldrh	r1, [r7, #10]
 81027ea:	4b4a      	ldr	r3, [pc, #296]	; (8102914 <HAL_I2C_Mem_Read+0x22c>)
 81027ec:	9300      	str	r3, [sp, #0]
 81027ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81027f2:	68f8      	ldr	r0, [r7, #12]
 81027f4:	f000 fa9a 	bl	8102d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81027f8:	697b      	ldr	r3, [r7, #20]
 81027fa:	9300      	str	r3, [sp, #0]
 81027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027fe:	2200      	movs	r2, #0
 8102800:	2104      	movs	r1, #4
 8102802:	68f8      	ldr	r0, [r7, #12]
 8102804:	f000 f970 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 8102808:	4603      	mov	r3, r0
 810280a:	2b00      	cmp	r3, #0
 810280c:	d001      	beq.n	8102812 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810280e:	2301      	movs	r3, #1
 8102810:	e07c      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102818:	68fb      	ldr	r3, [r7, #12]
 810281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810281c:	b2d2      	uxtb	r2, r2
 810281e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102824:	1c5a      	adds	r2, r3, #1
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810282a:	68fb      	ldr	r3, [r7, #12]
 810282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810282e:	3b01      	subs	r3, #1
 8102830:	b29a      	uxth	r2, r3
 8102832:	68fb      	ldr	r3, [r7, #12]
 8102834:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102836:	68fb      	ldr	r3, [r7, #12]
 8102838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810283a:	b29b      	uxth	r3, r3
 810283c:	3b01      	subs	r3, #1
 810283e:	b29a      	uxth	r2, r3
 8102840:	68fb      	ldr	r3, [r7, #12]
 8102842:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102848:	b29b      	uxth	r3, r3
 810284a:	2b00      	cmp	r3, #0
 810284c:	d034      	beq.n	81028b8 <HAL_I2C_Mem_Read+0x1d0>
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102852:	2b00      	cmp	r3, #0
 8102854:	d130      	bne.n	81028b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102856:	697b      	ldr	r3, [r7, #20]
 8102858:	9300      	str	r3, [sp, #0]
 810285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810285c:	2200      	movs	r2, #0
 810285e:	2180      	movs	r1, #128	; 0x80
 8102860:	68f8      	ldr	r0, [r7, #12]
 8102862:	f000 f941 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 8102866:	4603      	mov	r3, r0
 8102868:	2b00      	cmp	r3, #0
 810286a:	d001      	beq.n	8102870 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810286c:	2301      	movs	r3, #1
 810286e:	e04d      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102874:	b29b      	uxth	r3, r3
 8102876:	2bff      	cmp	r3, #255	; 0xff
 8102878:	d90e      	bls.n	8102898 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810287a:	68fb      	ldr	r3, [r7, #12]
 810287c:	22ff      	movs	r2, #255	; 0xff
 810287e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102880:	68fb      	ldr	r3, [r7, #12]
 8102882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102884:	b2da      	uxtb	r2, r3
 8102886:	8979      	ldrh	r1, [r7, #10]
 8102888:	2300      	movs	r3, #0
 810288a:	9300      	str	r3, [sp, #0]
 810288c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102890:	68f8      	ldr	r0, [r7, #12]
 8102892:	f000 fa4b 	bl	8102d2c <I2C_TransferConfig>
 8102896:	e00f      	b.n	81028b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102898:	68fb      	ldr	r3, [r7, #12]
 810289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810289c:	b29a      	uxth	r2, r3
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028a6:	b2da      	uxtb	r2, r3
 81028a8:	8979      	ldrh	r1, [r7, #10]
 81028aa:	2300      	movs	r3, #0
 81028ac:	9300      	str	r3, [sp, #0]
 81028ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81028b2:	68f8      	ldr	r0, [r7, #12]
 81028b4:	f000 fa3a 	bl	8102d2c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 81028b8:	68fb      	ldr	r3, [r7, #12]
 81028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028bc:	b29b      	uxth	r3, r3
 81028be:	2b00      	cmp	r3, #0
 81028c0:	d19a      	bne.n	81027f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81028c2:	697a      	ldr	r2, [r7, #20]
 81028c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81028c6:	68f8      	ldr	r0, [r7, #12]
 81028c8:	f000 f98e 	bl	8102be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 81028cc:	4603      	mov	r3, r0
 81028ce:	2b00      	cmp	r3, #0
 81028d0:	d001      	beq.n	81028d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81028d2:	2301      	movs	r3, #1
 81028d4:	e01a      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81028d6:	68fb      	ldr	r3, [r7, #12]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	2220      	movs	r2, #32
 81028dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	6859      	ldr	r1, [r3, #4]
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	681a      	ldr	r2, [r3, #0]
 81028e8:	4b0b      	ldr	r3, [pc, #44]	; (8102918 <HAL_I2C_Mem_Read+0x230>)
 81028ea:	400b      	ands	r3, r1
 81028ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81028ee:	68fb      	ldr	r3, [r7, #12]
 81028f0:	2220      	movs	r2, #32
 81028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81028f6:	68fb      	ldr	r3, [r7, #12]
 81028f8:	2200      	movs	r2, #0
 81028fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81028fe:	68fb      	ldr	r3, [r7, #12]
 8102900:	2200      	movs	r2, #0
 8102902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102906:	2300      	movs	r3, #0
 8102908:	e000      	b.n	810290c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810290a:	2302      	movs	r3, #2
  }
}
 810290c:	4618      	mov	r0, r3
 810290e:	3718      	adds	r7, #24
 8102910:	46bd      	mov	sp, r7
 8102912:	bd80      	pop	{r7, pc}
 8102914:	80002400 	.word	0x80002400
 8102918:	fe00e800 	.word	0xfe00e800

0810291c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 810291c:	b580      	push	{r7, lr}
 810291e:	b084      	sub	sp, #16
 8102920:	af00      	add	r7, sp, #0
 8102922:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	699b      	ldr	r3, [r3, #24]
 810292a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102938:	2b00      	cmp	r3, #0
 810293a:	d005      	beq.n	8102948 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102940:	68ba      	ldr	r2, [r7, #8]
 8102942:	68f9      	ldr	r1, [r7, #12]
 8102944:	6878      	ldr	r0, [r7, #4]
 8102946:	4798      	blx	r3
  }
}
 8102948:	bf00      	nop
 810294a:	3710      	adds	r7, #16
 810294c:	46bd      	mov	sp, r7
 810294e:	bd80      	pop	{r7, pc}

08102950 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102950:	b580      	push	{r7, lr}
 8102952:	b086      	sub	sp, #24
 8102954:	af02      	add	r7, sp, #8
 8102956:	60f8      	str	r0, [r7, #12]
 8102958:	4608      	mov	r0, r1
 810295a:	4611      	mov	r1, r2
 810295c:	461a      	mov	r2, r3
 810295e:	4603      	mov	r3, r0
 8102960:	817b      	strh	r3, [r7, #10]
 8102962:	460b      	mov	r3, r1
 8102964:	813b      	strh	r3, [r7, #8]
 8102966:	4613      	mov	r3, r2
 8102968:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810296a:	88fb      	ldrh	r3, [r7, #6]
 810296c:	b2da      	uxtb	r2, r3
 810296e:	8979      	ldrh	r1, [r7, #10]
 8102970:	4b20      	ldr	r3, [pc, #128]	; (81029f4 <I2C_RequestMemoryWrite+0xa4>)
 8102972:	9300      	str	r3, [sp, #0]
 8102974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102978:	68f8      	ldr	r0, [r7, #12]
 810297a:	f000 f9d7 	bl	8102d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810297e:	69fa      	ldr	r2, [r7, #28]
 8102980:	69b9      	ldr	r1, [r7, #24]
 8102982:	68f8      	ldr	r0, [r7, #12]
 8102984:	f000 f8f0 	bl	8102b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8102988:	4603      	mov	r3, r0
 810298a:	2b00      	cmp	r3, #0
 810298c:	d001      	beq.n	8102992 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810298e:	2301      	movs	r3, #1
 8102990:	e02c      	b.n	81029ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102992:	88fb      	ldrh	r3, [r7, #6]
 8102994:	2b01      	cmp	r3, #1
 8102996:	d105      	bne.n	81029a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102998:	893b      	ldrh	r3, [r7, #8]
 810299a:	b2da      	uxtb	r2, r3
 810299c:	68fb      	ldr	r3, [r7, #12]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	629a      	str	r2, [r3, #40]	; 0x28
 81029a2:	e015      	b.n	81029d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81029a4:	893b      	ldrh	r3, [r7, #8]
 81029a6:	0a1b      	lsrs	r3, r3, #8
 81029a8:	b29b      	uxth	r3, r3
 81029aa:	b2da      	uxtb	r2, r3
 81029ac:	68fb      	ldr	r3, [r7, #12]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81029b2:	69fa      	ldr	r2, [r7, #28]
 81029b4:	69b9      	ldr	r1, [r7, #24]
 81029b6:	68f8      	ldr	r0, [r7, #12]
 81029b8:	f000 f8d6 	bl	8102b68 <I2C_WaitOnTXISFlagUntilTimeout>
 81029bc:	4603      	mov	r3, r0
 81029be:	2b00      	cmp	r3, #0
 81029c0:	d001      	beq.n	81029c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81029c2:	2301      	movs	r3, #1
 81029c4:	e012      	b.n	81029ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029c6:	893b      	ldrh	r3, [r7, #8]
 81029c8:	b2da      	uxtb	r2, r3
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81029d0:	69fb      	ldr	r3, [r7, #28]
 81029d2:	9300      	str	r3, [sp, #0]
 81029d4:	69bb      	ldr	r3, [r7, #24]
 81029d6:	2200      	movs	r2, #0
 81029d8:	2180      	movs	r1, #128	; 0x80
 81029da:	68f8      	ldr	r0, [r7, #12]
 81029dc:	f000 f884 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 81029e0:	4603      	mov	r3, r0
 81029e2:	2b00      	cmp	r3, #0
 81029e4:	d001      	beq.n	81029ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81029e6:	2301      	movs	r3, #1
 81029e8:	e000      	b.n	81029ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81029ea:	2300      	movs	r3, #0
}
 81029ec:	4618      	mov	r0, r3
 81029ee:	3710      	adds	r7, #16
 81029f0:	46bd      	mov	sp, r7
 81029f2:	bd80      	pop	{r7, pc}
 81029f4:	80002000 	.word	0x80002000

081029f8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81029f8:	b580      	push	{r7, lr}
 81029fa:	b086      	sub	sp, #24
 81029fc:	af02      	add	r7, sp, #8
 81029fe:	60f8      	str	r0, [r7, #12]
 8102a00:	4608      	mov	r0, r1
 8102a02:	4611      	mov	r1, r2
 8102a04:	461a      	mov	r2, r3
 8102a06:	4603      	mov	r3, r0
 8102a08:	817b      	strh	r3, [r7, #10]
 8102a0a:	460b      	mov	r3, r1
 8102a0c:	813b      	strh	r3, [r7, #8]
 8102a0e:	4613      	mov	r3, r2
 8102a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102a12:	88fb      	ldrh	r3, [r7, #6]
 8102a14:	b2da      	uxtb	r2, r3
 8102a16:	8979      	ldrh	r1, [r7, #10]
 8102a18:	4b20      	ldr	r3, [pc, #128]	; (8102a9c <I2C_RequestMemoryRead+0xa4>)
 8102a1a:	9300      	str	r3, [sp, #0]
 8102a1c:	2300      	movs	r3, #0
 8102a1e:	68f8      	ldr	r0, [r7, #12]
 8102a20:	f000 f984 	bl	8102d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102a24:	69fa      	ldr	r2, [r7, #28]
 8102a26:	69b9      	ldr	r1, [r7, #24]
 8102a28:	68f8      	ldr	r0, [r7, #12]
 8102a2a:	f000 f89d 	bl	8102b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8102a2e:	4603      	mov	r3, r0
 8102a30:	2b00      	cmp	r3, #0
 8102a32:	d001      	beq.n	8102a38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102a34:	2301      	movs	r3, #1
 8102a36:	e02c      	b.n	8102a92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102a38:	88fb      	ldrh	r3, [r7, #6]
 8102a3a:	2b01      	cmp	r3, #1
 8102a3c:	d105      	bne.n	8102a4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102a3e:	893b      	ldrh	r3, [r7, #8]
 8102a40:	b2da      	uxtb	r2, r3
 8102a42:	68fb      	ldr	r3, [r7, #12]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	629a      	str	r2, [r3, #40]	; 0x28
 8102a48:	e015      	b.n	8102a76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102a4a:	893b      	ldrh	r3, [r7, #8]
 8102a4c:	0a1b      	lsrs	r3, r3, #8
 8102a4e:	b29b      	uxth	r3, r3
 8102a50:	b2da      	uxtb	r2, r3
 8102a52:	68fb      	ldr	r3, [r7, #12]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102a58:	69fa      	ldr	r2, [r7, #28]
 8102a5a:	69b9      	ldr	r1, [r7, #24]
 8102a5c:	68f8      	ldr	r0, [r7, #12]
 8102a5e:	f000 f883 	bl	8102b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8102a62:	4603      	mov	r3, r0
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d001      	beq.n	8102a6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102a68:	2301      	movs	r3, #1
 8102a6a:	e012      	b.n	8102a92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102a6c:	893b      	ldrh	r3, [r7, #8]
 8102a6e:	b2da      	uxtb	r2, r3
 8102a70:	68fb      	ldr	r3, [r7, #12]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102a76:	69fb      	ldr	r3, [r7, #28]
 8102a78:	9300      	str	r3, [sp, #0]
 8102a7a:	69bb      	ldr	r3, [r7, #24]
 8102a7c:	2200      	movs	r2, #0
 8102a7e:	2140      	movs	r1, #64	; 0x40
 8102a80:	68f8      	ldr	r0, [r7, #12]
 8102a82:	f000 f831 	bl	8102ae8 <I2C_WaitOnFlagUntilTimeout>
 8102a86:	4603      	mov	r3, r0
 8102a88:	2b00      	cmp	r3, #0
 8102a8a:	d001      	beq.n	8102a90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102a8c:	2301      	movs	r3, #1
 8102a8e:	e000      	b.n	8102a92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102a90:	2300      	movs	r3, #0
}
 8102a92:	4618      	mov	r0, r3
 8102a94:	3710      	adds	r7, #16
 8102a96:	46bd      	mov	sp, r7
 8102a98:	bd80      	pop	{r7, pc}
 8102a9a:	bf00      	nop
 8102a9c:	80002000 	.word	0x80002000

08102aa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102aa0:	b480      	push	{r7}
 8102aa2:	b083      	sub	sp, #12
 8102aa4:	af00      	add	r7, sp, #0
 8102aa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	699b      	ldr	r3, [r3, #24]
 8102aae:	f003 0302 	and.w	r3, r3, #2
 8102ab2:	2b02      	cmp	r3, #2
 8102ab4:	d103      	bne.n	8102abe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	2200      	movs	r2, #0
 8102abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	699b      	ldr	r3, [r3, #24]
 8102ac4:	f003 0301 	and.w	r3, r3, #1
 8102ac8:	2b01      	cmp	r3, #1
 8102aca:	d007      	beq.n	8102adc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	699a      	ldr	r2, [r3, #24]
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	f042 0201 	orr.w	r2, r2, #1
 8102ada:	619a      	str	r2, [r3, #24]
  }
}
 8102adc:	bf00      	nop
 8102ade:	370c      	adds	r7, #12
 8102ae0:	46bd      	mov	sp, r7
 8102ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ae6:	4770      	bx	lr

08102ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102ae8:	b580      	push	{r7, lr}
 8102aea:	b084      	sub	sp, #16
 8102aec:	af00      	add	r7, sp, #0
 8102aee:	60f8      	str	r0, [r7, #12]
 8102af0:	60b9      	str	r1, [r7, #8]
 8102af2:	603b      	str	r3, [r7, #0]
 8102af4:	4613      	mov	r3, r2
 8102af6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102af8:	e022      	b.n	8102b40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102afa:	683b      	ldr	r3, [r7, #0]
 8102afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b00:	d01e      	beq.n	8102b40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b02:	f7ff f8c3 	bl	8101c8c <HAL_GetTick>
 8102b06:	4602      	mov	r2, r0
 8102b08:	69bb      	ldr	r3, [r7, #24]
 8102b0a:	1ad3      	subs	r3, r2, r3
 8102b0c:	683a      	ldr	r2, [r7, #0]
 8102b0e:	429a      	cmp	r2, r3
 8102b10:	d302      	bcc.n	8102b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102b12:	683b      	ldr	r3, [r7, #0]
 8102b14:	2b00      	cmp	r3, #0
 8102b16:	d113      	bne.n	8102b40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b18:	68fb      	ldr	r3, [r7, #12]
 8102b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b1c:	f043 0220 	orr.w	r2, r3, #32
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	2220      	movs	r2, #32
 8102b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	2200      	movs	r2, #0
 8102b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b34:	68fb      	ldr	r3, [r7, #12]
 8102b36:	2200      	movs	r2, #0
 8102b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102b3c:	2301      	movs	r3, #1
 8102b3e:	e00f      	b.n	8102b60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	699a      	ldr	r2, [r3, #24]
 8102b46:	68bb      	ldr	r3, [r7, #8]
 8102b48:	4013      	ands	r3, r2
 8102b4a:	68ba      	ldr	r2, [r7, #8]
 8102b4c:	429a      	cmp	r2, r3
 8102b4e:	bf0c      	ite	eq
 8102b50:	2301      	moveq	r3, #1
 8102b52:	2300      	movne	r3, #0
 8102b54:	b2db      	uxtb	r3, r3
 8102b56:	461a      	mov	r2, r3
 8102b58:	79fb      	ldrb	r3, [r7, #7]
 8102b5a:	429a      	cmp	r2, r3
 8102b5c:	d0cd      	beq.n	8102afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102b5e:	2300      	movs	r3, #0
}
 8102b60:	4618      	mov	r0, r3
 8102b62:	3710      	adds	r7, #16
 8102b64:	46bd      	mov	sp, r7
 8102b66:	bd80      	pop	{r7, pc}

08102b68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102b68:	b580      	push	{r7, lr}
 8102b6a:	b084      	sub	sp, #16
 8102b6c:	af00      	add	r7, sp, #0
 8102b6e:	60f8      	str	r0, [r7, #12]
 8102b70:	60b9      	str	r1, [r7, #8]
 8102b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102b74:	e02c      	b.n	8102bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b76:	687a      	ldr	r2, [r7, #4]
 8102b78:	68b9      	ldr	r1, [r7, #8]
 8102b7a:	68f8      	ldr	r0, [r7, #12]
 8102b7c:	f000 f870 	bl	8102c60 <I2C_IsAcknowledgeFailed>
 8102b80:	4603      	mov	r3, r0
 8102b82:	2b00      	cmp	r3, #0
 8102b84:	d001      	beq.n	8102b8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102b86:	2301      	movs	r3, #1
 8102b88:	e02a      	b.n	8102be0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102b8a:	68bb      	ldr	r3, [r7, #8]
 8102b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b90:	d01e      	beq.n	8102bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b92:	f7ff f87b 	bl	8101c8c <HAL_GetTick>
 8102b96:	4602      	mov	r2, r0
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	1ad3      	subs	r3, r2, r3
 8102b9c:	68ba      	ldr	r2, [r7, #8]
 8102b9e:	429a      	cmp	r2, r3
 8102ba0:	d302      	bcc.n	8102ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102ba2:	68bb      	ldr	r3, [r7, #8]
 8102ba4:	2b00      	cmp	r3, #0
 8102ba6:	d113      	bne.n	8102bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102bac:	f043 0220 	orr.w	r2, r3, #32
 8102bb0:	68fb      	ldr	r3, [r7, #12]
 8102bb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102bb4:	68fb      	ldr	r3, [r7, #12]
 8102bb6:	2220      	movs	r2, #32
 8102bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	2200      	movs	r2, #0
 8102bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102bc4:	68fb      	ldr	r3, [r7, #12]
 8102bc6:	2200      	movs	r2, #0
 8102bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102bcc:	2301      	movs	r3, #1
 8102bce:	e007      	b.n	8102be0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102bd0:	68fb      	ldr	r3, [r7, #12]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	699b      	ldr	r3, [r3, #24]
 8102bd6:	f003 0302 	and.w	r3, r3, #2
 8102bda:	2b02      	cmp	r3, #2
 8102bdc:	d1cb      	bne.n	8102b76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102bde:	2300      	movs	r3, #0
}
 8102be0:	4618      	mov	r0, r3
 8102be2:	3710      	adds	r7, #16
 8102be4:	46bd      	mov	sp, r7
 8102be6:	bd80      	pop	{r7, pc}

08102be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102be8:	b580      	push	{r7, lr}
 8102bea:	b084      	sub	sp, #16
 8102bec:	af00      	add	r7, sp, #0
 8102bee:	60f8      	str	r0, [r7, #12]
 8102bf0:	60b9      	str	r1, [r7, #8]
 8102bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102bf4:	e028      	b.n	8102c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102bf6:	687a      	ldr	r2, [r7, #4]
 8102bf8:	68b9      	ldr	r1, [r7, #8]
 8102bfa:	68f8      	ldr	r0, [r7, #12]
 8102bfc:	f000 f830 	bl	8102c60 <I2C_IsAcknowledgeFailed>
 8102c00:	4603      	mov	r3, r0
 8102c02:	2b00      	cmp	r3, #0
 8102c04:	d001      	beq.n	8102c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102c06:	2301      	movs	r3, #1
 8102c08:	e026      	b.n	8102c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102c0a:	f7ff f83f 	bl	8101c8c <HAL_GetTick>
 8102c0e:	4602      	mov	r2, r0
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	1ad3      	subs	r3, r2, r3
 8102c14:	68ba      	ldr	r2, [r7, #8]
 8102c16:	429a      	cmp	r2, r3
 8102c18:	d302      	bcc.n	8102c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102c1a:	68bb      	ldr	r3, [r7, #8]
 8102c1c:	2b00      	cmp	r3, #0
 8102c1e:	d113      	bne.n	8102c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c24:	f043 0220 	orr.w	r2, r3, #32
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102c2c:	68fb      	ldr	r3, [r7, #12]
 8102c2e:	2220      	movs	r2, #32
 8102c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	2200      	movs	r2, #0
 8102c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102c3c:	68fb      	ldr	r3, [r7, #12]
 8102c3e:	2200      	movs	r2, #0
 8102c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102c44:	2301      	movs	r3, #1
 8102c46:	e007      	b.n	8102c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c48:	68fb      	ldr	r3, [r7, #12]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	699b      	ldr	r3, [r3, #24]
 8102c4e:	f003 0320 	and.w	r3, r3, #32
 8102c52:	2b20      	cmp	r3, #32
 8102c54:	d1cf      	bne.n	8102bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102c56:	2300      	movs	r3, #0
}
 8102c58:	4618      	mov	r0, r3
 8102c5a:	3710      	adds	r7, #16
 8102c5c:	46bd      	mov	sp, r7
 8102c5e:	bd80      	pop	{r7, pc}

08102c60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102c60:	b580      	push	{r7, lr}
 8102c62:	b084      	sub	sp, #16
 8102c64:	af00      	add	r7, sp, #0
 8102c66:	60f8      	str	r0, [r7, #12]
 8102c68:	60b9      	str	r1, [r7, #8]
 8102c6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	699b      	ldr	r3, [r3, #24]
 8102c72:	f003 0310 	and.w	r3, r3, #16
 8102c76:	2b10      	cmp	r3, #16
 8102c78:	d151      	bne.n	8102d1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c7a:	e022      	b.n	8102cc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102c7c:	68bb      	ldr	r3, [r7, #8]
 8102c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c82:	d01e      	beq.n	8102cc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102c84:	f7ff f802 	bl	8101c8c <HAL_GetTick>
 8102c88:	4602      	mov	r2, r0
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	1ad3      	subs	r3, r2, r3
 8102c8e:	68ba      	ldr	r2, [r7, #8]
 8102c90:	429a      	cmp	r2, r3
 8102c92:	d302      	bcc.n	8102c9a <I2C_IsAcknowledgeFailed+0x3a>
 8102c94:	68bb      	ldr	r3, [r7, #8]
 8102c96:	2b00      	cmp	r3, #0
 8102c98:	d113      	bne.n	8102cc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c9e:	f043 0220 	orr.w	r2, r3, #32
 8102ca2:	68fb      	ldr	r3, [r7, #12]
 8102ca4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102ca6:	68fb      	ldr	r3, [r7, #12]
 8102ca8:	2220      	movs	r2, #32
 8102caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102cae:	68fb      	ldr	r3, [r7, #12]
 8102cb0:	2200      	movs	r2, #0
 8102cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102cb6:	68fb      	ldr	r3, [r7, #12]
 8102cb8:	2200      	movs	r2, #0
 8102cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102cbe:	2301      	movs	r3, #1
 8102cc0:	e02e      	b.n	8102d20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102cc2:	68fb      	ldr	r3, [r7, #12]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	699b      	ldr	r3, [r3, #24]
 8102cc8:	f003 0320 	and.w	r3, r3, #32
 8102ccc:	2b20      	cmp	r3, #32
 8102cce:	d1d5      	bne.n	8102c7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	2210      	movs	r2, #16
 8102cd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	2220      	movs	r2, #32
 8102cde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102ce0:	68f8      	ldr	r0, [r7, #12]
 8102ce2:	f7ff fedd 	bl	8102aa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102ce6:	68fb      	ldr	r3, [r7, #12]
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	6859      	ldr	r1, [r3, #4]
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681a      	ldr	r2, [r3, #0]
 8102cf0:	4b0d      	ldr	r3, [pc, #52]	; (8102d28 <I2C_IsAcknowledgeFailed+0xc8>)
 8102cf2:	400b      	ands	r3, r1
 8102cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cfa:	f043 0204 	orr.w	r2, r3, #4
 8102cfe:	68fb      	ldr	r3, [r7, #12]
 8102d00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102d02:	68fb      	ldr	r3, [r7, #12]
 8102d04:	2220      	movs	r2, #32
 8102d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	2200      	movs	r2, #0
 8102d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	2200      	movs	r2, #0
 8102d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102d1a:	2301      	movs	r3, #1
 8102d1c:	e000      	b.n	8102d20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102d1e:	2300      	movs	r3, #0
}
 8102d20:	4618      	mov	r0, r3
 8102d22:	3710      	adds	r7, #16
 8102d24:	46bd      	mov	sp, r7
 8102d26:	bd80      	pop	{r7, pc}
 8102d28:	fe00e800 	.word	0xfe00e800

08102d2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102d2c:	b480      	push	{r7}
 8102d2e:	b085      	sub	sp, #20
 8102d30:	af00      	add	r7, sp, #0
 8102d32:	60f8      	str	r0, [r7, #12]
 8102d34:	607b      	str	r3, [r7, #4]
 8102d36:	460b      	mov	r3, r1
 8102d38:	817b      	strh	r3, [r7, #10]
 8102d3a:	4613      	mov	r3, r2
 8102d3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	685a      	ldr	r2, [r3, #4]
 8102d44:	69bb      	ldr	r3, [r7, #24]
 8102d46:	0d5b      	lsrs	r3, r3, #21
 8102d48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102d4c:	4b0d      	ldr	r3, [pc, #52]	; (8102d84 <I2C_TransferConfig+0x58>)
 8102d4e:	430b      	orrs	r3, r1
 8102d50:	43db      	mvns	r3, r3
 8102d52:	ea02 0103 	and.w	r1, r2, r3
 8102d56:	897b      	ldrh	r3, [r7, #10]
 8102d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8102d5c:	7a7b      	ldrb	r3, [r7, #9]
 8102d5e:	041b      	lsls	r3, r3, #16
 8102d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8102d64:	431a      	orrs	r2, r3
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	431a      	orrs	r2, r3
 8102d6a:	69bb      	ldr	r3, [r7, #24]
 8102d6c:	431a      	orrs	r2, r3
 8102d6e:	68fb      	ldr	r3, [r7, #12]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	430a      	orrs	r2, r1
 8102d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102d76:	bf00      	nop
 8102d78:	3714      	adds	r7, #20
 8102d7a:	46bd      	mov	sp, r7
 8102d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d80:	4770      	bx	lr
 8102d82:	bf00      	nop
 8102d84:	03ff63ff 	.word	0x03ff63ff

08102d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102d88:	b480      	push	{r7}
 8102d8a:	b083      	sub	sp, #12
 8102d8c:	af00      	add	r7, sp, #0
 8102d8e:	6078      	str	r0, [r7, #4]
 8102d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102d98:	b2db      	uxtb	r3, r3
 8102d9a:	2b20      	cmp	r3, #32
 8102d9c:	d138      	bne.n	8102e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102da4:	2b01      	cmp	r3, #1
 8102da6:	d101      	bne.n	8102dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102da8:	2302      	movs	r3, #2
 8102daa:	e032      	b.n	8102e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	2201      	movs	r2, #1
 8102db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	2224      	movs	r2, #36	; 0x24
 8102db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	681a      	ldr	r2, [r3, #0]
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	f022 0201 	bic.w	r2, r2, #1
 8102dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	681a      	ldr	r2, [r3, #0]
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	6819      	ldr	r1, [r3, #0]
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	683a      	ldr	r2, [r7, #0]
 8102de8:	430a      	orrs	r2, r1
 8102dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	681a      	ldr	r2, [r3, #0]
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	f042 0201 	orr.w	r2, r2, #1
 8102dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	2220      	movs	r2, #32
 8102e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	2200      	movs	r2, #0
 8102e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102e0c:	2300      	movs	r3, #0
 8102e0e:	e000      	b.n	8102e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102e10:	2302      	movs	r3, #2
  }
}
 8102e12:	4618      	mov	r0, r3
 8102e14:	370c      	adds	r7, #12
 8102e16:	46bd      	mov	sp, r7
 8102e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e1c:	4770      	bx	lr

08102e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102e1e:	b480      	push	{r7}
 8102e20:	b085      	sub	sp, #20
 8102e22:	af00      	add	r7, sp, #0
 8102e24:	6078      	str	r0, [r7, #4]
 8102e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102e2e:	b2db      	uxtb	r3, r3
 8102e30:	2b20      	cmp	r3, #32
 8102e32:	d139      	bne.n	8102ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102e3a:	2b01      	cmp	r3, #1
 8102e3c:	d101      	bne.n	8102e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102e3e:	2302      	movs	r3, #2
 8102e40:	e033      	b.n	8102eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	2201      	movs	r2, #1
 8102e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	2224      	movs	r2, #36	; 0x24
 8102e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	681a      	ldr	r2, [r3, #0]
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	f022 0201 	bic.w	r2, r2, #1
 8102e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102e72:	683b      	ldr	r3, [r7, #0]
 8102e74:	021b      	lsls	r3, r3, #8
 8102e76:	68fa      	ldr	r2, [r7, #12]
 8102e78:	4313      	orrs	r3, r2
 8102e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	68fa      	ldr	r2, [r7, #12]
 8102e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	681a      	ldr	r2, [r3, #0]
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	f042 0201 	orr.w	r2, r2, #1
 8102e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	2220      	movs	r2, #32
 8102e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	2200      	movs	r2, #0
 8102ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102ea4:	2300      	movs	r3, #0
 8102ea6:	e000      	b.n	8102eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102ea8:	2302      	movs	r3, #2
  }
}
 8102eaa:	4618      	mov	r0, r3
 8102eac:	3714      	adds	r7, #20
 8102eae:	46bd      	mov	sp, r7
 8102eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb4:	4770      	bx	lr
	...

08102eb8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102eb8:	b580      	push	{r7, lr}
 8102eba:	b084      	sub	sp, #16
 8102ebc:	af00      	add	r7, sp, #0
 8102ebe:	60f8      	str	r0, [r7, #12]
 8102ec0:	460b      	mov	r3, r1
 8102ec2:	607a      	str	r2, [r7, #4]
 8102ec4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102ec6:	4b37      	ldr	r3, [pc, #220]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	f023 0201 	bic.w	r2, r3, #1
 8102ece:	4935      	ldr	r1, [pc, #212]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ed0:	68fb      	ldr	r3, [r7, #12]
 8102ed2:	4313      	orrs	r3, r2
 8102ed4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	d123      	bne.n	8102f24 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102edc:	f7ff f842 	bl	8101f64 <HAL_GetCurrentCPUID>
 8102ee0:	4603      	mov	r3, r0
 8102ee2:	2b03      	cmp	r3, #3
 8102ee4:	d158      	bne.n	8102f98 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102ee6:	4b2f      	ldr	r3, [pc, #188]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102ee8:	691b      	ldr	r3, [r3, #16]
 8102eea:	4a2e      	ldr	r2, [pc, #184]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102eec:	f023 0301 	bic.w	r3, r3, #1
 8102ef0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ef2:	4b2d      	ldr	r3, [pc, #180]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ef4:	691b      	ldr	r3, [r3, #16]
 8102ef6:	4a2c      	ldr	r2, [pc, #176]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102ef8:	f043 0304 	orr.w	r3, r3, #4
 8102efc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102efe:	f3bf 8f4f 	dsb	sy
}
 8102f02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f04:	f3bf 8f6f 	isb	sy
}
 8102f08:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f0a:	7afb      	ldrb	r3, [r7, #11]
 8102f0c:	2b01      	cmp	r3, #1
 8102f0e:	d101      	bne.n	8102f14 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f10:	bf30      	wfi
 8102f12:	e000      	b.n	8102f16 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f14:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f16:	4b24      	ldr	r3, [pc, #144]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f18:	691b      	ldr	r3, [r3, #16]
 8102f1a:	4a23      	ldr	r2, [pc, #140]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f1c:	f023 0304 	bic.w	r3, r3, #4
 8102f20:	6113      	str	r3, [r2, #16]
 8102f22:	e03c      	b.n	8102f9e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	2b01      	cmp	r3, #1
 8102f28:	d123      	bne.n	8102f72 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102f2a:	f7ff f81b 	bl	8101f64 <HAL_GetCurrentCPUID>
 8102f2e:	4603      	mov	r3, r0
 8102f30:	2b01      	cmp	r3, #1
 8102f32:	d133      	bne.n	8102f9c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102f34:	4b1b      	ldr	r3, [pc, #108]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f36:	695b      	ldr	r3, [r3, #20]
 8102f38:	4a1a      	ldr	r2, [pc, #104]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f3a:	f023 0302 	bic.w	r3, r3, #2
 8102f3e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f40:	4b19      	ldr	r3, [pc, #100]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f42:	691b      	ldr	r3, [r3, #16]
 8102f44:	4a18      	ldr	r2, [pc, #96]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f46:	f043 0304 	orr.w	r3, r3, #4
 8102f4a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102f4c:	f3bf 8f4f 	dsb	sy
}
 8102f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f52:	f3bf 8f6f 	isb	sy
}
 8102f56:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f58:	7afb      	ldrb	r3, [r7, #11]
 8102f5a:	2b01      	cmp	r3, #1
 8102f5c:	d101      	bne.n	8102f62 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f5e:	bf30      	wfi
 8102f60:	e000      	b.n	8102f64 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f62:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f64:	4b10      	ldr	r3, [pc, #64]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f66:	691b      	ldr	r3, [r3, #16]
 8102f68:	4a0f      	ldr	r2, [pc, #60]	; (8102fa8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f6a:	f023 0304 	bic.w	r3, r3, #4
 8102f6e:	6113      	str	r3, [r2, #16]
 8102f70:	e015      	b.n	8102f9e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102f72:	f7fe fff7 	bl	8101f64 <HAL_GetCurrentCPUID>
 8102f76:	4603      	mov	r3, r0
 8102f78:	2b03      	cmp	r3, #3
 8102f7a:	d106      	bne.n	8102f8a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102f7c:	4b09      	ldr	r3, [pc, #36]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f7e:	691b      	ldr	r3, [r3, #16]
 8102f80:	4a08      	ldr	r2, [pc, #32]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f82:	f023 0304 	bic.w	r3, r3, #4
 8102f86:	6113      	str	r3, [r2, #16]
 8102f88:	e009      	b.n	8102f9e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102f8a:	4b06      	ldr	r3, [pc, #24]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f8c:	695b      	ldr	r3, [r3, #20]
 8102f8e:	4a05      	ldr	r2, [pc, #20]	; (8102fa4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f90:	f023 0304 	bic.w	r3, r3, #4
 8102f94:	6153      	str	r3, [r2, #20]
 8102f96:	e002      	b.n	8102f9e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102f98:	bf00      	nop
 8102f9a:	e000      	b.n	8102f9e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102f9c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102f9e:	3710      	adds	r7, #16
 8102fa0:	46bd      	mov	sp, r7
 8102fa2:	bd80      	pop	{r7, pc}
 8102fa4:	58024800 	.word	0x58024800
 8102fa8:	e000ed00 	.word	0xe000ed00

08102fac <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102fac:	b580      	push	{r7, lr}
 8102fae:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102fb0:	f7fe ffd8 	bl	8101f64 <HAL_GetCurrentCPUID>
 8102fb4:	4603      	mov	r3, r0
 8102fb6:	2b03      	cmp	r3, #3
 8102fb8:	d101      	bne.n	8102fbe <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102fba:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102fbc:	e001      	b.n	8102fc2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102fbe:	bf40      	sev
    __WFE ();
 8102fc0:	bf20      	wfe
}
 8102fc2:	bf00      	nop
 8102fc4:	bd80      	pop	{r7, pc}
	...

08102fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102fc8:	b480      	push	{r7}
 8102fca:	b089      	sub	sp, #36	; 0x24
 8102fcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102fce:	4bb3      	ldr	r3, [pc, #716]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fd0:	691b      	ldr	r3, [r3, #16]
 8102fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102fd6:	2b18      	cmp	r3, #24
 8102fd8:	f200 8155 	bhi.w	8103286 <HAL_RCC_GetSysClockFreq+0x2be>
 8102fdc:	a201      	add	r2, pc, #4	; (adr r2, 8102fe4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102fe2:	bf00      	nop
 8102fe4:	08103049 	.word	0x08103049
 8102fe8:	08103287 	.word	0x08103287
 8102fec:	08103287 	.word	0x08103287
 8102ff0:	08103287 	.word	0x08103287
 8102ff4:	08103287 	.word	0x08103287
 8102ff8:	08103287 	.word	0x08103287
 8102ffc:	08103287 	.word	0x08103287
 8103000:	08103287 	.word	0x08103287
 8103004:	0810306f 	.word	0x0810306f
 8103008:	08103287 	.word	0x08103287
 810300c:	08103287 	.word	0x08103287
 8103010:	08103287 	.word	0x08103287
 8103014:	08103287 	.word	0x08103287
 8103018:	08103287 	.word	0x08103287
 810301c:	08103287 	.word	0x08103287
 8103020:	08103287 	.word	0x08103287
 8103024:	08103075 	.word	0x08103075
 8103028:	08103287 	.word	0x08103287
 810302c:	08103287 	.word	0x08103287
 8103030:	08103287 	.word	0x08103287
 8103034:	08103287 	.word	0x08103287
 8103038:	08103287 	.word	0x08103287
 810303c:	08103287 	.word	0x08103287
 8103040:	08103287 	.word	0x08103287
 8103044:	0810307b 	.word	0x0810307b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103048:	4b94      	ldr	r3, [pc, #592]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	f003 0320 	and.w	r3, r3, #32
 8103050:	2b00      	cmp	r3, #0
 8103052:	d009      	beq.n	8103068 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103054:	4b91      	ldr	r3, [pc, #580]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	08db      	lsrs	r3, r3, #3
 810305a:	f003 0303 	and.w	r3, r3, #3
 810305e:	4a90      	ldr	r2, [pc, #576]	; (81032a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103060:	fa22 f303 	lsr.w	r3, r2, r3
 8103064:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103066:	e111      	b.n	810328c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103068:	4b8d      	ldr	r3, [pc, #564]	; (81032a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810306a:	61bb      	str	r3, [r7, #24]
    break;
 810306c:	e10e      	b.n	810328c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810306e:	4b8d      	ldr	r3, [pc, #564]	; (81032a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103070:	61bb      	str	r3, [r7, #24]
    break;
 8103072:	e10b      	b.n	810328c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103074:	4b8c      	ldr	r3, [pc, #560]	; (81032a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103076:	61bb      	str	r3, [r7, #24]
    break;
 8103078:	e108      	b.n	810328c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810307a:	4b88      	ldr	r3, [pc, #544]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810307e:	f003 0303 	and.w	r3, r3, #3
 8103082:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103084:	4b85      	ldr	r3, [pc, #532]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103088:	091b      	lsrs	r3, r3, #4
 810308a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810308e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103090:	4b82      	ldr	r3, [pc, #520]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103094:	f003 0301 	and.w	r3, r3, #1
 8103098:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810309a:	4b80      	ldr	r3, [pc, #512]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810309e:	08db      	lsrs	r3, r3, #3
 81030a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81030a4:	68fa      	ldr	r2, [r7, #12]
 81030a6:	fb02 f303 	mul.w	r3, r2, r3
 81030aa:	ee07 3a90 	vmov	s15, r3
 81030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81030b6:	693b      	ldr	r3, [r7, #16]
 81030b8:	2b00      	cmp	r3, #0
 81030ba:	f000 80e1 	beq.w	8103280 <HAL_RCC_GetSysClockFreq+0x2b8>
 81030be:	697b      	ldr	r3, [r7, #20]
 81030c0:	2b02      	cmp	r3, #2
 81030c2:	f000 8083 	beq.w	81031cc <HAL_RCC_GetSysClockFreq+0x204>
 81030c6:	697b      	ldr	r3, [r7, #20]
 81030c8:	2b02      	cmp	r3, #2
 81030ca:	f200 80a1 	bhi.w	8103210 <HAL_RCC_GetSysClockFreq+0x248>
 81030ce:	697b      	ldr	r3, [r7, #20]
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d003      	beq.n	81030dc <HAL_RCC_GetSysClockFreq+0x114>
 81030d4:	697b      	ldr	r3, [r7, #20]
 81030d6:	2b01      	cmp	r3, #1
 81030d8:	d056      	beq.n	8103188 <HAL_RCC_GetSysClockFreq+0x1c0>
 81030da:	e099      	b.n	8103210 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81030dc:	4b6f      	ldr	r3, [pc, #444]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	f003 0320 	and.w	r3, r3, #32
 81030e4:	2b00      	cmp	r3, #0
 81030e6:	d02d      	beq.n	8103144 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81030e8:	4b6c      	ldr	r3, [pc, #432]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	08db      	lsrs	r3, r3, #3
 81030ee:	f003 0303 	and.w	r3, r3, #3
 81030f2:	4a6b      	ldr	r2, [pc, #428]	; (81032a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030f4:	fa22 f303 	lsr.w	r3, r2, r3
 81030f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	ee07 3a90 	vmov	s15, r3
 8103100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103104:	693b      	ldr	r3, [r7, #16]
 8103106:	ee07 3a90 	vmov	s15, r3
 810310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103112:	4b62      	ldr	r3, [pc, #392]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810311a:	ee07 3a90 	vmov	s15, r3
 810311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103122:	ed97 6a02 	vldr	s12, [r7, #8]
 8103126:	eddf 5a61 	vldr	s11, [pc, #388]	; 81032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810313e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103142:	e087      	b.n	8103254 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103144:	693b      	ldr	r3, [r7, #16]
 8103146:	ee07 3a90 	vmov	s15, r3
 810314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810314e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81032b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103156:	4b51      	ldr	r3, [pc, #324]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810315e:	ee07 3a90 	vmov	s15, r3
 8103162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103166:	ed97 6a02 	vldr	s12, [r7, #8]
 810316a:	eddf 5a50 	vldr	s11, [pc, #320]	; 81032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103186:	e065      	b.n	8103254 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103188:	693b      	ldr	r3, [r7, #16]
 810318a:	ee07 3a90 	vmov	s15, r3
 810318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103192:	eddf 6a48 	vldr	s13, [pc, #288]	; 81032b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810319a:	4b40      	ldr	r3, [pc, #256]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031a2:	ee07 3a90 	vmov	s15, r3
 81031a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81031ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 81031b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81031ca:	e043      	b.n	8103254 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81031cc:	693b      	ldr	r3, [r7, #16]
 81031ce:	ee07 3a90 	vmov	s15, r3
 81031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 81032b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81031da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031de:	4b2f      	ldr	r3, [pc, #188]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031e6:	ee07 3a90 	vmov	s15, r3
 81031ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81031f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 81031f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103206:	ee67 7a27 	vmul.f32	s15, s14, s15
 810320a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810320e:	e021      	b.n	8103254 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103210:	693b      	ldr	r3, [r7, #16]
 8103212:	ee07 3a90 	vmov	s15, r3
 8103216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810321a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81032b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810321e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103222:	4b1e      	ldr	r3, [pc, #120]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810322a:	ee07 3a90 	vmov	s15, r3
 810322e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103232:	ed97 6a02 	vldr	s12, [r7, #8]
 8103236:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81032ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810323a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810323e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810324e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103252:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103254:	4b11      	ldr	r3, [pc, #68]	; (810329c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103258:	0a5b      	lsrs	r3, r3, #9
 810325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810325e:	3301      	adds	r3, #1
 8103260:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103262:	683b      	ldr	r3, [r7, #0]
 8103264:	ee07 3a90 	vmov	s15, r3
 8103268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810326c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103278:	ee17 3a90 	vmov	r3, s15
 810327c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810327e:	e005      	b.n	810328c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103280:	2300      	movs	r3, #0
 8103282:	61bb      	str	r3, [r7, #24]
    break;
 8103284:	e002      	b.n	810328c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103286:	4b07      	ldr	r3, [pc, #28]	; (81032a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103288:	61bb      	str	r3, [r7, #24]
    break;
 810328a:	bf00      	nop
  }

  return sysclockfreq;
 810328c:	69bb      	ldr	r3, [r7, #24]
}
 810328e:	4618      	mov	r0, r3
 8103290:	3724      	adds	r7, #36	; 0x24
 8103292:	46bd      	mov	sp, r7
 8103294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103298:	4770      	bx	lr
 810329a:	bf00      	nop
 810329c:	58024400 	.word	0x58024400
 81032a0:	03d09000 	.word	0x03d09000
 81032a4:	003d0900 	.word	0x003d0900
 81032a8:	007a1200 	.word	0x007a1200
 81032ac:	46000000 	.word	0x46000000
 81032b0:	4c742400 	.word	0x4c742400
 81032b4:	4a742400 	.word	0x4a742400
 81032b8:	4af42400 	.word	0x4af42400

081032bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81032bc:	b580      	push	{r7, lr}
 81032be:	b086      	sub	sp, #24
 81032c0:	af00      	add	r7, sp, #0
 81032c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81032c4:	2300      	movs	r3, #0
 81032c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81032c8:	2300      	movs	r3, #0
 81032ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81032d4:	2b00      	cmp	r3, #0
 81032d6:	d03f      	beq.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81032dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81032e0:	d02a      	beq.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81032e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81032e6:	d824      	bhi.n	8103332 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81032e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81032ec:	d018      	beq.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81032ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81032f2:	d81e      	bhi.n	8103332 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d003      	beq.n	8103300 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81032f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81032fc:	d007      	beq.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x52>
 81032fe:	e018      	b.n	8103332 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103300:	4bab      	ldr	r3, [pc, #684]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103304:	4aaa      	ldr	r2, [pc, #680]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810330a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810330c:	e015      	b.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	3304      	adds	r3, #4
 8103312:	2102      	movs	r1, #2
 8103314:	4618      	mov	r0, r3
 8103316:	f000 ff11 	bl	810413c <RCCEx_PLL2_Config>
 810331a:	4603      	mov	r3, r0
 810331c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810331e:	e00c      	b.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	3324      	adds	r3, #36	; 0x24
 8103324:	2102      	movs	r1, #2
 8103326:	4618      	mov	r0, r3
 8103328:	f000 ffba 	bl	81042a0 <RCCEx_PLL3_Config>
 810332c:	4603      	mov	r3, r0
 810332e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103330:	e003      	b.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103332:	2301      	movs	r3, #1
 8103334:	75fb      	strb	r3, [r7, #23]
      break;
 8103336:	e000      	b.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103338:	bf00      	nop
    }

    if(ret == HAL_OK)
 810333a:	7dfb      	ldrb	r3, [r7, #23]
 810333c:	2b00      	cmp	r3, #0
 810333e:	d109      	bne.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103340:	4b9b      	ldr	r3, [pc, #620]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810334c:	4998      	ldr	r1, [pc, #608]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810334e:	4313      	orrs	r3, r2
 8103350:	650b      	str	r3, [r1, #80]	; 0x50
 8103352:	e001      	b.n	8103358 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103354:	7dfb      	ldrb	r3, [r7, #23]
 8103356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103360:	2b00      	cmp	r3, #0
 8103362:	d03d      	beq.n	81033e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103368:	2b04      	cmp	r3, #4
 810336a:	d826      	bhi.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 810336c:	a201      	add	r2, pc, #4	; (adr r2, 8103374 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103372:	bf00      	nop
 8103374:	08103389 	.word	0x08103389
 8103378:	08103397 	.word	0x08103397
 810337c:	081033a9 	.word	0x081033a9
 8103380:	081033c1 	.word	0x081033c1
 8103384:	081033c1 	.word	0x081033c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103388:	4b89      	ldr	r3, [pc, #548]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810338c:	4a88      	ldr	r2, [pc, #544]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103394:	e015      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	3304      	adds	r3, #4
 810339a:	2100      	movs	r1, #0
 810339c:	4618      	mov	r0, r3
 810339e:	f000 fecd 	bl	810413c <RCCEx_PLL2_Config>
 81033a2:	4603      	mov	r3, r0
 81033a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81033a6:	e00c      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	3324      	adds	r3, #36	; 0x24
 81033ac:	2100      	movs	r1, #0
 81033ae:	4618      	mov	r0, r3
 81033b0:	f000 ff76 	bl	81042a0 <RCCEx_PLL3_Config>
 81033b4:	4603      	mov	r3, r0
 81033b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81033b8:	e003      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033ba:	2301      	movs	r3, #1
 81033bc:	75fb      	strb	r3, [r7, #23]
      break;
 81033be:	e000      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81033c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033c2:	7dfb      	ldrb	r3, [r7, #23]
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d109      	bne.n	81033dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81033c8:	4b79      	ldr	r3, [pc, #484]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033cc:	f023 0207 	bic.w	r2, r3, #7
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033d4:	4976      	ldr	r1, [pc, #472]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81033d6:	4313      	orrs	r3, r2
 81033d8:	650b      	str	r3, [r1, #80]	; 0x50
 81033da:	e001      	b.n	81033e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033dc:	7dfb      	ldrb	r3, [r7, #23]
 81033de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81033e8:	2b00      	cmp	r3, #0
 81033ea:	d042      	beq.n	8103472 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81033f4:	d02b      	beq.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x192>
 81033f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81033fa:	d825      	bhi.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81033fc:	2bc0      	cmp	r3, #192	; 0xc0
 81033fe:	d028      	beq.n	8103452 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103400:	2bc0      	cmp	r3, #192	; 0xc0
 8103402:	d821      	bhi.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103404:	2b80      	cmp	r3, #128	; 0x80
 8103406:	d016      	beq.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103408:	2b80      	cmp	r3, #128	; 0x80
 810340a:	d81d      	bhi.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810340c:	2b00      	cmp	r3, #0
 810340e:	d002      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103410:	2b40      	cmp	r3, #64	; 0x40
 8103412:	d007      	beq.n	8103424 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103414:	e018      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103416:	4b66      	ldr	r3, [pc, #408]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810341a:	4a65      	ldr	r2, [pc, #404]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810341c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103420:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103422:	e017      	b.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	3304      	adds	r3, #4
 8103428:	2100      	movs	r1, #0
 810342a:	4618      	mov	r0, r3
 810342c:	f000 fe86 	bl	810413c <RCCEx_PLL2_Config>
 8103430:	4603      	mov	r3, r0
 8103432:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103434:	e00e      	b.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	3324      	adds	r3, #36	; 0x24
 810343a:	2100      	movs	r1, #0
 810343c:	4618      	mov	r0, r3
 810343e:	f000 ff2f 	bl	81042a0 <RCCEx_PLL3_Config>
 8103442:	4603      	mov	r3, r0
 8103444:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103446:	e005      	b.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103448:	2301      	movs	r3, #1
 810344a:	75fb      	strb	r3, [r7, #23]
      break;
 810344c:	e002      	b.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810344e:	bf00      	nop
 8103450:	e000      	b.n	8103454 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103454:	7dfb      	ldrb	r3, [r7, #23]
 8103456:	2b00      	cmp	r3, #0
 8103458:	d109      	bne.n	810346e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810345a:	4b55      	ldr	r3, [pc, #340]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810345e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103466:	4952      	ldr	r1, [pc, #328]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103468:	4313      	orrs	r3, r2
 810346a:	650b      	str	r3, [r1, #80]	; 0x50
 810346c:	e001      	b.n	8103472 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810346e:	7dfb      	ldrb	r3, [r7, #23]
 8103470:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810347a:	2b00      	cmp	r3, #0
 810347c:	d049      	beq.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103488:	d030      	beq.n	81034ec <HAL_RCCEx_PeriphCLKConfig+0x230>
 810348a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810348e:	d82a      	bhi.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103490:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103494:	d02c      	beq.n	81034f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103496:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810349a:	d824      	bhi.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810349c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81034a0:	d018      	beq.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81034a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81034a6:	d81e      	bhi.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	d003      	beq.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81034b0:	d007      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 81034b2:	e018      	b.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034b4:	4b3e      	ldr	r3, [pc, #248]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034b8:	4a3d      	ldr	r2, [pc, #244]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81034c0:	e017      	b.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	3304      	adds	r3, #4
 81034c6:	2100      	movs	r1, #0
 81034c8:	4618      	mov	r0, r3
 81034ca:	f000 fe37 	bl	810413c <RCCEx_PLL2_Config>
 81034ce:	4603      	mov	r3, r0
 81034d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81034d2:	e00e      	b.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	3324      	adds	r3, #36	; 0x24
 81034d8:	2100      	movs	r1, #0
 81034da:	4618      	mov	r0, r3
 81034dc:	f000 fee0 	bl	81042a0 <RCCEx_PLL3_Config>
 81034e0:	4603      	mov	r3, r0
 81034e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81034e4:	e005      	b.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81034e6:	2301      	movs	r3, #1
 81034e8:	75fb      	strb	r3, [r7, #23]
      break;
 81034ea:	e002      	b.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81034ec:	bf00      	nop
 81034ee:	e000      	b.n	81034f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81034f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034f2:	7dfb      	ldrb	r3, [r7, #23]
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d10a      	bne.n	810350e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81034f8:	4b2d      	ldr	r3, [pc, #180]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103506:	492a      	ldr	r1, [pc, #168]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103508:	4313      	orrs	r3, r2
 810350a:	658b      	str	r3, [r1, #88]	; 0x58
 810350c:	e001      	b.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810350e:	7dfb      	ldrb	r3, [r7, #23]
 8103510:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810351a:	2b00      	cmp	r3, #0
 810351c:	d04c      	beq.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103528:	d030      	beq.n	810358c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810352a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810352e:	d82a      	bhi.n	8103586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103530:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103534:	d02c      	beq.n	8103590 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810353a:	d824      	bhi.n	8103586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810353c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103540:	d018      	beq.n	8103574 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103546:	d81e      	bhi.n	8103586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103548:	2b00      	cmp	r3, #0
 810354a:	d003      	beq.n	8103554 <HAL_RCCEx_PeriphCLKConfig+0x298>
 810354c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103550:	d007      	beq.n	8103562 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103552:	e018      	b.n	8103586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103554:	4b16      	ldr	r3, [pc, #88]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103558:	4a15      	ldr	r2, [pc, #84]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810355e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103560:	e017      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	3304      	adds	r3, #4
 8103566:	2100      	movs	r1, #0
 8103568:	4618      	mov	r0, r3
 810356a:	f000 fde7 	bl	810413c <RCCEx_PLL2_Config>
 810356e:	4603      	mov	r3, r0
 8103570:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103572:	e00e      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	3324      	adds	r3, #36	; 0x24
 8103578:	2100      	movs	r1, #0
 810357a:	4618      	mov	r0, r3
 810357c:	f000 fe90 	bl	81042a0 <RCCEx_PLL3_Config>
 8103580:	4603      	mov	r3, r0
 8103582:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103584:	e005      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103586:	2301      	movs	r3, #1
 8103588:	75fb      	strb	r3, [r7, #23]
      break;
 810358a:	e002      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810358c:	bf00      	nop
 810358e:	e000      	b.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103592:	7dfb      	ldrb	r3, [r7, #23]
 8103594:	2b00      	cmp	r3, #0
 8103596:	d10d      	bne.n	81035b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103598:	4b05      	ldr	r3, [pc, #20]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810359c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81035a6:	4902      	ldr	r1, [pc, #8]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81035a8:	4313      	orrs	r3, r2
 81035aa:	658b      	str	r3, [r1, #88]	; 0x58
 81035ac:	e004      	b.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81035ae:	bf00      	nop
 81035b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035b4:	7dfb      	ldrb	r3, [r7, #23]
 81035b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d032      	beq.n	810362a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81035c8:	2b30      	cmp	r3, #48	; 0x30
 81035ca:	d01c      	beq.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81035cc:	2b30      	cmp	r3, #48	; 0x30
 81035ce:	d817      	bhi.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81035d0:	2b20      	cmp	r3, #32
 81035d2:	d00c      	beq.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x332>
 81035d4:	2b20      	cmp	r3, #32
 81035d6:	d813      	bhi.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81035d8:	2b00      	cmp	r3, #0
 81035da:	d016      	beq.n	810360a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81035dc:	2b10      	cmp	r3, #16
 81035de:	d10f      	bne.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035e0:	4baf      	ldr	r3, [pc, #700]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035e4:	4aae      	ldr	r2, [pc, #696]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81035ec:	e00e      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	3304      	adds	r3, #4
 81035f2:	2102      	movs	r1, #2
 81035f4:	4618      	mov	r0, r3
 81035f6:	f000 fda1 	bl	810413c <RCCEx_PLL2_Config>
 81035fa:	4603      	mov	r3, r0
 81035fc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81035fe:	e005      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103600:	2301      	movs	r3, #1
 8103602:	75fb      	strb	r3, [r7, #23]
      break;
 8103604:	e002      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103606:	bf00      	nop
 8103608:	e000      	b.n	810360c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810360a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810360c:	7dfb      	ldrb	r3, [r7, #23]
 810360e:	2b00      	cmp	r3, #0
 8103610:	d109      	bne.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103612:	4ba3      	ldr	r3, [pc, #652]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103616:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810361e:	49a0      	ldr	r1, [pc, #640]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103620:	4313      	orrs	r3, r2
 8103622:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103624:	e001      	b.n	810362a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103626:	7dfb      	ldrb	r3, [r7, #23]
 8103628:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103632:	2b00      	cmp	r3, #0
 8103634:	d047      	beq.n	81036c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810363a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810363e:	d030      	beq.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103644:	d82a      	bhi.n	810369c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810364a:	d02c      	beq.n	81036a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810364c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103650:	d824      	bhi.n	810369c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103656:	d018      	beq.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810365c:	d81e      	bhi.n	810369c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810365e:	2b00      	cmp	r3, #0
 8103660:	d003      	beq.n	810366a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103666:	d007      	beq.n	8103678 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103668:	e018      	b.n	810369c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810366a:	4b8d      	ldr	r3, [pc, #564]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810366e:	4a8c      	ldr	r2, [pc, #560]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103676:	e017      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	3304      	adds	r3, #4
 810367c:	2100      	movs	r1, #0
 810367e:	4618      	mov	r0, r3
 8103680:	f000 fd5c 	bl	810413c <RCCEx_PLL2_Config>
 8103684:	4603      	mov	r3, r0
 8103686:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103688:	e00e      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	3324      	adds	r3, #36	; 0x24
 810368e:	2100      	movs	r1, #0
 8103690:	4618      	mov	r0, r3
 8103692:	f000 fe05 	bl	81042a0 <RCCEx_PLL3_Config>
 8103696:	4603      	mov	r3, r0
 8103698:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810369a:	e005      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810369c:	2301      	movs	r3, #1
 810369e:	75fb      	strb	r3, [r7, #23]
      break;
 81036a0:	e002      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81036a2:	bf00      	nop
 81036a4:	e000      	b.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81036a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036a8:	7dfb      	ldrb	r3, [r7, #23]
 81036aa:	2b00      	cmp	r3, #0
 81036ac:	d109      	bne.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81036ae:	4b7c      	ldr	r3, [pc, #496]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036ba:	4979      	ldr	r1, [pc, #484]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036bc:	4313      	orrs	r3, r2
 81036be:	650b      	str	r3, [r1, #80]	; 0x50
 81036c0:	e001      	b.n	81036c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036c2:	7dfb      	ldrb	r3, [r7, #23]
 81036c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81036ce:	2b00      	cmp	r3, #0
 81036d0:	d049      	beq.n	8103766 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81036d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81036da:	d02e      	beq.n	810373a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81036e0:	d828      	bhi.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81036e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81036e6:	d02a      	beq.n	810373e <HAL_RCCEx_PeriphCLKConfig+0x482>
 81036e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81036ec:	d822      	bhi.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81036ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81036f2:	d026      	beq.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81036f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81036f8:	d81c      	bhi.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81036fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81036fe:	d010      	beq.n	8103722 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103704:	d816      	bhi.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103706:	2b00      	cmp	r3, #0
 8103708:	d01d      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810370e:	d111      	bne.n	8103734 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	3304      	adds	r3, #4
 8103714:	2101      	movs	r1, #1
 8103716:	4618      	mov	r0, r3
 8103718:	f000 fd10 	bl	810413c <RCCEx_PLL2_Config>
 810371c:	4603      	mov	r3, r0
 810371e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103720:	e012      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	3324      	adds	r3, #36	; 0x24
 8103726:	2101      	movs	r1, #1
 8103728:	4618      	mov	r0, r3
 810372a:	f000 fdb9 	bl	81042a0 <RCCEx_PLL3_Config>
 810372e:	4603      	mov	r3, r0
 8103730:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103732:	e009      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103734:	2301      	movs	r3, #1
 8103736:	75fb      	strb	r3, [r7, #23]
      break;
 8103738:	e006      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810373a:	bf00      	nop
 810373c:	e004      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810373e:	bf00      	nop
 8103740:	e002      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103742:	bf00      	nop
 8103744:	e000      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103748:	7dfb      	ldrb	r3, [r7, #23]
 810374a:	2b00      	cmp	r3, #0
 810374c:	d109      	bne.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810374e:	4b54      	ldr	r3, [pc, #336]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103752:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810375a:	4951      	ldr	r1, [pc, #324]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810375c:	4313      	orrs	r3, r2
 810375e:	650b      	str	r3, [r1, #80]	; 0x50
 8103760:	e001      	b.n	8103766 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103762:	7dfb      	ldrb	r3, [r7, #23]
 8103764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810376e:	2b00      	cmp	r3, #0
 8103770:	d04b      	beq.n	810380a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810377c:	d02e      	beq.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0x520>
 810377e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103782:	d828      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103788:	d02a      	beq.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810378e:	d822      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103794:	d026      	beq.n	81037e4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810379a:	d81c      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810379c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81037a0:	d010      	beq.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 81037a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81037a6:	d816      	bhi.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81037a8:	2b00      	cmp	r3, #0
 81037aa:	d01d      	beq.n	81037e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81037ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81037b0:	d111      	bne.n	81037d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	3304      	adds	r3, #4
 81037b6:	2101      	movs	r1, #1
 81037b8:	4618      	mov	r0, r3
 81037ba:	f000 fcbf 	bl	810413c <RCCEx_PLL2_Config>
 81037be:	4603      	mov	r3, r0
 81037c0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81037c2:	e012      	b.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	3324      	adds	r3, #36	; 0x24
 81037c8:	2101      	movs	r1, #1
 81037ca:	4618      	mov	r0, r3
 81037cc:	f000 fd68 	bl	81042a0 <RCCEx_PLL3_Config>
 81037d0:	4603      	mov	r3, r0
 81037d2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81037d4:	e009      	b.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81037d6:	2301      	movs	r3, #1
 81037d8:	75fb      	strb	r3, [r7, #23]
      break;
 81037da:	e006      	b.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81037dc:	bf00      	nop
 81037de:	e004      	b.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81037e0:	bf00      	nop
 81037e2:	e002      	b.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81037e4:	bf00      	nop
 81037e6:	e000      	b.n	81037ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037ea:	7dfb      	ldrb	r3, [r7, #23]
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	d10a      	bne.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81037f0:	4b2b      	ldr	r3, [pc, #172]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81037fe:	4928      	ldr	r1, [pc, #160]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103800:	4313      	orrs	r3, r2
 8103802:	658b      	str	r3, [r1, #88]	; 0x58
 8103804:	e001      	b.n	810380a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103806:	7dfb      	ldrb	r3, [r7, #23]
 8103808:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103812:	2b00      	cmp	r3, #0
 8103814:	d02f      	beq.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810381a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810381e:	d00e      	beq.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103824:	d814      	bhi.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8103826:	2b00      	cmp	r3, #0
 8103828:	d015      	beq.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810382a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810382e:	d10f      	bne.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103830:	4b1b      	ldr	r3, [pc, #108]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103834:	4a1a      	ldr	r2, [pc, #104]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810383a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810383c:	e00c      	b.n	8103858 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	3304      	adds	r3, #4
 8103842:	2101      	movs	r1, #1
 8103844:	4618      	mov	r0, r3
 8103846:	f000 fc79 	bl	810413c <RCCEx_PLL2_Config>
 810384a:	4603      	mov	r3, r0
 810384c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810384e:	e003      	b.n	8103858 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103850:	2301      	movs	r3, #1
 8103852:	75fb      	strb	r3, [r7, #23]
      break;
 8103854:	e000      	b.n	8103858 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103858:	7dfb      	ldrb	r3, [r7, #23]
 810385a:	2b00      	cmp	r3, #0
 810385c:	d109      	bne.n	8103872 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810385e:	4b10      	ldr	r3, [pc, #64]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810386a:	490d      	ldr	r1, [pc, #52]	; (81038a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810386c:	4313      	orrs	r3, r2
 810386e:	650b      	str	r3, [r1, #80]	; 0x50
 8103870:	e001      	b.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103872:	7dfb      	ldrb	r3, [r7, #23]
 8103874:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810387e:	2b00      	cmp	r3, #0
 8103880:	d033      	beq.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103886:	2b03      	cmp	r3, #3
 8103888:	d81c      	bhi.n	81038c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810388a:	a201      	add	r2, pc, #4	; (adr r2, 8103890 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103890:	081038cb 	.word	0x081038cb
 8103894:	081038a5 	.word	0x081038a5
 8103898:	081038b3 	.word	0x081038b3
 810389c:	081038cb 	.word	0x081038cb
 81038a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038a4:	4bb9      	ldr	r3, [pc, #740]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038a8:	4ab8      	ldr	r2, [pc, #736]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81038b0:	e00c      	b.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	3304      	adds	r3, #4
 81038b6:	2102      	movs	r1, #2
 81038b8:	4618      	mov	r0, r3
 81038ba:	f000 fc3f 	bl	810413c <RCCEx_PLL2_Config>
 81038be:	4603      	mov	r3, r0
 81038c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81038c2:	e003      	b.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81038c4:	2301      	movs	r3, #1
 81038c6:	75fb      	strb	r3, [r7, #23]
      break;
 81038c8:	e000      	b.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81038ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038cc:	7dfb      	ldrb	r3, [r7, #23]
 81038ce:	2b00      	cmp	r3, #0
 81038d0:	d109      	bne.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81038d2:	4bae      	ldr	r3, [pc, #696]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038d6:	f023 0203 	bic.w	r2, r3, #3
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81038de:	49ab      	ldr	r1, [pc, #684]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81038e0:	4313      	orrs	r3, r2
 81038e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81038e4:	e001      	b.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038e6:	7dfb      	ldrb	r3, [r7, #23]
 81038e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81038f2:	2b00      	cmp	r3, #0
 81038f4:	f000 8088 	beq.w	8103a08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81038f8:	4ba5      	ldr	r3, [pc, #660]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	4aa4      	ldr	r2, [pc, #656]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81038fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103904:	f7fe f9c2 	bl	8101c8c <HAL_GetTick>
 8103908:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810390a:	e009      	b.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810390c:	f7fe f9be 	bl	8101c8c <HAL_GetTick>
 8103910:	4602      	mov	r2, r0
 8103912:	693b      	ldr	r3, [r7, #16]
 8103914:	1ad3      	subs	r3, r2, r3
 8103916:	2b64      	cmp	r3, #100	; 0x64
 8103918:	d902      	bls.n	8103920 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810391a:	2303      	movs	r3, #3
 810391c:	75fb      	strb	r3, [r7, #23]
        break;
 810391e:	e005      	b.n	810392c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103920:	4b9b      	ldr	r3, [pc, #620]	; (8103b90 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103928:	2b00      	cmp	r3, #0
 810392a:	d0ef      	beq.n	810390c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810392c:	7dfb      	ldrb	r3, [r7, #23]
 810392e:	2b00      	cmp	r3, #0
 8103930:	d168      	bne.n	8103a04 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103932:	4b96      	ldr	r3, [pc, #600]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810393c:	4053      	eors	r3, r2
 810393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103942:	2b00      	cmp	r3, #0
 8103944:	d013      	beq.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103946:	4b91      	ldr	r3, [pc, #580]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810394a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810394e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103950:	4b8e      	ldr	r3, [pc, #568]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103954:	4a8d      	ldr	r2, [pc, #564]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810395a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810395c:	4b8b      	ldr	r3, [pc, #556]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103960:	4a8a      	ldr	r2, [pc, #552]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103966:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103968:	4a88      	ldr	r2, [pc, #544]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810396a:	68fb      	ldr	r3, [r7, #12]
 810396c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103978:	d115      	bne.n	81039a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810397a:	f7fe f987 	bl	8101c8c <HAL_GetTick>
 810397e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103980:	e00b      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103982:	f7fe f983 	bl	8101c8c <HAL_GetTick>
 8103986:	4602      	mov	r2, r0
 8103988:	693b      	ldr	r3, [r7, #16]
 810398a:	1ad3      	subs	r3, r2, r3
 810398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8103990:	4293      	cmp	r3, r2
 8103992:	d902      	bls.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103994:	2303      	movs	r3, #3
 8103996:	75fb      	strb	r3, [r7, #23]
            break;
 8103998:	e005      	b.n	81039a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810399a:	4b7c      	ldr	r3, [pc, #496]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810399e:	f003 0302 	and.w	r3, r3, #2
 81039a2:	2b00      	cmp	r3, #0
 81039a4:	d0ed      	beq.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81039a6:	7dfb      	ldrb	r3, [r7, #23]
 81039a8:	2b00      	cmp	r3, #0
 81039aa:	d128      	bne.n	81039fe <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81039b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81039ba:	d10f      	bne.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x720>
 81039bc:	4b73      	ldr	r3, [pc, #460]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039be:	691b      	ldr	r3, [r3, #16]
 81039c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81039ca:	091b      	lsrs	r3, r3, #4
 81039cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81039d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81039d4:	496d      	ldr	r1, [pc, #436]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039d6:	4313      	orrs	r3, r2
 81039d8:	610b      	str	r3, [r1, #16]
 81039da:	e005      	b.n	81039e8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81039dc:	4b6b      	ldr	r3, [pc, #428]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039de:	691b      	ldr	r3, [r3, #16]
 81039e0:	4a6a      	ldr	r2, [pc, #424]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81039e6:	6113      	str	r3, [r2, #16]
 81039e8:	4b68      	ldr	r3, [pc, #416]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81039f6:	4965      	ldr	r1, [pc, #404]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039f8:	4313      	orrs	r3, r2
 81039fa:	670b      	str	r3, [r1, #112]	; 0x70
 81039fc:	e004      	b.n	8103a08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81039fe:	7dfb      	ldrb	r3, [r7, #23]
 8103a00:	75bb      	strb	r3, [r7, #22]
 8103a02:	e001      	b.n	8103a08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a04:	7dfb      	ldrb	r3, [r7, #23]
 8103a06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	f003 0301 	and.w	r3, r3, #1
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d07e      	beq.n	8103b12 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103a18:	2b28      	cmp	r3, #40	; 0x28
 8103a1a:	d867      	bhi.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103a1c:	a201      	add	r2, pc, #4	; (adr r2, 8103a24 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a22:	bf00      	nop
 8103a24:	08103af3 	.word	0x08103af3
 8103a28:	08103aed 	.word	0x08103aed
 8103a2c:	08103aed 	.word	0x08103aed
 8103a30:	08103aed 	.word	0x08103aed
 8103a34:	08103aed 	.word	0x08103aed
 8103a38:	08103aed 	.word	0x08103aed
 8103a3c:	08103aed 	.word	0x08103aed
 8103a40:	08103aed 	.word	0x08103aed
 8103a44:	08103ac9 	.word	0x08103ac9
 8103a48:	08103aed 	.word	0x08103aed
 8103a4c:	08103aed 	.word	0x08103aed
 8103a50:	08103aed 	.word	0x08103aed
 8103a54:	08103aed 	.word	0x08103aed
 8103a58:	08103aed 	.word	0x08103aed
 8103a5c:	08103aed 	.word	0x08103aed
 8103a60:	08103aed 	.word	0x08103aed
 8103a64:	08103adb 	.word	0x08103adb
 8103a68:	08103aed 	.word	0x08103aed
 8103a6c:	08103aed 	.word	0x08103aed
 8103a70:	08103aed 	.word	0x08103aed
 8103a74:	08103aed 	.word	0x08103aed
 8103a78:	08103aed 	.word	0x08103aed
 8103a7c:	08103aed 	.word	0x08103aed
 8103a80:	08103aed 	.word	0x08103aed
 8103a84:	08103af3 	.word	0x08103af3
 8103a88:	08103aed 	.word	0x08103aed
 8103a8c:	08103aed 	.word	0x08103aed
 8103a90:	08103aed 	.word	0x08103aed
 8103a94:	08103aed 	.word	0x08103aed
 8103a98:	08103aed 	.word	0x08103aed
 8103a9c:	08103aed 	.word	0x08103aed
 8103aa0:	08103aed 	.word	0x08103aed
 8103aa4:	08103af3 	.word	0x08103af3
 8103aa8:	08103aed 	.word	0x08103aed
 8103aac:	08103aed 	.word	0x08103aed
 8103ab0:	08103aed 	.word	0x08103aed
 8103ab4:	08103aed 	.word	0x08103aed
 8103ab8:	08103aed 	.word	0x08103aed
 8103abc:	08103aed 	.word	0x08103aed
 8103ac0:	08103aed 	.word	0x08103aed
 8103ac4:	08103af3 	.word	0x08103af3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	3304      	adds	r3, #4
 8103acc:	2101      	movs	r1, #1
 8103ace:	4618      	mov	r0, r3
 8103ad0:	f000 fb34 	bl	810413c <RCCEx_PLL2_Config>
 8103ad4:	4603      	mov	r3, r0
 8103ad6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103ad8:	e00c      	b.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	3324      	adds	r3, #36	; 0x24
 8103ade:	2101      	movs	r1, #1
 8103ae0:	4618      	mov	r0, r3
 8103ae2:	f000 fbdd 	bl	81042a0 <RCCEx_PLL3_Config>
 8103ae6:	4603      	mov	r3, r0
 8103ae8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103aea:	e003      	b.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103aec:	2301      	movs	r3, #1
 8103aee:	75fb      	strb	r3, [r7, #23]
      break;
 8103af0:	e000      	b.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103af4:	7dfb      	ldrb	r3, [r7, #23]
 8103af6:	2b00      	cmp	r3, #0
 8103af8:	d109      	bne.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103afa:	4b24      	ldr	r3, [pc, #144]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103afe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103b06:	4921      	ldr	r1, [pc, #132]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103b08:	4313      	orrs	r3, r2
 8103b0a:	654b      	str	r3, [r1, #84]	; 0x54
 8103b0c:	e001      	b.n	8103b12 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b0e:	7dfb      	ldrb	r3, [r7, #23]
 8103b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	f003 0302 	and.w	r3, r3, #2
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	d03c      	beq.n	8103b98 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103b22:	2b05      	cmp	r3, #5
 8103b24:	d820      	bhi.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103b26:	a201      	add	r2, pc, #4	; (adr r2, 8103b2c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b2c:	08103b6f 	.word	0x08103b6f
 8103b30:	08103b45 	.word	0x08103b45
 8103b34:	08103b57 	.word	0x08103b57
 8103b38:	08103b6f 	.word	0x08103b6f
 8103b3c:	08103b6f 	.word	0x08103b6f
 8103b40:	08103b6f 	.word	0x08103b6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	3304      	adds	r3, #4
 8103b48:	2101      	movs	r1, #1
 8103b4a:	4618      	mov	r0, r3
 8103b4c:	f000 faf6 	bl	810413c <RCCEx_PLL2_Config>
 8103b50:	4603      	mov	r3, r0
 8103b52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103b54:	e00c      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	3324      	adds	r3, #36	; 0x24
 8103b5a:	2101      	movs	r1, #1
 8103b5c:	4618      	mov	r0, r3
 8103b5e:	f000 fb9f 	bl	81042a0 <RCCEx_PLL3_Config>
 8103b62:	4603      	mov	r3, r0
 8103b64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103b66:	e003      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b68:	2301      	movs	r3, #1
 8103b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8103b6c:	e000      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b70:	7dfb      	ldrb	r3, [r7, #23]
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d10e      	bne.n	8103b94 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103b76:	4b05      	ldr	r3, [pc, #20]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b7a:	f023 0207 	bic.w	r2, r3, #7
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103b82:	4902      	ldr	r1, [pc, #8]	; (8103b8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103b84:	4313      	orrs	r3, r2
 8103b86:	654b      	str	r3, [r1, #84]	; 0x54
 8103b88:	e006      	b.n	8103b98 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103b8a:	bf00      	nop
 8103b8c:	58024400 	.word	0x58024400
 8103b90:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b94:	7dfb      	ldrb	r3, [r7, #23]
 8103b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	f003 0304 	and.w	r3, r3, #4
 8103ba0:	2b00      	cmp	r3, #0
 8103ba2:	d039      	beq.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103baa:	2b05      	cmp	r3, #5
 8103bac:	d820      	bhi.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103bae:	a201      	add	r2, pc, #4	; (adr r2, 8103bb4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bb4:	08103bf7 	.word	0x08103bf7
 8103bb8:	08103bcd 	.word	0x08103bcd
 8103bbc:	08103bdf 	.word	0x08103bdf
 8103bc0:	08103bf7 	.word	0x08103bf7
 8103bc4:	08103bf7 	.word	0x08103bf7
 8103bc8:	08103bf7 	.word	0x08103bf7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	3304      	adds	r3, #4
 8103bd0:	2101      	movs	r1, #1
 8103bd2:	4618      	mov	r0, r3
 8103bd4:	f000 fab2 	bl	810413c <RCCEx_PLL2_Config>
 8103bd8:	4603      	mov	r3, r0
 8103bda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103bdc:	e00c      	b.n	8103bf8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	3324      	adds	r3, #36	; 0x24
 8103be2:	2101      	movs	r1, #1
 8103be4:	4618      	mov	r0, r3
 8103be6:	f000 fb5b 	bl	81042a0 <RCCEx_PLL3_Config>
 8103bea:	4603      	mov	r3, r0
 8103bec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103bee:	e003      	b.n	8103bf8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bf0:	2301      	movs	r3, #1
 8103bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8103bf4:	e000      	b.n	8103bf8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bf8:	7dfb      	ldrb	r3, [r7, #23]
 8103bfa:	2b00      	cmp	r3, #0
 8103bfc:	d10a      	bne.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103bfe:	4bb7      	ldr	r3, [pc, #732]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c02:	f023 0207 	bic.w	r2, r3, #7
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103c0c:	49b3      	ldr	r1, [pc, #716]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103c0e:	4313      	orrs	r3, r2
 8103c10:	658b      	str	r3, [r1, #88]	; 0x58
 8103c12:	e001      	b.n	8103c18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c14:	7dfb      	ldrb	r3, [r7, #23]
 8103c16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f003 0320 	and.w	r3, r3, #32
 8103c20:	2b00      	cmp	r3, #0
 8103c22:	d04b      	beq.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103c2e:	d02e      	beq.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103c34:	d828      	bhi.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c3a:	d02a      	beq.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c40:	d822      	bhi.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103c42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103c46:	d026      	beq.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103c48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103c4c:	d81c      	bhi.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103c52:	d010      	beq.n	8103c76 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103c58:	d816      	bhi.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103c5a:	2b00      	cmp	r3, #0
 8103c5c:	d01d      	beq.n	8103c9a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103c62:	d111      	bne.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	3304      	adds	r3, #4
 8103c68:	2100      	movs	r1, #0
 8103c6a:	4618      	mov	r0, r3
 8103c6c:	f000 fa66 	bl	810413c <RCCEx_PLL2_Config>
 8103c70:	4603      	mov	r3, r0
 8103c72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103c74:	e012      	b.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	3324      	adds	r3, #36	; 0x24
 8103c7a:	2102      	movs	r1, #2
 8103c7c:	4618      	mov	r0, r3
 8103c7e:	f000 fb0f 	bl	81042a0 <RCCEx_PLL3_Config>
 8103c82:	4603      	mov	r3, r0
 8103c84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103c86:	e009      	b.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c88:	2301      	movs	r3, #1
 8103c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8103c8c:	e006      	b.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103c8e:	bf00      	nop
 8103c90:	e004      	b.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103c92:	bf00      	nop
 8103c94:	e002      	b.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103c96:	bf00      	nop
 8103c98:	e000      	b.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c9c:	7dfb      	ldrb	r3, [r7, #23]
 8103c9e:	2b00      	cmp	r3, #0
 8103ca0:	d10a      	bne.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103ca2:	4b8e      	ldr	r3, [pc, #568]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ca6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103cb0:	498a      	ldr	r1, [pc, #552]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103cb2:	4313      	orrs	r3, r2
 8103cb4:	654b      	str	r3, [r1, #84]	; 0x54
 8103cb6:	e001      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cb8:	7dfb      	ldrb	r3, [r7, #23]
 8103cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	d04b      	beq.n	8103d60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103cce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103cd2:	d02e      	beq.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103cd4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103cd8:	d828      	bhi.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103cde:	d02a      	beq.n	8103d36 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103ce4:	d822      	bhi.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103cea:	d026      	beq.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103cec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103cf0:	d81c      	bhi.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103cf6:	d010      	beq.n	8103d1a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103cfc:	d816      	bhi.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103cfe:	2b00      	cmp	r3, #0
 8103d00:	d01d      	beq.n	8103d3e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103d06:	d111      	bne.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	3304      	adds	r3, #4
 8103d0c:	2100      	movs	r1, #0
 8103d0e:	4618      	mov	r0, r3
 8103d10:	f000 fa14 	bl	810413c <RCCEx_PLL2_Config>
 8103d14:	4603      	mov	r3, r0
 8103d16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103d18:	e012      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	3324      	adds	r3, #36	; 0x24
 8103d1e:	2102      	movs	r1, #2
 8103d20:	4618      	mov	r0, r3
 8103d22:	f000 fabd 	bl	81042a0 <RCCEx_PLL3_Config>
 8103d26:	4603      	mov	r3, r0
 8103d28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103d2a:	e009      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d2c:	2301      	movs	r3, #1
 8103d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8103d30:	e006      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103d32:	bf00      	nop
 8103d34:	e004      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103d36:	bf00      	nop
 8103d38:	e002      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103d3a:	bf00      	nop
 8103d3c:	e000      	b.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d40:	7dfb      	ldrb	r3, [r7, #23]
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d10a      	bne.n	8103d5c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103d46:	4b65      	ldr	r3, [pc, #404]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103d54:	4961      	ldr	r1, [pc, #388]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d56:	4313      	orrs	r3, r2
 8103d58:	658b      	str	r3, [r1, #88]	; 0x58
 8103d5a:	e001      	b.n	8103d60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d5c:	7dfb      	ldrb	r3, [r7, #23]
 8103d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103d68:	2b00      	cmp	r3, #0
 8103d6a:	d04b      	beq.n	8103e04 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103d72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103d76:	d02e      	beq.n	8103dd6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103d78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103d7c:	d828      	bhi.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103d82:	d02a      	beq.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103d88:	d822      	bhi.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103d8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103d8e:	d026      	beq.n	8103dde <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103d90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103d94:	d81c      	bhi.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d9a:	d010      	beq.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103da0:	d816      	bhi.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103da2:	2b00      	cmp	r3, #0
 8103da4:	d01d      	beq.n	8103de2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103daa:	d111      	bne.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	3304      	adds	r3, #4
 8103db0:	2100      	movs	r1, #0
 8103db2:	4618      	mov	r0, r3
 8103db4:	f000 f9c2 	bl	810413c <RCCEx_PLL2_Config>
 8103db8:	4603      	mov	r3, r0
 8103dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103dbc:	e012      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	3324      	adds	r3, #36	; 0x24
 8103dc2:	2102      	movs	r1, #2
 8103dc4:	4618      	mov	r0, r3
 8103dc6:	f000 fa6b 	bl	81042a0 <RCCEx_PLL3_Config>
 8103dca:	4603      	mov	r3, r0
 8103dcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103dce:	e009      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dd0:	2301      	movs	r3, #1
 8103dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8103dd4:	e006      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103dd6:	bf00      	nop
 8103dd8:	e004      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103dda:	bf00      	nop
 8103ddc:	e002      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103dde:	bf00      	nop
 8103de0:	e000      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103de4:	7dfb      	ldrb	r3, [r7, #23]
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d10a      	bne.n	8103e00 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103dea:	4b3c      	ldr	r3, [pc, #240]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103df8:	4938      	ldr	r1, [pc, #224]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dfa:	4313      	orrs	r3, r2
 8103dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8103dfe:	e001      	b.n	8103e04 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e00:	7dfb      	ldrb	r3, [r7, #23]
 8103e02:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	f003 0308 	and.w	r3, r3, #8
 8103e0c:	2b00      	cmp	r3, #0
 8103e0e:	d01a      	beq.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103e1a:	d10a      	bne.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	3324      	adds	r3, #36	; 0x24
 8103e20:	2102      	movs	r1, #2
 8103e22:	4618      	mov	r0, r3
 8103e24:	f000 fa3c 	bl	81042a0 <RCCEx_PLL3_Config>
 8103e28:	4603      	mov	r3, r0
 8103e2a:	2b00      	cmp	r3, #0
 8103e2c:	d001      	beq.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103e2e:	2301      	movs	r3, #1
 8103e30:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103e32:	4b2a      	ldr	r3, [pc, #168]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103e40:	4926      	ldr	r1, [pc, #152]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e42:	4313      	orrs	r3, r2
 8103e44:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	f003 0310 	and.w	r3, r3, #16
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	d01a      	beq.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103e5c:	d10a      	bne.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	3324      	adds	r3, #36	; 0x24
 8103e62:	2102      	movs	r1, #2
 8103e64:	4618      	mov	r0, r3
 8103e66:	f000 fa1b 	bl	81042a0 <RCCEx_PLL3_Config>
 8103e6a:	4603      	mov	r3, r0
 8103e6c:	2b00      	cmp	r3, #0
 8103e6e:	d001      	beq.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103e70:	2301      	movs	r3, #1
 8103e72:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103e74:	4b19      	ldr	r3, [pc, #100]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103e82:	4916      	ldr	r1, [pc, #88]	; (8103edc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e84:	4313      	orrs	r3, r2
 8103e86:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d036      	beq.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e9e:	d01f      	beq.n	8103ee0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103ea4:	d817      	bhi.n	8103ed6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103ea6:	2b00      	cmp	r3, #0
 8103ea8:	d003      	beq.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103eae:	d009      	beq.n	8103ec4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103eb0:	e011      	b.n	8103ed6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	3304      	adds	r3, #4
 8103eb6:	2100      	movs	r1, #0
 8103eb8:	4618      	mov	r0, r3
 8103eba:	f000 f93f 	bl	810413c <RCCEx_PLL2_Config>
 8103ebe:	4603      	mov	r3, r0
 8103ec0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103ec2:	e00e      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	3324      	adds	r3, #36	; 0x24
 8103ec8:	2102      	movs	r1, #2
 8103eca:	4618      	mov	r0, r3
 8103ecc:	f000 f9e8 	bl	81042a0 <RCCEx_PLL3_Config>
 8103ed0:	4603      	mov	r3, r0
 8103ed2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103ed4:	e005      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ed6:	2301      	movs	r3, #1
 8103ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8103eda:	e002      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103edc:	58024400 	.word	0x58024400
      break;
 8103ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ee2:	7dfb      	ldrb	r3, [r7, #23]
 8103ee4:	2b00      	cmp	r3, #0
 8103ee6:	d10a      	bne.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103ee8:	4b93      	ldr	r3, [pc, #588]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103ef6:	4990      	ldr	r1, [pc, #576]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ef8:	4313      	orrs	r3, r2
 8103efa:	658b      	str	r3, [r1, #88]	; 0x58
 8103efc:	e001      	b.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103efe:	7dfb      	ldrb	r3, [r7, #23]
 8103f00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103f0a:	2b00      	cmp	r3, #0
 8103f0c:	d033      	beq.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103f18:	d01c      	beq.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8103f1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103f1e:	d816      	bhi.n	8103f4e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103f24:	d003      	beq.n	8103f2e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103f2a:	d007      	beq.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103f2c:	e00f      	b.n	8103f4e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f2e:	4b82      	ldr	r3, [pc, #520]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f32:	4a81      	ldr	r2, [pc, #516]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103f3a:	e00c      	b.n	8103f56 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	3324      	adds	r3, #36	; 0x24
 8103f40:	2101      	movs	r1, #1
 8103f42:	4618      	mov	r0, r3
 8103f44:	f000 f9ac 	bl	81042a0 <RCCEx_PLL3_Config>
 8103f48:	4603      	mov	r3, r0
 8103f4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103f4c:	e003      	b.n	8103f56 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f4e:	2301      	movs	r3, #1
 8103f50:	75fb      	strb	r3, [r7, #23]
      break;
 8103f52:	e000      	b.n	8103f56 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f56:	7dfb      	ldrb	r3, [r7, #23]
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	d10a      	bne.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103f5c:	4b76      	ldr	r3, [pc, #472]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f6a:	4973      	ldr	r1, [pc, #460]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f6c:	4313      	orrs	r3, r2
 8103f6e:	654b      	str	r3, [r1, #84]	; 0x54
 8103f70:	e001      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f72:	7dfb      	ldrb	r3, [r7, #23]
 8103f74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103f7e:	2b00      	cmp	r3, #0
 8103f80:	d029      	beq.n	8103fd6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d003      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103f8e:	d007      	beq.n	8103fa0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103f90:	e00f      	b.n	8103fb2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f92:	4b69      	ldr	r3, [pc, #420]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f96:	4a68      	ldr	r2, [pc, #416]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103f9e:	e00b      	b.n	8103fb8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	3304      	adds	r3, #4
 8103fa4:	2102      	movs	r1, #2
 8103fa6:	4618      	mov	r0, r3
 8103fa8:	f000 f8c8 	bl	810413c <RCCEx_PLL2_Config>
 8103fac:	4603      	mov	r3, r0
 8103fae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103fb0:	e002      	b.n	8103fb8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8103fb2:	2301      	movs	r3, #1
 8103fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8103fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fb8:	7dfb      	ldrb	r3, [r7, #23]
 8103fba:	2b00      	cmp	r3, #0
 8103fbc:	d109      	bne.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103fbe:	4b5e      	ldr	r3, [pc, #376]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103fc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103fca:	495b      	ldr	r1, [pc, #364]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103fcc:	4313      	orrs	r3, r2
 8103fce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103fd0:	e001      	b.n	8103fd6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fd2:	7dfb      	ldrb	r3, [r7, #23]
 8103fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d00a      	beq.n	8103ff8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	3324      	adds	r3, #36	; 0x24
 8103fe6:	2102      	movs	r1, #2
 8103fe8:	4618      	mov	r0, r3
 8103fea:	f000 f959 	bl	81042a0 <RCCEx_PLL3_Config>
 8103fee:	4603      	mov	r3, r0
 8103ff0:	2b00      	cmp	r3, #0
 8103ff2:	d001      	beq.n	8103ff8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103ff4:	2301      	movs	r3, #1
 8103ff6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104000:	2b00      	cmp	r3, #0
 8104002:	d030      	beq.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810400c:	d017      	beq.n	810403e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810400e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104012:	d811      	bhi.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104018:	d013      	beq.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810401a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810401e:	d80b      	bhi.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104020:	2b00      	cmp	r3, #0
 8104022:	d010      	beq.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104028:	d106      	bne.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810402a:	4b43      	ldr	r3, [pc, #268]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810402e:	4a42      	ldr	r2, [pc, #264]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104036:	e007      	b.n	8104048 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104038:	2301      	movs	r3, #1
 810403a:	75fb      	strb	r3, [r7, #23]
      break;
 810403c:	e004      	b.n	8104048 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810403e:	bf00      	nop
 8104040:	e002      	b.n	8104048 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104042:	bf00      	nop
 8104044:	e000      	b.n	8104048 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104048:	7dfb      	ldrb	r3, [r7, #23]
 810404a:	2b00      	cmp	r3, #0
 810404c:	d109      	bne.n	8104062 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810404e:	4b3a      	ldr	r3, [pc, #232]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810405a:	4937      	ldr	r1, [pc, #220]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810405c:	4313      	orrs	r3, r2
 810405e:	654b      	str	r3, [r1, #84]	; 0x54
 8104060:	e001      	b.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104062:	7dfb      	ldrb	r3, [r7, #23]
 8104064:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810406e:	2b00      	cmp	r3, #0
 8104070:	d008      	beq.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104072:	4b31      	ldr	r3, [pc, #196]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810407e:	492e      	ldr	r1, [pc, #184]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104080:	4313      	orrs	r3, r2
 8104082:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810408c:	2b00      	cmp	r3, #0
 810408e:	d009      	beq.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104090:	4b29      	ldr	r3, [pc, #164]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104092:	691b      	ldr	r3, [r3, #16]
 8104094:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810409e:	4926      	ldr	r1, [pc, #152]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040a0:	4313      	orrs	r3, r2
 81040a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d008      	beq.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81040b0:	4b21      	ldr	r3, [pc, #132]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81040bc:	491e      	ldr	r1, [pc, #120]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040be:	4313      	orrs	r3, r2
 81040c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d00d      	beq.n	81040ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81040ce:	4b1a      	ldr	r3, [pc, #104]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040d0:	691b      	ldr	r3, [r3, #16]
 81040d2:	4a19      	ldr	r2, [pc, #100]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81040d8:	6113      	str	r3, [r2, #16]
 81040da:	4b17      	ldr	r3, [pc, #92]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040dc:	691a      	ldr	r2, [r3, #16]
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81040e4:	4914      	ldr	r1, [pc, #80]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040e6:	4313      	orrs	r3, r2
 81040e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	2b00      	cmp	r3, #0
 81040f0:	da08      	bge.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81040f2:	4b11      	ldr	r3, [pc, #68]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040fe:	490e      	ldr	r1, [pc, #56]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104100:	4313      	orrs	r3, r2
 8104102:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810410c:	2b00      	cmp	r3, #0
 810410e:	d009      	beq.n	8104124 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104110:	4b09      	ldr	r3, [pc, #36]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104114:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810411e:	4906      	ldr	r1, [pc, #24]	; (8104138 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104120:	4313      	orrs	r3, r2
 8104122:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104124:	7dbb      	ldrb	r3, [r7, #22]
 8104126:	2b00      	cmp	r3, #0
 8104128:	d101      	bne.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810412a:	2300      	movs	r3, #0
 810412c:	e000      	b.n	8104130 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810412e:	2301      	movs	r3, #1
}
 8104130:	4618      	mov	r0, r3
 8104132:	3718      	adds	r7, #24
 8104134:	46bd      	mov	sp, r7
 8104136:	bd80      	pop	{r7, pc}
 8104138:	58024400 	.word	0x58024400

0810413c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810413c:	b580      	push	{r7, lr}
 810413e:	b084      	sub	sp, #16
 8104140:	af00      	add	r7, sp, #0
 8104142:	6078      	str	r0, [r7, #4]
 8104144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104146:	2300      	movs	r3, #0
 8104148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810414a:	4b54      	ldr	r3, [pc, #336]	; (810429c <RCCEx_PLL2_Config+0x160>)
 810414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810414e:	f003 0303 	and.w	r3, r3, #3
 8104152:	2b03      	cmp	r3, #3
 8104154:	d101      	bne.n	810415a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104156:	2301      	movs	r3, #1
 8104158:	e09b      	b.n	8104292 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810415a:	4b50      	ldr	r3, [pc, #320]	; (810429c <RCCEx_PLL2_Config+0x160>)
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	4a4f      	ldr	r2, [pc, #316]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104160:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104166:	f7fd fd91 	bl	8101c8c <HAL_GetTick>
 810416a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810416c:	e008      	b.n	8104180 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810416e:	f7fd fd8d 	bl	8101c8c <HAL_GetTick>
 8104172:	4602      	mov	r2, r0
 8104174:	68bb      	ldr	r3, [r7, #8]
 8104176:	1ad3      	subs	r3, r2, r3
 8104178:	2b02      	cmp	r3, #2
 810417a:	d901      	bls.n	8104180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810417c:	2303      	movs	r3, #3
 810417e:	e088      	b.n	8104292 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104180:	4b46      	ldr	r3, [pc, #280]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104188:	2b00      	cmp	r3, #0
 810418a:	d1f0      	bne.n	810416e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810418c:	4b43      	ldr	r3, [pc, #268]	; (810429c <RCCEx_PLL2_Config+0x160>)
 810418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104190:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	031b      	lsls	r3, r3, #12
 810419a:	4940      	ldr	r1, [pc, #256]	; (810429c <RCCEx_PLL2_Config+0x160>)
 810419c:	4313      	orrs	r3, r2
 810419e:	628b      	str	r3, [r1, #40]	; 0x28
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	685b      	ldr	r3, [r3, #4]
 81041a4:	3b01      	subs	r3, #1
 81041a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	689b      	ldr	r3, [r3, #8]
 81041ae:	3b01      	subs	r3, #1
 81041b0:	025b      	lsls	r3, r3, #9
 81041b2:	b29b      	uxth	r3, r3
 81041b4:	431a      	orrs	r2, r3
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	68db      	ldr	r3, [r3, #12]
 81041ba:	3b01      	subs	r3, #1
 81041bc:	041b      	lsls	r3, r3, #16
 81041be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81041c2:	431a      	orrs	r2, r3
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	691b      	ldr	r3, [r3, #16]
 81041c8:	3b01      	subs	r3, #1
 81041ca:	061b      	lsls	r3, r3, #24
 81041cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81041d0:	4932      	ldr	r1, [pc, #200]	; (810429c <RCCEx_PLL2_Config+0x160>)
 81041d2:	4313      	orrs	r3, r2
 81041d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81041d6:	4b31      	ldr	r3, [pc, #196]	; (810429c <RCCEx_PLL2_Config+0x160>)
 81041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	695b      	ldr	r3, [r3, #20]
 81041e2:	492e      	ldr	r1, [pc, #184]	; (810429c <RCCEx_PLL2_Config+0x160>)
 81041e4:	4313      	orrs	r3, r2
 81041e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81041e8:	4b2c      	ldr	r3, [pc, #176]	; (810429c <RCCEx_PLL2_Config+0x160>)
 81041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041ec:	f023 0220 	bic.w	r2, r3, #32
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	699b      	ldr	r3, [r3, #24]
 81041f4:	4929      	ldr	r1, [pc, #164]	; (810429c <RCCEx_PLL2_Config+0x160>)
 81041f6:	4313      	orrs	r3, r2
 81041f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81041fa:	4b28      	ldr	r3, [pc, #160]	; (810429c <RCCEx_PLL2_Config+0x160>)
 81041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041fe:	4a27      	ldr	r2, [pc, #156]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104200:	f023 0310 	bic.w	r3, r3, #16
 8104204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104206:	4b25      	ldr	r3, [pc, #148]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810420a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810420e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104212:	687a      	ldr	r2, [r7, #4]
 8104214:	69d2      	ldr	r2, [r2, #28]
 8104216:	00d2      	lsls	r2, r2, #3
 8104218:	4920      	ldr	r1, [pc, #128]	; (810429c <RCCEx_PLL2_Config+0x160>)
 810421a:	4313      	orrs	r3, r2
 810421c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810421e:	4b1f      	ldr	r3, [pc, #124]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104222:	4a1e      	ldr	r2, [pc, #120]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104224:	f043 0310 	orr.w	r3, r3, #16
 8104228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810422a:	683b      	ldr	r3, [r7, #0]
 810422c:	2b00      	cmp	r3, #0
 810422e:	d106      	bne.n	810423e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104230:	4b1a      	ldr	r3, [pc, #104]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104234:	4a19      	ldr	r2, [pc, #100]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810423a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810423c:	e00f      	b.n	810425e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810423e:	683b      	ldr	r3, [r7, #0]
 8104240:	2b01      	cmp	r3, #1
 8104242:	d106      	bne.n	8104252 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104244:	4b15      	ldr	r3, [pc, #84]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104248:	4a14      	ldr	r2, [pc, #80]	; (810429c <RCCEx_PLL2_Config+0x160>)
 810424a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810424e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104250:	e005      	b.n	810425e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104252:	4b12      	ldr	r3, [pc, #72]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104256:	4a11      	ldr	r2, [pc, #68]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810425c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810425e:	4b0f      	ldr	r3, [pc, #60]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	4a0e      	ldr	r2, [pc, #56]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810426a:	f7fd fd0f 	bl	8101c8c <HAL_GetTick>
 810426e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104270:	e008      	b.n	8104284 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104272:	f7fd fd0b 	bl	8101c8c <HAL_GetTick>
 8104276:	4602      	mov	r2, r0
 8104278:	68bb      	ldr	r3, [r7, #8]
 810427a:	1ad3      	subs	r3, r2, r3
 810427c:	2b02      	cmp	r3, #2
 810427e:	d901      	bls.n	8104284 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104280:	2303      	movs	r3, #3
 8104282:	e006      	b.n	8104292 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104284:	4b05      	ldr	r3, [pc, #20]	; (810429c <RCCEx_PLL2_Config+0x160>)
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810428c:	2b00      	cmp	r3, #0
 810428e:	d0f0      	beq.n	8104272 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104290:	7bfb      	ldrb	r3, [r7, #15]
}
 8104292:	4618      	mov	r0, r3
 8104294:	3710      	adds	r7, #16
 8104296:	46bd      	mov	sp, r7
 8104298:	bd80      	pop	{r7, pc}
 810429a:	bf00      	nop
 810429c:	58024400 	.word	0x58024400

081042a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81042a0:	b580      	push	{r7, lr}
 81042a2:	b084      	sub	sp, #16
 81042a4:	af00      	add	r7, sp, #0
 81042a6:	6078      	str	r0, [r7, #4]
 81042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81042aa:	2300      	movs	r3, #0
 81042ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81042ae:	4b54      	ldr	r3, [pc, #336]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042b2:	f003 0303 	and.w	r3, r3, #3
 81042b6:	2b03      	cmp	r3, #3
 81042b8:	d101      	bne.n	81042be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81042ba:	2301      	movs	r3, #1
 81042bc:	e09b      	b.n	81043f6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81042be:	4b50      	ldr	r3, [pc, #320]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a4f      	ldr	r2, [pc, #316]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81042ca:	f7fd fcdf 	bl	8101c8c <HAL_GetTick>
 81042ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81042d0:	e008      	b.n	81042e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81042d2:	f7fd fcdb 	bl	8101c8c <HAL_GetTick>
 81042d6:	4602      	mov	r2, r0
 81042d8:	68bb      	ldr	r3, [r7, #8]
 81042da:	1ad3      	subs	r3, r2, r3
 81042dc:	2b02      	cmp	r3, #2
 81042de:	d901      	bls.n	81042e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81042e0:	2303      	movs	r3, #3
 81042e2:	e088      	b.n	81043f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81042e4:	4b46      	ldr	r3, [pc, #280]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81042ec:	2b00      	cmp	r3, #0
 81042ee:	d1f0      	bne.n	81042d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81042f0:	4b43      	ldr	r3, [pc, #268]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	051b      	lsls	r3, r3, #20
 81042fe:	4940      	ldr	r1, [pc, #256]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104300:	4313      	orrs	r3, r2
 8104302:	628b      	str	r3, [r1, #40]	; 0x28
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	685b      	ldr	r3, [r3, #4]
 8104308:	3b01      	subs	r3, #1
 810430a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	689b      	ldr	r3, [r3, #8]
 8104312:	3b01      	subs	r3, #1
 8104314:	025b      	lsls	r3, r3, #9
 8104316:	b29b      	uxth	r3, r3
 8104318:	431a      	orrs	r2, r3
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	68db      	ldr	r3, [r3, #12]
 810431e:	3b01      	subs	r3, #1
 8104320:	041b      	lsls	r3, r3, #16
 8104322:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104326:	431a      	orrs	r2, r3
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	691b      	ldr	r3, [r3, #16]
 810432c:	3b01      	subs	r3, #1
 810432e:	061b      	lsls	r3, r3, #24
 8104330:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104334:	4932      	ldr	r1, [pc, #200]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104336:	4313      	orrs	r3, r2
 8104338:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810433a:	4b31      	ldr	r3, [pc, #196]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 810433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810433e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	695b      	ldr	r3, [r3, #20]
 8104346:	492e      	ldr	r1, [pc, #184]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104348:	4313      	orrs	r3, r2
 810434a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810434c:	4b2c      	ldr	r3, [pc, #176]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 810434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104350:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	699b      	ldr	r3, [r3, #24]
 8104358:	4929      	ldr	r1, [pc, #164]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 810435a:	4313      	orrs	r3, r2
 810435c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810435e:	4b28      	ldr	r3, [pc, #160]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104362:	4a27      	ldr	r2, [pc, #156]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810436a:	4b25      	ldr	r3, [pc, #148]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 810436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810436e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104372:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104376:	687a      	ldr	r2, [r7, #4]
 8104378:	69d2      	ldr	r2, [r2, #28]
 810437a:	00d2      	lsls	r2, r2, #3
 810437c:	4920      	ldr	r1, [pc, #128]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 810437e:	4313      	orrs	r3, r2
 8104380:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104382:	4b1f      	ldr	r3, [pc, #124]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104386:	4a1e      	ldr	r2, [pc, #120]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810438c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810438e:	683b      	ldr	r3, [r7, #0]
 8104390:	2b00      	cmp	r3, #0
 8104392:	d106      	bne.n	81043a2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104394:	4b1a      	ldr	r3, [pc, #104]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 8104396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104398:	4a19      	ldr	r2, [pc, #100]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 810439a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810439e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81043a0:	e00f      	b.n	81043c2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81043a2:	683b      	ldr	r3, [r7, #0]
 81043a4:	2b01      	cmp	r3, #1
 81043a6:	d106      	bne.n	81043b6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81043a8:	4b15      	ldr	r3, [pc, #84]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043ac:	4a14      	ldr	r2, [pc, #80]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81043b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81043b4:	e005      	b.n	81043c2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81043b6:	4b12      	ldr	r3, [pc, #72]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043ba:	4a11      	ldr	r2, [pc, #68]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81043c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81043c2:	4b0f      	ldr	r3, [pc, #60]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a0e      	ldr	r2, [pc, #56]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81043ce:	f7fd fc5d 	bl	8101c8c <HAL_GetTick>
 81043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81043d4:	e008      	b.n	81043e8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81043d6:	f7fd fc59 	bl	8101c8c <HAL_GetTick>
 81043da:	4602      	mov	r2, r0
 81043dc:	68bb      	ldr	r3, [r7, #8]
 81043de:	1ad3      	subs	r3, r2, r3
 81043e0:	2b02      	cmp	r3, #2
 81043e2:	d901      	bls.n	81043e8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81043e4:	2303      	movs	r3, #3
 81043e6:	e006      	b.n	81043f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81043e8:	4b05      	ldr	r3, [pc, #20]	; (8104400 <RCCEx_PLL3_Config+0x160>)
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81043f0:	2b00      	cmp	r3, #0
 81043f2:	d0f0      	beq.n	81043d6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81043f6:	4618      	mov	r0, r3
 81043f8:	3710      	adds	r7, #16
 81043fa:	46bd      	mov	sp, r7
 81043fc:	bd80      	pop	{r7, pc}
 81043fe:	bf00      	nop
 8104400:	58024400 	.word	0x58024400

08104404 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104404:	b580      	push	{r7, lr}
 8104406:	b084      	sub	sp, #16
 8104408:	af00      	add	r7, sp, #0
 810440a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810440c:	2300      	movs	r3, #0
 810440e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	2b00      	cmp	r3, #0
 8104414:	d101      	bne.n	810441a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8104416:	2301      	movs	r3, #1
 8104418:	e0eb      	b.n	81045f2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	2200      	movs	r2, #0
 810441e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	4a75      	ldr	r2, [pc, #468]	; (81045fc <HAL_SPI_Init+0x1f8>)
 8104426:	4293      	cmp	r3, r2
 8104428:	d00f      	beq.n	810444a <HAL_SPI_Init+0x46>
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a74      	ldr	r2, [pc, #464]	; (8104600 <HAL_SPI_Init+0x1fc>)
 8104430:	4293      	cmp	r3, r2
 8104432:	d00a      	beq.n	810444a <HAL_SPI_Init+0x46>
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	4a72      	ldr	r2, [pc, #456]	; (8104604 <HAL_SPI_Init+0x200>)
 810443a:	4293      	cmp	r3, r2
 810443c:	d005      	beq.n	810444a <HAL_SPI_Init+0x46>
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	68db      	ldr	r3, [r3, #12]
 8104442:	2b0f      	cmp	r3, #15
 8104444:	d901      	bls.n	810444a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8104446:	2301      	movs	r3, #1
 8104448:	e0d3      	b.n	81045f2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810444a:	6878      	ldr	r0, [r7, #4]
 810444c:	f000 f8dc 	bl	8104608 <SPI_GetPacketSize>
 8104450:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	4a69      	ldr	r2, [pc, #420]	; (81045fc <HAL_SPI_Init+0x1f8>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d00c      	beq.n	8104476 <HAL_SPI_Init+0x72>
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4a67      	ldr	r2, [pc, #412]	; (8104600 <HAL_SPI_Init+0x1fc>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d007      	beq.n	8104476 <HAL_SPI_Init+0x72>
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	4a66      	ldr	r2, [pc, #408]	; (8104604 <HAL_SPI_Init+0x200>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d002      	beq.n	8104476 <HAL_SPI_Init+0x72>
 8104470:	68bb      	ldr	r3, [r7, #8]
 8104472:	2b08      	cmp	r3, #8
 8104474:	d811      	bhi.n	810449a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810447a:	4a60      	ldr	r2, [pc, #384]	; (81045fc <HAL_SPI_Init+0x1f8>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d009      	beq.n	8104494 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	4a5e      	ldr	r2, [pc, #376]	; (8104600 <HAL_SPI_Init+0x1fc>)
 8104486:	4293      	cmp	r3, r2
 8104488:	d004      	beq.n	8104494 <HAL_SPI_Init+0x90>
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	4a5d      	ldr	r2, [pc, #372]	; (8104604 <HAL_SPI_Init+0x200>)
 8104490:	4293      	cmp	r3, r2
 8104492:	d104      	bne.n	810449e <HAL_SPI_Init+0x9a>
 8104494:	68bb      	ldr	r3, [r7, #8]
 8104496:	2b10      	cmp	r3, #16
 8104498:	d901      	bls.n	810449e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810449a:	2301      	movs	r3, #1
 810449c:	e0a9      	b.n	81045f2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81044a4:	b2db      	uxtb	r3, r3
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d106      	bne.n	81044b8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	2200      	movs	r2, #0
 81044ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81044b2:	6878      	ldr	r0, [r7, #4]
 81044b4:	f7fd f860 	bl	8101578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	2202      	movs	r2, #2
 81044bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	681a      	ldr	r2, [r3, #0]
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	f022 0201 	bic.w	r2, r2, #1
 81044ce:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	699b      	ldr	r3, [r3, #24]
 81044d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81044d8:	d119      	bne.n	810450e <HAL_SPI_Init+0x10a>
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	685b      	ldr	r3, [r3, #4]
 81044de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81044e2:	d103      	bne.n	81044ec <HAL_SPI_Init+0xe8>
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81044e8:	2b00      	cmp	r3, #0
 81044ea:	d008      	beq.n	81044fe <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81044f0:	2b00      	cmp	r3, #0
 81044f2:	d10c      	bne.n	810450e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81044f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81044fc:	d107      	bne.n	810450e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	681a      	ldr	r2, [r3, #0]
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810450c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	69da      	ldr	r2, [r3, #28]
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104516:	431a      	orrs	r2, r3
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	431a      	orrs	r2, r3
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104520:	ea42 0103 	orr.w	r1, r2, r3
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	68da      	ldr	r2, [r3, #12]
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	430a      	orrs	r2, r1
 810452e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104538:	431a      	orrs	r2, r3
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810453e:	431a      	orrs	r2, r3
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	699b      	ldr	r3, [r3, #24]
 8104544:	431a      	orrs	r2, r3
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	691b      	ldr	r3, [r3, #16]
 810454a:	431a      	orrs	r2, r3
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	695b      	ldr	r3, [r3, #20]
 8104550:	431a      	orrs	r2, r3
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	6a1b      	ldr	r3, [r3, #32]
 8104556:	431a      	orrs	r2, r3
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	685b      	ldr	r3, [r3, #4]
 810455c:	431a      	orrs	r2, r3
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104562:	431a      	orrs	r2, r3
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	689b      	ldr	r3, [r3, #8]
 8104568:	431a      	orrs	r2, r3
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810456e:	ea42 0103 	orr.w	r1, r2, r3
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	430a      	orrs	r2, r1
 810457c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	685b      	ldr	r3, [r3, #4]
 8104582:	2b00      	cmp	r3, #0
 8104584:	d113      	bne.n	81045ae <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	689b      	ldr	r3, [r3, #8]
 810458c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104598:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	689b      	ldr	r3, [r3, #8]
 81045a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81045ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	f022 0201 	bic.w	r2, r2, #1
 81045bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	685b      	ldr	r3, [r3, #4]
 81045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81045c6:	2b00      	cmp	r3, #0
 81045c8:	d00a      	beq.n	81045e0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	68db      	ldr	r3, [r3, #12]
 81045d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	430a      	orrs	r2, r1
 81045de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	2200      	movs	r2, #0
 81045e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	2201      	movs	r2, #1
 81045ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81045f0:	2300      	movs	r3, #0
}
 81045f2:	4618      	mov	r0, r3
 81045f4:	3710      	adds	r7, #16
 81045f6:	46bd      	mov	sp, r7
 81045f8:	bd80      	pop	{r7, pc}
 81045fa:	bf00      	nop
 81045fc:	40013000 	.word	0x40013000
 8104600:	40003800 	.word	0x40003800
 8104604:	40003c00 	.word	0x40003c00

08104608 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104608:	b480      	push	{r7}
 810460a:	b085      	sub	sp, #20
 810460c:	af00      	add	r7, sp, #0
 810460e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104614:	095b      	lsrs	r3, r3, #5
 8104616:	3301      	adds	r3, #1
 8104618:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	68db      	ldr	r3, [r3, #12]
 810461e:	3301      	adds	r3, #1
 8104620:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104622:	68bb      	ldr	r3, [r7, #8]
 8104624:	3307      	adds	r3, #7
 8104626:	08db      	lsrs	r3, r3, #3
 8104628:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810462a:	68bb      	ldr	r3, [r7, #8]
 810462c:	68fa      	ldr	r2, [r7, #12]
 810462e:	fb02 f303 	mul.w	r3, r2, r3
}
 8104632:	4618      	mov	r0, r3
 8104634:	3714      	adds	r7, #20
 8104636:	46bd      	mov	sp, r7
 8104638:	f85d 7b04 	ldr.w	r7, [sp], #4
 810463c:	4770      	bx	lr

0810463e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810463e:	b580      	push	{r7, lr}
 8104640:	b082      	sub	sp, #8
 8104642:	af00      	add	r7, sp, #0
 8104644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	2b00      	cmp	r3, #0
 810464a:	d101      	bne.n	8104650 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810464c:	2301      	movs	r3, #1
 810464e:	e049      	b.n	81046e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104656:	b2db      	uxtb	r3, r3
 8104658:	2b00      	cmp	r3, #0
 810465a:	d106      	bne.n	810466a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	2200      	movs	r2, #0
 8104660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8104664:	6878      	ldr	r0, [r7, #4]
 8104666:	f7fd f9bf 	bl	81019e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	2202      	movs	r2, #2
 810466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	681a      	ldr	r2, [r3, #0]
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	3304      	adds	r3, #4
 810467a:	4619      	mov	r1, r3
 810467c:	4610      	mov	r0, r2
 810467e:	f000 fb9f 	bl	8104dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	2201      	movs	r2, #1
 8104686:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	2201      	movs	r2, #1
 810468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	2201      	movs	r2, #1
 8104696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	2201      	movs	r2, #1
 810469e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	2201      	movs	r2, #1
 81046a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	2201      	movs	r2, #1
 81046ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	2201      	movs	r2, #1
 81046b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	2201      	movs	r2, #1
 81046be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	2201      	movs	r2, #1
 81046c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	2201      	movs	r2, #1
 81046ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	2201      	movs	r2, #1
 81046d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	2201      	movs	r2, #1
 81046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81046e2:	2300      	movs	r3, #0
}
 81046e4:	4618      	mov	r0, r3
 81046e6:	3708      	adds	r7, #8
 81046e8:	46bd      	mov	sp, r7
 81046ea:	bd80      	pop	{r7, pc}

081046ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81046ec:	b580      	push	{r7, lr}
 81046ee:	b084      	sub	sp, #16
 81046f0:	af00      	add	r7, sp, #0
 81046f2:	6078      	str	r0, [r7, #4]
 81046f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81046f6:	683b      	ldr	r3, [r7, #0]
 81046f8:	2b00      	cmp	r3, #0
 81046fa:	d109      	bne.n	8104710 <HAL_TIM_PWM_Start+0x24>
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8104702:	b2db      	uxtb	r3, r3
 8104704:	2b01      	cmp	r3, #1
 8104706:	bf14      	ite	ne
 8104708:	2301      	movne	r3, #1
 810470a:	2300      	moveq	r3, #0
 810470c:	b2db      	uxtb	r3, r3
 810470e:	e03c      	b.n	810478a <HAL_TIM_PWM_Start+0x9e>
 8104710:	683b      	ldr	r3, [r7, #0]
 8104712:	2b04      	cmp	r3, #4
 8104714:	d109      	bne.n	810472a <HAL_TIM_PWM_Start+0x3e>
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810471c:	b2db      	uxtb	r3, r3
 810471e:	2b01      	cmp	r3, #1
 8104720:	bf14      	ite	ne
 8104722:	2301      	movne	r3, #1
 8104724:	2300      	moveq	r3, #0
 8104726:	b2db      	uxtb	r3, r3
 8104728:	e02f      	b.n	810478a <HAL_TIM_PWM_Start+0x9e>
 810472a:	683b      	ldr	r3, [r7, #0]
 810472c:	2b08      	cmp	r3, #8
 810472e:	d109      	bne.n	8104744 <HAL_TIM_PWM_Start+0x58>
 8104730:	687b      	ldr	r3, [r7, #4]
 8104732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104736:	b2db      	uxtb	r3, r3
 8104738:	2b01      	cmp	r3, #1
 810473a:	bf14      	ite	ne
 810473c:	2301      	movne	r3, #1
 810473e:	2300      	moveq	r3, #0
 8104740:	b2db      	uxtb	r3, r3
 8104742:	e022      	b.n	810478a <HAL_TIM_PWM_Start+0x9e>
 8104744:	683b      	ldr	r3, [r7, #0]
 8104746:	2b0c      	cmp	r3, #12
 8104748:	d109      	bne.n	810475e <HAL_TIM_PWM_Start+0x72>
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104750:	b2db      	uxtb	r3, r3
 8104752:	2b01      	cmp	r3, #1
 8104754:	bf14      	ite	ne
 8104756:	2301      	movne	r3, #1
 8104758:	2300      	moveq	r3, #0
 810475a:	b2db      	uxtb	r3, r3
 810475c:	e015      	b.n	810478a <HAL_TIM_PWM_Start+0x9e>
 810475e:	683b      	ldr	r3, [r7, #0]
 8104760:	2b10      	cmp	r3, #16
 8104762:	d109      	bne.n	8104778 <HAL_TIM_PWM_Start+0x8c>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810476a:	b2db      	uxtb	r3, r3
 810476c:	2b01      	cmp	r3, #1
 810476e:	bf14      	ite	ne
 8104770:	2301      	movne	r3, #1
 8104772:	2300      	moveq	r3, #0
 8104774:	b2db      	uxtb	r3, r3
 8104776:	e008      	b.n	810478a <HAL_TIM_PWM_Start+0x9e>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 810477e:	b2db      	uxtb	r3, r3
 8104780:	2b01      	cmp	r3, #1
 8104782:	bf14      	ite	ne
 8104784:	2301      	movne	r3, #1
 8104786:	2300      	moveq	r3, #0
 8104788:	b2db      	uxtb	r3, r3
 810478a:	2b00      	cmp	r3, #0
 810478c:	d001      	beq.n	8104792 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810478e:	2301      	movs	r3, #1
 8104790:	e09c      	b.n	81048cc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8104792:	683b      	ldr	r3, [r7, #0]
 8104794:	2b00      	cmp	r3, #0
 8104796:	d104      	bne.n	81047a2 <HAL_TIM_PWM_Start+0xb6>
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	2202      	movs	r2, #2
 810479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81047a0:	e023      	b.n	81047ea <HAL_TIM_PWM_Start+0xfe>
 81047a2:	683b      	ldr	r3, [r7, #0]
 81047a4:	2b04      	cmp	r3, #4
 81047a6:	d104      	bne.n	81047b2 <HAL_TIM_PWM_Start+0xc6>
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	2202      	movs	r2, #2
 81047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81047b0:	e01b      	b.n	81047ea <HAL_TIM_PWM_Start+0xfe>
 81047b2:	683b      	ldr	r3, [r7, #0]
 81047b4:	2b08      	cmp	r3, #8
 81047b6:	d104      	bne.n	81047c2 <HAL_TIM_PWM_Start+0xd6>
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	2202      	movs	r2, #2
 81047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81047c0:	e013      	b.n	81047ea <HAL_TIM_PWM_Start+0xfe>
 81047c2:	683b      	ldr	r3, [r7, #0]
 81047c4:	2b0c      	cmp	r3, #12
 81047c6:	d104      	bne.n	81047d2 <HAL_TIM_PWM_Start+0xe6>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	2202      	movs	r2, #2
 81047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81047d0:	e00b      	b.n	81047ea <HAL_TIM_PWM_Start+0xfe>
 81047d2:	683b      	ldr	r3, [r7, #0]
 81047d4:	2b10      	cmp	r3, #16
 81047d6:	d104      	bne.n	81047e2 <HAL_TIM_PWM_Start+0xf6>
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	2202      	movs	r2, #2
 81047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81047e0:	e003      	b.n	81047ea <HAL_TIM_PWM_Start+0xfe>
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	2202      	movs	r2, #2
 81047e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	2201      	movs	r2, #1
 81047f0:	6839      	ldr	r1, [r7, #0]
 81047f2:	4618      	mov	r0, r3
 81047f4:	f000 fe4c 	bl	8105490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	4a35      	ldr	r2, [pc, #212]	; (81048d4 <HAL_TIM_PWM_Start+0x1e8>)
 81047fe:	4293      	cmp	r3, r2
 8104800:	d013      	beq.n	810482a <HAL_TIM_PWM_Start+0x13e>
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	4a34      	ldr	r2, [pc, #208]	; (81048d8 <HAL_TIM_PWM_Start+0x1ec>)
 8104808:	4293      	cmp	r3, r2
 810480a:	d00e      	beq.n	810482a <HAL_TIM_PWM_Start+0x13e>
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	4a32      	ldr	r2, [pc, #200]	; (81048dc <HAL_TIM_PWM_Start+0x1f0>)
 8104812:	4293      	cmp	r3, r2
 8104814:	d009      	beq.n	810482a <HAL_TIM_PWM_Start+0x13e>
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	681b      	ldr	r3, [r3, #0]
 810481a:	4a31      	ldr	r2, [pc, #196]	; (81048e0 <HAL_TIM_PWM_Start+0x1f4>)
 810481c:	4293      	cmp	r3, r2
 810481e:	d004      	beq.n	810482a <HAL_TIM_PWM_Start+0x13e>
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	4a2f      	ldr	r2, [pc, #188]	; (81048e4 <HAL_TIM_PWM_Start+0x1f8>)
 8104826:	4293      	cmp	r3, r2
 8104828:	d101      	bne.n	810482e <HAL_TIM_PWM_Start+0x142>
 810482a:	2301      	movs	r3, #1
 810482c:	e000      	b.n	8104830 <HAL_TIM_PWM_Start+0x144>
 810482e:	2300      	movs	r3, #0
 8104830:	2b00      	cmp	r3, #0
 8104832:	d007      	beq.n	8104844 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	681b      	ldr	r3, [r3, #0]
 810483e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	4a22      	ldr	r2, [pc, #136]	; (81048d4 <HAL_TIM_PWM_Start+0x1e8>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d01d      	beq.n	810488a <HAL_TIM_PWM_Start+0x19e>
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104856:	d018      	beq.n	810488a <HAL_TIM_PWM_Start+0x19e>
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	4a22      	ldr	r2, [pc, #136]	; (81048e8 <HAL_TIM_PWM_Start+0x1fc>)
 810485e:	4293      	cmp	r3, r2
 8104860:	d013      	beq.n	810488a <HAL_TIM_PWM_Start+0x19e>
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	4a21      	ldr	r2, [pc, #132]	; (81048ec <HAL_TIM_PWM_Start+0x200>)
 8104868:	4293      	cmp	r3, r2
 810486a:	d00e      	beq.n	810488a <HAL_TIM_PWM_Start+0x19e>
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	4a1f      	ldr	r2, [pc, #124]	; (81048f0 <HAL_TIM_PWM_Start+0x204>)
 8104872:	4293      	cmp	r3, r2
 8104874:	d009      	beq.n	810488a <HAL_TIM_PWM_Start+0x19e>
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	681b      	ldr	r3, [r3, #0]
 810487a:	4a17      	ldr	r2, [pc, #92]	; (81048d8 <HAL_TIM_PWM_Start+0x1ec>)
 810487c:	4293      	cmp	r3, r2
 810487e:	d004      	beq.n	810488a <HAL_TIM_PWM_Start+0x19e>
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	4a1b      	ldr	r2, [pc, #108]	; (81048f4 <HAL_TIM_PWM_Start+0x208>)
 8104886:	4293      	cmp	r3, r2
 8104888:	d115      	bne.n	81048b6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	681b      	ldr	r3, [r3, #0]
 810488e:	689a      	ldr	r2, [r3, #8]
 8104890:	4b19      	ldr	r3, [pc, #100]	; (81048f8 <HAL_TIM_PWM_Start+0x20c>)
 8104892:	4013      	ands	r3, r2
 8104894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104896:	68fb      	ldr	r3, [r7, #12]
 8104898:	2b06      	cmp	r3, #6
 810489a:	d015      	beq.n	81048c8 <HAL_TIM_PWM_Start+0x1dc>
 810489c:	68fb      	ldr	r3, [r7, #12]
 810489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81048a2:	d011      	beq.n	81048c8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	681a      	ldr	r2, [r3, #0]
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	f042 0201 	orr.w	r2, r2, #1
 81048b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81048b4:	e008      	b.n	81048c8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	681a      	ldr	r2, [r3, #0]
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	f042 0201 	orr.w	r2, r2, #1
 81048c4:	601a      	str	r2, [r3, #0]
 81048c6:	e000      	b.n	81048ca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81048c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81048ca:	2300      	movs	r3, #0
}
 81048cc:	4618      	mov	r0, r3
 81048ce:	3710      	adds	r7, #16
 81048d0:	46bd      	mov	sp, r7
 81048d2:	bd80      	pop	{r7, pc}
 81048d4:	40010000 	.word	0x40010000
 81048d8:	40010400 	.word	0x40010400
 81048dc:	40014000 	.word	0x40014000
 81048e0:	40014400 	.word	0x40014400
 81048e4:	40014800 	.word	0x40014800
 81048e8:	40000400 	.word	0x40000400
 81048ec:	40000800 	.word	0x40000800
 81048f0:	40000c00 	.word	0x40000c00
 81048f4:	40001800 	.word	0x40001800
 81048f8:	00010007 	.word	0x00010007

081048fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81048fc:	b580      	push	{r7, lr}
 81048fe:	b082      	sub	sp, #8
 8104900:	af00      	add	r7, sp, #0
 8104902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	691b      	ldr	r3, [r3, #16]
 810490a:	f003 0302 	and.w	r3, r3, #2
 810490e:	2b02      	cmp	r3, #2
 8104910:	d122      	bne.n	8104958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	68db      	ldr	r3, [r3, #12]
 8104918:	f003 0302 	and.w	r3, r3, #2
 810491c:	2b02      	cmp	r3, #2
 810491e:	d11b      	bne.n	8104958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	f06f 0202 	mvn.w	r2, #2
 8104928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	2201      	movs	r2, #1
 810492e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	699b      	ldr	r3, [r3, #24]
 8104936:	f003 0303 	and.w	r3, r3, #3
 810493a:	2b00      	cmp	r3, #0
 810493c:	d003      	beq.n	8104946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810493e:	6878      	ldr	r0, [r7, #4]
 8104940:	f000 fa20 	bl	8104d84 <HAL_TIM_IC_CaptureCallback>
 8104944:	e005      	b.n	8104952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104946:	6878      	ldr	r0, [r7, #4]
 8104948:	f000 fa12 	bl	8104d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810494c:	6878      	ldr	r0, [r7, #4]
 810494e:	f000 fa23 	bl	8104d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	2200      	movs	r2, #0
 8104956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	691b      	ldr	r3, [r3, #16]
 810495e:	f003 0304 	and.w	r3, r3, #4
 8104962:	2b04      	cmp	r3, #4
 8104964:	d122      	bne.n	81049ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	68db      	ldr	r3, [r3, #12]
 810496c:	f003 0304 	and.w	r3, r3, #4
 8104970:	2b04      	cmp	r3, #4
 8104972:	d11b      	bne.n	81049ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8104974:	687b      	ldr	r3, [r7, #4]
 8104976:	681b      	ldr	r3, [r3, #0]
 8104978:	f06f 0204 	mvn.w	r2, #4
 810497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810497e:	687b      	ldr	r3, [r7, #4]
 8104980:	2202      	movs	r2, #2
 8104982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	699b      	ldr	r3, [r3, #24]
 810498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810498e:	2b00      	cmp	r3, #0
 8104990:	d003      	beq.n	810499a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104992:	6878      	ldr	r0, [r7, #4]
 8104994:	f000 f9f6 	bl	8104d84 <HAL_TIM_IC_CaptureCallback>
 8104998:	e005      	b.n	81049a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810499a:	6878      	ldr	r0, [r7, #4]
 810499c:	f000 f9e8 	bl	8104d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81049a0:	6878      	ldr	r0, [r7, #4]
 81049a2:	f000 f9f9 	bl	8104d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	2200      	movs	r2, #0
 81049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	691b      	ldr	r3, [r3, #16]
 81049b2:	f003 0308 	and.w	r3, r3, #8
 81049b6:	2b08      	cmp	r3, #8
 81049b8:	d122      	bne.n	8104a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	681b      	ldr	r3, [r3, #0]
 81049be:	68db      	ldr	r3, [r3, #12]
 81049c0:	f003 0308 	and.w	r3, r3, #8
 81049c4:	2b08      	cmp	r3, #8
 81049c6:	d11b      	bne.n	8104a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	f06f 0208 	mvn.w	r2, #8
 81049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	2204      	movs	r2, #4
 81049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	681b      	ldr	r3, [r3, #0]
 81049dc:	69db      	ldr	r3, [r3, #28]
 81049de:	f003 0303 	and.w	r3, r3, #3
 81049e2:	2b00      	cmp	r3, #0
 81049e4:	d003      	beq.n	81049ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81049e6:	6878      	ldr	r0, [r7, #4]
 81049e8:	f000 f9cc 	bl	8104d84 <HAL_TIM_IC_CaptureCallback>
 81049ec:	e005      	b.n	81049fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81049ee:	6878      	ldr	r0, [r7, #4]
 81049f0:	f000 f9be 	bl	8104d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81049f4:	6878      	ldr	r0, [r7, #4]
 81049f6:	f000 f9cf 	bl	8104d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	2200      	movs	r2, #0
 81049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	691b      	ldr	r3, [r3, #16]
 8104a06:	f003 0310 	and.w	r3, r3, #16
 8104a0a:	2b10      	cmp	r3, #16
 8104a0c:	d122      	bne.n	8104a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	68db      	ldr	r3, [r3, #12]
 8104a14:	f003 0310 	and.w	r3, r3, #16
 8104a18:	2b10      	cmp	r3, #16
 8104a1a:	d11b      	bne.n	8104a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	f06f 0210 	mvn.w	r2, #16
 8104a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	2208      	movs	r2, #8
 8104a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	69db      	ldr	r3, [r3, #28]
 8104a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104a36:	2b00      	cmp	r3, #0
 8104a38:	d003      	beq.n	8104a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104a3a:	6878      	ldr	r0, [r7, #4]
 8104a3c:	f000 f9a2 	bl	8104d84 <HAL_TIM_IC_CaptureCallback>
 8104a40:	e005      	b.n	8104a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104a42:	6878      	ldr	r0, [r7, #4]
 8104a44:	f000 f994 	bl	8104d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104a48:	6878      	ldr	r0, [r7, #4]
 8104a4a:	f000 f9a5 	bl	8104d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104a4e:	687b      	ldr	r3, [r7, #4]
 8104a50:	2200      	movs	r2, #0
 8104a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	691b      	ldr	r3, [r3, #16]
 8104a5a:	f003 0301 	and.w	r3, r3, #1
 8104a5e:	2b01      	cmp	r3, #1
 8104a60:	d10e      	bne.n	8104a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8104a62:	687b      	ldr	r3, [r7, #4]
 8104a64:	681b      	ldr	r3, [r3, #0]
 8104a66:	68db      	ldr	r3, [r3, #12]
 8104a68:	f003 0301 	and.w	r3, r3, #1
 8104a6c:	2b01      	cmp	r3, #1
 8104a6e:	d107      	bne.n	8104a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	f06f 0201 	mvn.w	r2, #1
 8104a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104a7a:	6878      	ldr	r0, [r7, #4]
 8104a7c:	f000 f96e 	bl	8104d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8104a80:	687b      	ldr	r3, [r7, #4]
 8104a82:	681b      	ldr	r3, [r3, #0]
 8104a84:	691b      	ldr	r3, [r3, #16]
 8104a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104a8a:	2b80      	cmp	r3, #128	; 0x80
 8104a8c:	d10e      	bne.n	8104aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	681b      	ldr	r3, [r3, #0]
 8104a92:	68db      	ldr	r3, [r3, #12]
 8104a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104a98:	2b80      	cmp	r3, #128	; 0x80
 8104a9a:	d107      	bne.n	8104aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8104aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104aa6:	6878      	ldr	r0, [r7, #4]
 8104aa8:	f000 fdaa 	bl	8105600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	681b      	ldr	r3, [r3, #0]
 8104ab0:	691b      	ldr	r3, [r3, #16]
 8104ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104aba:	d10e      	bne.n	8104ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	681b      	ldr	r3, [r3, #0]
 8104ac0:	68db      	ldr	r3, [r3, #12]
 8104ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104ac6:	2b80      	cmp	r3, #128	; 0x80
 8104ac8:	d107      	bne.n	8104ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8104ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104ad4:	6878      	ldr	r0, [r7, #4]
 8104ad6:	f000 fd9d 	bl	8105614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	691b      	ldr	r3, [r3, #16]
 8104ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104ae4:	2b40      	cmp	r3, #64	; 0x40
 8104ae6:	d10e      	bne.n	8104b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	681b      	ldr	r3, [r3, #0]
 8104aec:	68db      	ldr	r3, [r3, #12]
 8104aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104af2:	2b40      	cmp	r3, #64	; 0x40
 8104af4:	d107      	bne.n	8104b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8104afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104b00:	6878      	ldr	r0, [r7, #4]
 8104b02:	f000 f953 	bl	8104dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	691b      	ldr	r3, [r3, #16]
 8104b0c:	f003 0320 	and.w	r3, r3, #32
 8104b10:	2b20      	cmp	r3, #32
 8104b12:	d10e      	bne.n	8104b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	68db      	ldr	r3, [r3, #12]
 8104b1a:	f003 0320 	and.w	r3, r3, #32
 8104b1e:	2b20      	cmp	r3, #32
 8104b20:	d107      	bne.n	8104b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	f06f 0220 	mvn.w	r2, #32
 8104b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8104b2c:	6878      	ldr	r0, [r7, #4]
 8104b2e:	f000 fd5d 	bl	81055ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8104b32:	bf00      	nop
 8104b34:	3708      	adds	r7, #8
 8104b36:	46bd      	mov	sp, r7
 8104b38:	bd80      	pop	{r7, pc}
	...

08104b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8104b3c:	b580      	push	{r7, lr}
 8104b3e:	b084      	sub	sp, #16
 8104b40:	af00      	add	r7, sp, #0
 8104b42:	60f8      	str	r0, [r7, #12]
 8104b44:	60b9      	str	r1, [r7, #8]
 8104b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104b4e:	2b01      	cmp	r3, #1
 8104b50:	d101      	bne.n	8104b56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8104b52:	2302      	movs	r3, #2
 8104b54:	e0fd      	b.n	8104d52 <HAL_TIM_PWM_ConfigChannel+0x216>
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	2201      	movs	r2, #1
 8104b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8104b5e:	687b      	ldr	r3, [r7, #4]
 8104b60:	2b14      	cmp	r3, #20
 8104b62:	f200 80f0 	bhi.w	8104d46 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8104b66:	a201      	add	r2, pc, #4	; (adr r2, 8104b6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8104b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b6c:	08104bc1 	.word	0x08104bc1
 8104b70:	08104d47 	.word	0x08104d47
 8104b74:	08104d47 	.word	0x08104d47
 8104b78:	08104d47 	.word	0x08104d47
 8104b7c:	08104c01 	.word	0x08104c01
 8104b80:	08104d47 	.word	0x08104d47
 8104b84:	08104d47 	.word	0x08104d47
 8104b88:	08104d47 	.word	0x08104d47
 8104b8c:	08104c43 	.word	0x08104c43
 8104b90:	08104d47 	.word	0x08104d47
 8104b94:	08104d47 	.word	0x08104d47
 8104b98:	08104d47 	.word	0x08104d47
 8104b9c:	08104c83 	.word	0x08104c83
 8104ba0:	08104d47 	.word	0x08104d47
 8104ba4:	08104d47 	.word	0x08104d47
 8104ba8:	08104d47 	.word	0x08104d47
 8104bac:	08104cc5 	.word	0x08104cc5
 8104bb0:	08104d47 	.word	0x08104d47
 8104bb4:	08104d47 	.word	0x08104d47
 8104bb8:	08104d47 	.word	0x08104d47
 8104bbc:	08104d05 	.word	0x08104d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	68b9      	ldr	r1, [r7, #8]
 8104bc6:	4618      	mov	r0, r3
 8104bc8:	f000 f994 	bl	8104ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8104bcc:	68fb      	ldr	r3, [r7, #12]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	699a      	ldr	r2, [r3, #24]
 8104bd2:	68fb      	ldr	r3, [r7, #12]
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	f042 0208 	orr.w	r2, r2, #8
 8104bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104bdc:	68fb      	ldr	r3, [r7, #12]
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	699a      	ldr	r2, [r3, #24]
 8104be2:	68fb      	ldr	r3, [r7, #12]
 8104be4:	681b      	ldr	r3, [r3, #0]
 8104be6:	f022 0204 	bic.w	r2, r2, #4
 8104bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104bec:	68fb      	ldr	r3, [r7, #12]
 8104bee:	681b      	ldr	r3, [r3, #0]
 8104bf0:	6999      	ldr	r1, [r3, #24]
 8104bf2:	68bb      	ldr	r3, [r7, #8]
 8104bf4:	691a      	ldr	r2, [r3, #16]
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	681b      	ldr	r3, [r3, #0]
 8104bfa:	430a      	orrs	r2, r1
 8104bfc:	619a      	str	r2, [r3, #24]
      break;
 8104bfe:	e0a3      	b.n	8104d48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104c00:	68fb      	ldr	r3, [r7, #12]
 8104c02:	681b      	ldr	r3, [r3, #0]
 8104c04:	68b9      	ldr	r1, [r7, #8]
 8104c06:	4618      	mov	r0, r3
 8104c08:	f000 fa04 	bl	8105014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	699a      	ldr	r2, [r3, #24]
 8104c12:	68fb      	ldr	r3, [r7, #12]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8104c1c:	68fb      	ldr	r3, [r7, #12]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	699a      	ldr	r2, [r3, #24]
 8104c22:	68fb      	ldr	r3, [r7, #12]
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8104c2c:	68fb      	ldr	r3, [r7, #12]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	6999      	ldr	r1, [r3, #24]
 8104c32:	68bb      	ldr	r3, [r7, #8]
 8104c34:	691b      	ldr	r3, [r3, #16]
 8104c36:	021a      	lsls	r2, r3, #8
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	430a      	orrs	r2, r1
 8104c3e:	619a      	str	r2, [r3, #24]
      break;
 8104c40:	e082      	b.n	8104d48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8104c42:	68fb      	ldr	r3, [r7, #12]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	68b9      	ldr	r1, [r7, #8]
 8104c48:	4618      	mov	r0, r3
 8104c4a:	f000 fa6d 	bl	8105128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8104c4e:	68fb      	ldr	r3, [r7, #12]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	69da      	ldr	r2, [r3, #28]
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	f042 0208 	orr.w	r2, r2, #8
 8104c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8104c5e:	68fb      	ldr	r3, [r7, #12]
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	69da      	ldr	r2, [r3, #28]
 8104c64:	68fb      	ldr	r3, [r7, #12]
 8104c66:	681b      	ldr	r3, [r3, #0]
 8104c68:	f022 0204 	bic.w	r2, r2, #4
 8104c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8104c6e:	68fb      	ldr	r3, [r7, #12]
 8104c70:	681b      	ldr	r3, [r3, #0]
 8104c72:	69d9      	ldr	r1, [r3, #28]
 8104c74:	68bb      	ldr	r3, [r7, #8]
 8104c76:	691a      	ldr	r2, [r3, #16]
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	430a      	orrs	r2, r1
 8104c7e:	61da      	str	r2, [r3, #28]
      break;
 8104c80:	e062      	b.n	8104d48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8104c82:	68fb      	ldr	r3, [r7, #12]
 8104c84:	681b      	ldr	r3, [r3, #0]
 8104c86:	68b9      	ldr	r1, [r7, #8]
 8104c88:	4618      	mov	r0, r3
 8104c8a:	f000 fad3 	bl	8105234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8104c8e:	68fb      	ldr	r3, [r7, #12]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	69da      	ldr	r2, [r3, #28]
 8104c94:	68fb      	ldr	r3, [r7, #12]
 8104c96:	681b      	ldr	r3, [r3, #0]
 8104c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8104c9e:	68fb      	ldr	r3, [r7, #12]
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	69da      	ldr	r2, [r3, #28]
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	69d9      	ldr	r1, [r3, #28]
 8104cb4:	68bb      	ldr	r3, [r7, #8]
 8104cb6:	691b      	ldr	r3, [r3, #16]
 8104cb8:	021a      	lsls	r2, r3, #8
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	430a      	orrs	r2, r1
 8104cc0:	61da      	str	r2, [r3, #28]
      break;
 8104cc2:	e041      	b.n	8104d48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104cc4:	68fb      	ldr	r3, [r7, #12]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	68b9      	ldr	r1, [r7, #8]
 8104cca:	4618      	mov	r0, r3
 8104ccc:	f000 fb1a 	bl	8105304 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104cd0:	68fb      	ldr	r3, [r7, #12]
 8104cd2:	681b      	ldr	r3, [r3, #0]
 8104cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104cd6:	68fb      	ldr	r3, [r7, #12]
 8104cd8:	681b      	ldr	r3, [r3, #0]
 8104cda:	f042 0208 	orr.w	r2, r2, #8
 8104cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104ce0:	68fb      	ldr	r3, [r7, #12]
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104ce6:	68fb      	ldr	r3, [r7, #12]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	f022 0204 	bic.w	r2, r2, #4
 8104cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104cf6:	68bb      	ldr	r3, [r7, #8]
 8104cf8:	691a      	ldr	r2, [r3, #16]
 8104cfa:	68fb      	ldr	r3, [r7, #12]
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	430a      	orrs	r2, r1
 8104d00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104d02:	e021      	b.n	8104d48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104d04:	68fb      	ldr	r3, [r7, #12]
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	68b9      	ldr	r1, [r7, #8]
 8104d0a:	4618      	mov	r0, r3
 8104d0c:	f000 fb5c 	bl	81053c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104d16:	68fb      	ldr	r3, [r7, #12]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8104d20:	68fb      	ldr	r3, [r7, #12]
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104d26:	68fb      	ldr	r3, [r7, #12]
 8104d28:	681b      	ldr	r3, [r3, #0]
 8104d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8104d30:	68fb      	ldr	r3, [r7, #12]
 8104d32:	681b      	ldr	r3, [r3, #0]
 8104d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104d36:	68bb      	ldr	r3, [r7, #8]
 8104d38:	691b      	ldr	r3, [r3, #16]
 8104d3a:	021a      	lsls	r2, r3, #8
 8104d3c:	68fb      	ldr	r3, [r7, #12]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	430a      	orrs	r2, r1
 8104d42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104d44:	e000      	b.n	8104d48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8104d46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	2200      	movs	r2, #0
 8104d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104d50:	2300      	movs	r3, #0
}
 8104d52:	4618      	mov	r0, r3
 8104d54:	3710      	adds	r7, #16
 8104d56:	46bd      	mov	sp, r7
 8104d58:	bd80      	pop	{r7, pc}
 8104d5a:	bf00      	nop

08104d5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104d5c:	b480      	push	{r7}
 8104d5e:	b083      	sub	sp, #12
 8104d60:	af00      	add	r7, sp, #0
 8104d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8104d64:	bf00      	nop
 8104d66:	370c      	adds	r7, #12
 8104d68:	46bd      	mov	sp, r7
 8104d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d6e:	4770      	bx	lr

08104d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104d70:	b480      	push	{r7}
 8104d72:	b083      	sub	sp, #12
 8104d74:	af00      	add	r7, sp, #0
 8104d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8104d78:	bf00      	nop
 8104d7a:	370c      	adds	r7, #12
 8104d7c:	46bd      	mov	sp, r7
 8104d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d82:	4770      	bx	lr

08104d84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8104d84:	b480      	push	{r7}
 8104d86:	b083      	sub	sp, #12
 8104d88:	af00      	add	r7, sp, #0
 8104d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8104d8c:	bf00      	nop
 8104d8e:	370c      	adds	r7, #12
 8104d90:	46bd      	mov	sp, r7
 8104d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d96:	4770      	bx	lr

08104d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8104d98:	b480      	push	{r7}
 8104d9a:	b083      	sub	sp, #12
 8104d9c:	af00      	add	r7, sp, #0
 8104d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8104da0:	bf00      	nop
 8104da2:	370c      	adds	r7, #12
 8104da4:	46bd      	mov	sp, r7
 8104da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104daa:	4770      	bx	lr

08104dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8104dac:	b480      	push	{r7}
 8104dae:	b083      	sub	sp, #12
 8104db0:	af00      	add	r7, sp, #0
 8104db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8104db4:	bf00      	nop
 8104db6:	370c      	adds	r7, #12
 8104db8:	46bd      	mov	sp, r7
 8104dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dbe:	4770      	bx	lr

08104dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8104dc0:	b480      	push	{r7}
 8104dc2:	b085      	sub	sp, #20
 8104dc4:	af00      	add	r7, sp, #0
 8104dc6:	6078      	str	r0, [r7, #4]
 8104dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	4a40      	ldr	r2, [pc, #256]	; (8104ed4 <TIM_Base_SetConfig+0x114>)
 8104dd4:	4293      	cmp	r3, r2
 8104dd6:	d013      	beq.n	8104e00 <TIM_Base_SetConfig+0x40>
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104dde:	d00f      	beq.n	8104e00 <TIM_Base_SetConfig+0x40>
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	4a3d      	ldr	r2, [pc, #244]	; (8104ed8 <TIM_Base_SetConfig+0x118>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d00b      	beq.n	8104e00 <TIM_Base_SetConfig+0x40>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	4a3c      	ldr	r2, [pc, #240]	; (8104edc <TIM_Base_SetConfig+0x11c>)
 8104dec:	4293      	cmp	r3, r2
 8104dee:	d007      	beq.n	8104e00 <TIM_Base_SetConfig+0x40>
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	4a3b      	ldr	r2, [pc, #236]	; (8104ee0 <TIM_Base_SetConfig+0x120>)
 8104df4:	4293      	cmp	r3, r2
 8104df6:	d003      	beq.n	8104e00 <TIM_Base_SetConfig+0x40>
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	4a3a      	ldr	r2, [pc, #232]	; (8104ee4 <TIM_Base_SetConfig+0x124>)
 8104dfc:	4293      	cmp	r3, r2
 8104dfe:	d108      	bne.n	8104e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8104e00:	68fb      	ldr	r3, [r7, #12]
 8104e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8104e08:	683b      	ldr	r3, [r7, #0]
 8104e0a:	685b      	ldr	r3, [r3, #4]
 8104e0c:	68fa      	ldr	r2, [r7, #12]
 8104e0e:	4313      	orrs	r3, r2
 8104e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	4a2f      	ldr	r2, [pc, #188]	; (8104ed4 <TIM_Base_SetConfig+0x114>)
 8104e16:	4293      	cmp	r3, r2
 8104e18:	d01f      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104e20:	d01b      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	4a2c      	ldr	r2, [pc, #176]	; (8104ed8 <TIM_Base_SetConfig+0x118>)
 8104e26:	4293      	cmp	r3, r2
 8104e28:	d017      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	4a2b      	ldr	r2, [pc, #172]	; (8104edc <TIM_Base_SetConfig+0x11c>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d013      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	4a2a      	ldr	r2, [pc, #168]	; (8104ee0 <TIM_Base_SetConfig+0x120>)
 8104e36:	4293      	cmp	r3, r2
 8104e38:	d00f      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	4a29      	ldr	r2, [pc, #164]	; (8104ee4 <TIM_Base_SetConfig+0x124>)
 8104e3e:	4293      	cmp	r3, r2
 8104e40:	d00b      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	4a28      	ldr	r2, [pc, #160]	; (8104ee8 <TIM_Base_SetConfig+0x128>)
 8104e46:	4293      	cmp	r3, r2
 8104e48:	d007      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	4a27      	ldr	r2, [pc, #156]	; (8104eec <TIM_Base_SetConfig+0x12c>)
 8104e4e:	4293      	cmp	r3, r2
 8104e50:	d003      	beq.n	8104e5a <TIM_Base_SetConfig+0x9a>
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	4a26      	ldr	r2, [pc, #152]	; (8104ef0 <TIM_Base_SetConfig+0x130>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d108      	bne.n	8104e6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104e5a:	68fb      	ldr	r3, [r7, #12]
 8104e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8104e62:	683b      	ldr	r3, [r7, #0]
 8104e64:	68db      	ldr	r3, [r3, #12]
 8104e66:	68fa      	ldr	r2, [r7, #12]
 8104e68:	4313      	orrs	r3, r2
 8104e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104e6c:	68fb      	ldr	r3, [r7, #12]
 8104e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8104e72:	683b      	ldr	r3, [r7, #0]
 8104e74:	695b      	ldr	r3, [r3, #20]
 8104e76:	4313      	orrs	r3, r2
 8104e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	68fa      	ldr	r2, [r7, #12]
 8104e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104e80:	683b      	ldr	r3, [r7, #0]
 8104e82:	689a      	ldr	r2, [r3, #8]
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104e88:	683b      	ldr	r3, [r7, #0]
 8104e8a:	681a      	ldr	r2, [r3, #0]
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	4a10      	ldr	r2, [pc, #64]	; (8104ed4 <TIM_Base_SetConfig+0x114>)
 8104e94:	4293      	cmp	r3, r2
 8104e96:	d00f      	beq.n	8104eb8 <TIM_Base_SetConfig+0xf8>
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	4a12      	ldr	r2, [pc, #72]	; (8104ee4 <TIM_Base_SetConfig+0x124>)
 8104e9c:	4293      	cmp	r3, r2
 8104e9e:	d00b      	beq.n	8104eb8 <TIM_Base_SetConfig+0xf8>
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	4a11      	ldr	r2, [pc, #68]	; (8104ee8 <TIM_Base_SetConfig+0x128>)
 8104ea4:	4293      	cmp	r3, r2
 8104ea6:	d007      	beq.n	8104eb8 <TIM_Base_SetConfig+0xf8>
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	4a10      	ldr	r2, [pc, #64]	; (8104eec <TIM_Base_SetConfig+0x12c>)
 8104eac:	4293      	cmp	r3, r2
 8104eae:	d003      	beq.n	8104eb8 <TIM_Base_SetConfig+0xf8>
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	4a0f      	ldr	r2, [pc, #60]	; (8104ef0 <TIM_Base_SetConfig+0x130>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d103      	bne.n	8104ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104eb8:	683b      	ldr	r3, [r7, #0]
 8104eba:	691a      	ldr	r2, [r3, #16]
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	2201      	movs	r2, #1
 8104ec4:	615a      	str	r2, [r3, #20]
}
 8104ec6:	bf00      	nop
 8104ec8:	3714      	adds	r7, #20
 8104eca:	46bd      	mov	sp, r7
 8104ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ed0:	4770      	bx	lr
 8104ed2:	bf00      	nop
 8104ed4:	40010000 	.word	0x40010000
 8104ed8:	40000400 	.word	0x40000400
 8104edc:	40000800 	.word	0x40000800
 8104ee0:	40000c00 	.word	0x40000c00
 8104ee4:	40010400 	.word	0x40010400
 8104ee8:	40014000 	.word	0x40014000
 8104eec:	40014400 	.word	0x40014400
 8104ef0:	40014800 	.word	0x40014800

08104ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104ef4:	b480      	push	{r7}
 8104ef6:	b087      	sub	sp, #28
 8104ef8:	af00      	add	r7, sp, #0
 8104efa:	6078      	str	r0, [r7, #4]
 8104efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	6a1b      	ldr	r3, [r3, #32]
 8104f02:	f023 0201 	bic.w	r2, r3, #1
 8104f06:	687b      	ldr	r3, [r7, #4]
 8104f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	6a1b      	ldr	r3, [r3, #32]
 8104f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	685b      	ldr	r3, [r3, #4]
 8104f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	699b      	ldr	r3, [r3, #24]
 8104f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8104f28:	68fb      	ldr	r3, [r7, #12]
 8104f2a:	f023 0303 	bic.w	r3, r3, #3
 8104f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104f30:	683b      	ldr	r3, [r7, #0]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	68fa      	ldr	r2, [r7, #12]
 8104f36:	4313      	orrs	r3, r2
 8104f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8104f3a:	697b      	ldr	r3, [r7, #20]
 8104f3c:	f023 0302 	bic.w	r3, r3, #2
 8104f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8104f42:	683b      	ldr	r3, [r7, #0]
 8104f44:	689b      	ldr	r3, [r3, #8]
 8104f46:	697a      	ldr	r2, [r7, #20]
 8104f48:	4313      	orrs	r3, r2
 8104f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	4a2c      	ldr	r2, [pc, #176]	; (8105000 <TIM_OC1_SetConfig+0x10c>)
 8104f50:	4293      	cmp	r3, r2
 8104f52:	d00f      	beq.n	8104f74 <TIM_OC1_SetConfig+0x80>
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	4a2b      	ldr	r2, [pc, #172]	; (8105004 <TIM_OC1_SetConfig+0x110>)
 8104f58:	4293      	cmp	r3, r2
 8104f5a:	d00b      	beq.n	8104f74 <TIM_OC1_SetConfig+0x80>
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	4a2a      	ldr	r2, [pc, #168]	; (8105008 <TIM_OC1_SetConfig+0x114>)
 8104f60:	4293      	cmp	r3, r2
 8104f62:	d007      	beq.n	8104f74 <TIM_OC1_SetConfig+0x80>
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	4a29      	ldr	r2, [pc, #164]	; (810500c <TIM_OC1_SetConfig+0x118>)
 8104f68:	4293      	cmp	r3, r2
 8104f6a:	d003      	beq.n	8104f74 <TIM_OC1_SetConfig+0x80>
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	4a28      	ldr	r2, [pc, #160]	; (8105010 <TIM_OC1_SetConfig+0x11c>)
 8104f70:	4293      	cmp	r3, r2
 8104f72:	d10c      	bne.n	8104f8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8104f74:	697b      	ldr	r3, [r7, #20]
 8104f76:	f023 0308 	bic.w	r3, r3, #8
 8104f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8104f7c:	683b      	ldr	r3, [r7, #0]
 8104f7e:	68db      	ldr	r3, [r3, #12]
 8104f80:	697a      	ldr	r2, [r7, #20]
 8104f82:	4313      	orrs	r3, r2
 8104f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8104f86:	697b      	ldr	r3, [r7, #20]
 8104f88:	f023 0304 	bic.w	r3, r3, #4
 8104f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	4a1b      	ldr	r2, [pc, #108]	; (8105000 <TIM_OC1_SetConfig+0x10c>)
 8104f92:	4293      	cmp	r3, r2
 8104f94:	d00f      	beq.n	8104fb6 <TIM_OC1_SetConfig+0xc2>
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	4a1a      	ldr	r2, [pc, #104]	; (8105004 <TIM_OC1_SetConfig+0x110>)
 8104f9a:	4293      	cmp	r3, r2
 8104f9c:	d00b      	beq.n	8104fb6 <TIM_OC1_SetConfig+0xc2>
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	4a19      	ldr	r2, [pc, #100]	; (8105008 <TIM_OC1_SetConfig+0x114>)
 8104fa2:	4293      	cmp	r3, r2
 8104fa4:	d007      	beq.n	8104fb6 <TIM_OC1_SetConfig+0xc2>
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	4a18      	ldr	r2, [pc, #96]	; (810500c <TIM_OC1_SetConfig+0x118>)
 8104faa:	4293      	cmp	r3, r2
 8104fac:	d003      	beq.n	8104fb6 <TIM_OC1_SetConfig+0xc2>
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	4a17      	ldr	r2, [pc, #92]	; (8105010 <TIM_OC1_SetConfig+0x11c>)
 8104fb2:	4293      	cmp	r3, r2
 8104fb4:	d111      	bne.n	8104fda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8104fb6:	693b      	ldr	r3, [r7, #16]
 8104fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8104fbe:	693b      	ldr	r3, [r7, #16]
 8104fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8104fc6:	683b      	ldr	r3, [r7, #0]
 8104fc8:	695b      	ldr	r3, [r3, #20]
 8104fca:	693a      	ldr	r2, [r7, #16]
 8104fcc:	4313      	orrs	r3, r2
 8104fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8104fd0:	683b      	ldr	r3, [r7, #0]
 8104fd2:	699b      	ldr	r3, [r3, #24]
 8104fd4:	693a      	ldr	r2, [r7, #16]
 8104fd6:	4313      	orrs	r3, r2
 8104fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	693a      	ldr	r2, [r7, #16]
 8104fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	68fa      	ldr	r2, [r7, #12]
 8104fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8104fe6:	683b      	ldr	r3, [r7, #0]
 8104fe8:	685a      	ldr	r2, [r3, #4]
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	697a      	ldr	r2, [r7, #20]
 8104ff2:	621a      	str	r2, [r3, #32]
}
 8104ff4:	bf00      	nop
 8104ff6:	371c      	adds	r7, #28
 8104ff8:	46bd      	mov	sp, r7
 8104ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ffe:	4770      	bx	lr
 8105000:	40010000 	.word	0x40010000
 8105004:	40010400 	.word	0x40010400
 8105008:	40014000 	.word	0x40014000
 810500c:	40014400 	.word	0x40014400
 8105010:	40014800 	.word	0x40014800

08105014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105014:	b480      	push	{r7}
 8105016:	b087      	sub	sp, #28
 8105018:	af00      	add	r7, sp, #0
 810501a:	6078      	str	r0, [r7, #4]
 810501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	6a1b      	ldr	r3, [r3, #32]
 8105022:	f023 0210 	bic.w	r2, r3, #16
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	6a1b      	ldr	r3, [r3, #32]
 810502e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	685b      	ldr	r3, [r3, #4]
 8105034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	699b      	ldr	r3, [r3, #24]
 810503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810503c:	68fb      	ldr	r3, [r7, #12]
 810503e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105048:	68fb      	ldr	r3, [r7, #12]
 810504a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810504e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105050:	683b      	ldr	r3, [r7, #0]
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	021b      	lsls	r3, r3, #8
 8105056:	68fa      	ldr	r2, [r7, #12]
 8105058:	4313      	orrs	r3, r2
 810505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810505c:	697b      	ldr	r3, [r7, #20]
 810505e:	f023 0320 	bic.w	r3, r3, #32
 8105062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105064:	683b      	ldr	r3, [r7, #0]
 8105066:	689b      	ldr	r3, [r3, #8]
 8105068:	011b      	lsls	r3, r3, #4
 810506a:	697a      	ldr	r2, [r7, #20]
 810506c:	4313      	orrs	r3, r2
 810506e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	4a28      	ldr	r2, [pc, #160]	; (8105114 <TIM_OC2_SetConfig+0x100>)
 8105074:	4293      	cmp	r3, r2
 8105076:	d003      	beq.n	8105080 <TIM_OC2_SetConfig+0x6c>
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	4a27      	ldr	r2, [pc, #156]	; (8105118 <TIM_OC2_SetConfig+0x104>)
 810507c:	4293      	cmp	r3, r2
 810507e:	d10d      	bne.n	810509c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105080:	697b      	ldr	r3, [r7, #20]
 8105082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105088:	683b      	ldr	r3, [r7, #0]
 810508a:	68db      	ldr	r3, [r3, #12]
 810508c:	011b      	lsls	r3, r3, #4
 810508e:	697a      	ldr	r2, [r7, #20]
 8105090:	4313      	orrs	r3, r2
 8105092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105094:	697b      	ldr	r3, [r7, #20]
 8105096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810509a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	4a1d      	ldr	r2, [pc, #116]	; (8105114 <TIM_OC2_SetConfig+0x100>)
 81050a0:	4293      	cmp	r3, r2
 81050a2:	d00f      	beq.n	81050c4 <TIM_OC2_SetConfig+0xb0>
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	4a1c      	ldr	r2, [pc, #112]	; (8105118 <TIM_OC2_SetConfig+0x104>)
 81050a8:	4293      	cmp	r3, r2
 81050aa:	d00b      	beq.n	81050c4 <TIM_OC2_SetConfig+0xb0>
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	4a1b      	ldr	r2, [pc, #108]	; (810511c <TIM_OC2_SetConfig+0x108>)
 81050b0:	4293      	cmp	r3, r2
 81050b2:	d007      	beq.n	81050c4 <TIM_OC2_SetConfig+0xb0>
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	4a1a      	ldr	r2, [pc, #104]	; (8105120 <TIM_OC2_SetConfig+0x10c>)
 81050b8:	4293      	cmp	r3, r2
 81050ba:	d003      	beq.n	81050c4 <TIM_OC2_SetConfig+0xb0>
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	4a19      	ldr	r2, [pc, #100]	; (8105124 <TIM_OC2_SetConfig+0x110>)
 81050c0:	4293      	cmp	r3, r2
 81050c2:	d113      	bne.n	81050ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81050c4:	693b      	ldr	r3, [r7, #16]
 81050c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81050ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81050cc:	693b      	ldr	r3, [r7, #16]
 81050ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81050d4:	683b      	ldr	r3, [r7, #0]
 81050d6:	695b      	ldr	r3, [r3, #20]
 81050d8:	009b      	lsls	r3, r3, #2
 81050da:	693a      	ldr	r2, [r7, #16]
 81050dc:	4313      	orrs	r3, r2
 81050de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81050e0:	683b      	ldr	r3, [r7, #0]
 81050e2:	699b      	ldr	r3, [r3, #24]
 81050e4:	009b      	lsls	r3, r3, #2
 81050e6:	693a      	ldr	r2, [r7, #16]
 81050e8:	4313      	orrs	r3, r2
 81050ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	693a      	ldr	r2, [r7, #16]
 81050f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	68fa      	ldr	r2, [r7, #12]
 81050f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81050f8:	683b      	ldr	r3, [r7, #0]
 81050fa:	685a      	ldr	r2, [r3, #4]
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	697a      	ldr	r2, [r7, #20]
 8105104:	621a      	str	r2, [r3, #32]
}
 8105106:	bf00      	nop
 8105108:	371c      	adds	r7, #28
 810510a:	46bd      	mov	sp, r7
 810510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105110:	4770      	bx	lr
 8105112:	bf00      	nop
 8105114:	40010000 	.word	0x40010000
 8105118:	40010400 	.word	0x40010400
 810511c:	40014000 	.word	0x40014000
 8105120:	40014400 	.word	0x40014400
 8105124:	40014800 	.word	0x40014800

08105128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105128:	b480      	push	{r7}
 810512a:	b087      	sub	sp, #28
 810512c:	af00      	add	r7, sp, #0
 810512e:	6078      	str	r0, [r7, #4]
 8105130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	6a1b      	ldr	r3, [r3, #32]
 8105136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	6a1b      	ldr	r3, [r3, #32]
 8105142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	685b      	ldr	r3, [r3, #4]
 8105148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	69db      	ldr	r3, [r3, #28]
 810514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	f023 0303 	bic.w	r3, r3, #3
 810515e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105160:	683b      	ldr	r3, [r7, #0]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	68fa      	ldr	r2, [r7, #12]
 8105166:	4313      	orrs	r3, r2
 8105168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810516a:	697b      	ldr	r3, [r7, #20]
 810516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105172:	683b      	ldr	r3, [r7, #0]
 8105174:	689b      	ldr	r3, [r3, #8]
 8105176:	021b      	lsls	r3, r3, #8
 8105178:	697a      	ldr	r2, [r7, #20]
 810517a:	4313      	orrs	r3, r2
 810517c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	4a27      	ldr	r2, [pc, #156]	; (8105220 <TIM_OC3_SetConfig+0xf8>)
 8105182:	4293      	cmp	r3, r2
 8105184:	d003      	beq.n	810518e <TIM_OC3_SetConfig+0x66>
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	4a26      	ldr	r2, [pc, #152]	; (8105224 <TIM_OC3_SetConfig+0xfc>)
 810518a:	4293      	cmp	r3, r2
 810518c:	d10d      	bne.n	81051aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810518e:	697b      	ldr	r3, [r7, #20]
 8105190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105196:	683b      	ldr	r3, [r7, #0]
 8105198:	68db      	ldr	r3, [r3, #12]
 810519a:	021b      	lsls	r3, r3, #8
 810519c:	697a      	ldr	r2, [r7, #20]
 810519e:	4313      	orrs	r3, r2
 81051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81051a2:	697b      	ldr	r3, [r7, #20]
 81051a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81051a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	4a1c      	ldr	r2, [pc, #112]	; (8105220 <TIM_OC3_SetConfig+0xf8>)
 81051ae:	4293      	cmp	r3, r2
 81051b0:	d00f      	beq.n	81051d2 <TIM_OC3_SetConfig+0xaa>
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	4a1b      	ldr	r2, [pc, #108]	; (8105224 <TIM_OC3_SetConfig+0xfc>)
 81051b6:	4293      	cmp	r3, r2
 81051b8:	d00b      	beq.n	81051d2 <TIM_OC3_SetConfig+0xaa>
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	4a1a      	ldr	r2, [pc, #104]	; (8105228 <TIM_OC3_SetConfig+0x100>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d007      	beq.n	81051d2 <TIM_OC3_SetConfig+0xaa>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	4a19      	ldr	r2, [pc, #100]	; (810522c <TIM_OC3_SetConfig+0x104>)
 81051c6:	4293      	cmp	r3, r2
 81051c8:	d003      	beq.n	81051d2 <TIM_OC3_SetConfig+0xaa>
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	4a18      	ldr	r2, [pc, #96]	; (8105230 <TIM_OC3_SetConfig+0x108>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d113      	bne.n	81051fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81051d2:	693b      	ldr	r3, [r7, #16]
 81051d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81051da:	693b      	ldr	r3, [r7, #16]
 81051dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81051e2:	683b      	ldr	r3, [r7, #0]
 81051e4:	695b      	ldr	r3, [r3, #20]
 81051e6:	011b      	lsls	r3, r3, #4
 81051e8:	693a      	ldr	r2, [r7, #16]
 81051ea:	4313      	orrs	r3, r2
 81051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81051ee:	683b      	ldr	r3, [r7, #0]
 81051f0:	699b      	ldr	r3, [r3, #24]
 81051f2:	011b      	lsls	r3, r3, #4
 81051f4:	693a      	ldr	r2, [r7, #16]
 81051f6:	4313      	orrs	r3, r2
 81051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	693a      	ldr	r2, [r7, #16]
 81051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	68fa      	ldr	r2, [r7, #12]
 8105204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105206:	683b      	ldr	r3, [r7, #0]
 8105208:	685a      	ldr	r2, [r3, #4]
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	697a      	ldr	r2, [r7, #20]
 8105212:	621a      	str	r2, [r3, #32]
}
 8105214:	bf00      	nop
 8105216:	371c      	adds	r7, #28
 8105218:	46bd      	mov	sp, r7
 810521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810521e:	4770      	bx	lr
 8105220:	40010000 	.word	0x40010000
 8105224:	40010400 	.word	0x40010400
 8105228:	40014000 	.word	0x40014000
 810522c:	40014400 	.word	0x40014400
 8105230:	40014800 	.word	0x40014800

08105234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105234:	b480      	push	{r7}
 8105236:	b087      	sub	sp, #28
 8105238:	af00      	add	r7, sp, #0
 810523a:	6078      	str	r0, [r7, #4]
 810523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	6a1b      	ldr	r3, [r3, #32]
 8105242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	6a1b      	ldr	r3, [r3, #32]
 810524e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	685b      	ldr	r3, [r3, #4]
 8105254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	69db      	ldr	r3, [r3, #28]
 810525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810525c:	68fb      	ldr	r3, [r7, #12]
 810525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105264:	68fb      	ldr	r3, [r7, #12]
 8105266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810526a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810526c:	683b      	ldr	r3, [r7, #0]
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	021b      	lsls	r3, r3, #8
 8105272:	68fa      	ldr	r2, [r7, #12]
 8105274:	4313      	orrs	r3, r2
 8105276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8105278:	693b      	ldr	r3, [r7, #16]
 810527a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810527e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105280:	683b      	ldr	r3, [r7, #0]
 8105282:	689b      	ldr	r3, [r3, #8]
 8105284:	031b      	lsls	r3, r3, #12
 8105286:	693a      	ldr	r2, [r7, #16]
 8105288:	4313      	orrs	r3, r2
 810528a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	4a18      	ldr	r2, [pc, #96]	; (81052f0 <TIM_OC4_SetConfig+0xbc>)
 8105290:	4293      	cmp	r3, r2
 8105292:	d00f      	beq.n	81052b4 <TIM_OC4_SetConfig+0x80>
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	4a17      	ldr	r2, [pc, #92]	; (81052f4 <TIM_OC4_SetConfig+0xc0>)
 8105298:	4293      	cmp	r3, r2
 810529a:	d00b      	beq.n	81052b4 <TIM_OC4_SetConfig+0x80>
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	4a16      	ldr	r2, [pc, #88]	; (81052f8 <TIM_OC4_SetConfig+0xc4>)
 81052a0:	4293      	cmp	r3, r2
 81052a2:	d007      	beq.n	81052b4 <TIM_OC4_SetConfig+0x80>
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	4a15      	ldr	r2, [pc, #84]	; (81052fc <TIM_OC4_SetConfig+0xc8>)
 81052a8:	4293      	cmp	r3, r2
 81052aa:	d003      	beq.n	81052b4 <TIM_OC4_SetConfig+0x80>
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	4a14      	ldr	r2, [pc, #80]	; (8105300 <TIM_OC4_SetConfig+0xcc>)
 81052b0:	4293      	cmp	r3, r2
 81052b2:	d109      	bne.n	81052c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81052b4:	697b      	ldr	r3, [r7, #20]
 81052b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81052ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81052bc:	683b      	ldr	r3, [r7, #0]
 81052be:	695b      	ldr	r3, [r3, #20]
 81052c0:	019b      	lsls	r3, r3, #6
 81052c2:	697a      	ldr	r2, [r7, #20]
 81052c4:	4313      	orrs	r3, r2
 81052c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	697a      	ldr	r2, [r7, #20]
 81052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	68fa      	ldr	r2, [r7, #12]
 81052d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81052d4:	683b      	ldr	r3, [r7, #0]
 81052d6:	685a      	ldr	r2, [r3, #4]
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	693a      	ldr	r2, [r7, #16]
 81052e0:	621a      	str	r2, [r3, #32]
}
 81052e2:	bf00      	nop
 81052e4:	371c      	adds	r7, #28
 81052e6:	46bd      	mov	sp, r7
 81052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052ec:	4770      	bx	lr
 81052ee:	bf00      	nop
 81052f0:	40010000 	.word	0x40010000
 81052f4:	40010400 	.word	0x40010400
 81052f8:	40014000 	.word	0x40014000
 81052fc:	40014400 	.word	0x40014400
 8105300:	40014800 	.word	0x40014800

08105304 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8105304:	b480      	push	{r7}
 8105306:	b087      	sub	sp, #28
 8105308:	af00      	add	r7, sp, #0
 810530a:	6078      	str	r0, [r7, #4]
 810530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	6a1b      	ldr	r3, [r3, #32]
 8105312:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	6a1b      	ldr	r3, [r3, #32]
 810531e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	685b      	ldr	r3, [r3, #4]
 8105324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105334:	683b      	ldr	r3, [r7, #0]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	68fa      	ldr	r2, [r7, #12]
 810533a:	4313      	orrs	r3, r2
 810533c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810533e:	693b      	ldr	r3, [r7, #16]
 8105340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8105344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8105346:	683b      	ldr	r3, [r7, #0]
 8105348:	689b      	ldr	r3, [r3, #8]
 810534a:	041b      	lsls	r3, r3, #16
 810534c:	693a      	ldr	r2, [r7, #16]
 810534e:	4313      	orrs	r3, r2
 8105350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	4a17      	ldr	r2, [pc, #92]	; (81053b4 <TIM_OC5_SetConfig+0xb0>)
 8105356:	4293      	cmp	r3, r2
 8105358:	d00f      	beq.n	810537a <TIM_OC5_SetConfig+0x76>
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	4a16      	ldr	r2, [pc, #88]	; (81053b8 <TIM_OC5_SetConfig+0xb4>)
 810535e:	4293      	cmp	r3, r2
 8105360:	d00b      	beq.n	810537a <TIM_OC5_SetConfig+0x76>
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	4a15      	ldr	r2, [pc, #84]	; (81053bc <TIM_OC5_SetConfig+0xb8>)
 8105366:	4293      	cmp	r3, r2
 8105368:	d007      	beq.n	810537a <TIM_OC5_SetConfig+0x76>
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	4a14      	ldr	r2, [pc, #80]	; (81053c0 <TIM_OC5_SetConfig+0xbc>)
 810536e:	4293      	cmp	r3, r2
 8105370:	d003      	beq.n	810537a <TIM_OC5_SetConfig+0x76>
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	4a13      	ldr	r2, [pc, #76]	; (81053c4 <TIM_OC5_SetConfig+0xc0>)
 8105376:	4293      	cmp	r3, r2
 8105378:	d109      	bne.n	810538e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810537a:	697b      	ldr	r3, [r7, #20]
 810537c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105380:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8105382:	683b      	ldr	r3, [r7, #0]
 8105384:	695b      	ldr	r3, [r3, #20]
 8105386:	021b      	lsls	r3, r3, #8
 8105388:	697a      	ldr	r2, [r7, #20]
 810538a:	4313      	orrs	r3, r2
 810538c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	697a      	ldr	r2, [r7, #20]
 8105392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	68fa      	ldr	r2, [r7, #12]
 8105398:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810539a:	683b      	ldr	r3, [r7, #0]
 810539c:	685a      	ldr	r2, [r3, #4]
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	693a      	ldr	r2, [r7, #16]
 81053a6:	621a      	str	r2, [r3, #32]
}
 81053a8:	bf00      	nop
 81053aa:	371c      	adds	r7, #28
 81053ac:	46bd      	mov	sp, r7
 81053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053b2:	4770      	bx	lr
 81053b4:	40010000 	.word	0x40010000
 81053b8:	40010400 	.word	0x40010400
 81053bc:	40014000 	.word	0x40014000
 81053c0:	40014400 	.word	0x40014400
 81053c4:	40014800 	.word	0x40014800

081053c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81053c8:	b480      	push	{r7}
 81053ca:	b087      	sub	sp, #28
 81053cc:	af00      	add	r7, sp, #0
 81053ce:	6078      	str	r0, [r7, #4]
 81053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	6a1b      	ldr	r3, [r3, #32]
 81053d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	6a1b      	ldr	r3, [r3, #32]
 81053e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81053e4:	687b      	ldr	r3, [r7, #4]
 81053e6:	685b      	ldr	r3, [r3, #4]
 81053e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81053f0:	68fb      	ldr	r3, [r7, #12]
 81053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81053f8:	683b      	ldr	r3, [r7, #0]
 81053fa:	681b      	ldr	r3, [r3, #0]
 81053fc:	021b      	lsls	r3, r3, #8
 81053fe:	68fa      	ldr	r2, [r7, #12]
 8105400:	4313      	orrs	r3, r2
 8105402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8105404:	693b      	ldr	r3, [r7, #16]
 8105406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810540a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810540c:	683b      	ldr	r3, [r7, #0]
 810540e:	689b      	ldr	r3, [r3, #8]
 8105410:	051b      	lsls	r3, r3, #20
 8105412:	693a      	ldr	r2, [r7, #16]
 8105414:	4313      	orrs	r3, r2
 8105416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	4a18      	ldr	r2, [pc, #96]	; (810547c <TIM_OC6_SetConfig+0xb4>)
 810541c:	4293      	cmp	r3, r2
 810541e:	d00f      	beq.n	8105440 <TIM_OC6_SetConfig+0x78>
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	4a17      	ldr	r2, [pc, #92]	; (8105480 <TIM_OC6_SetConfig+0xb8>)
 8105424:	4293      	cmp	r3, r2
 8105426:	d00b      	beq.n	8105440 <TIM_OC6_SetConfig+0x78>
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	4a16      	ldr	r2, [pc, #88]	; (8105484 <TIM_OC6_SetConfig+0xbc>)
 810542c:	4293      	cmp	r3, r2
 810542e:	d007      	beq.n	8105440 <TIM_OC6_SetConfig+0x78>
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	4a15      	ldr	r2, [pc, #84]	; (8105488 <TIM_OC6_SetConfig+0xc0>)
 8105434:	4293      	cmp	r3, r2
 8105436:	d003      	beq.n	8105440 <TIM_OC6_SetConfig+0x78>
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	4a14      	ldr	r2, [pc, #80]	; (810548c <TIM_OC6_SetConfig+0xc4>)
 810543c:	4293      	cmp	r3, r2
 810543e:	d109      	bne.n	8105454 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8105440:	697b      	ldr	r3, [r7, #20]
 8105442:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8105446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105448:	683b      	ldr	r3, [r7, #0]
 810544a:	695b      	ldr	r3, [r3, #20]
 810544c:	029b      	lsls	r3, r3, #10
 810544e:	697a      	ldr	r2, [r7, #20]
 8105450:	4313      	orrs	r3, r2
 8105452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	697a      	ldr	r2, [r7, #20]
 8105458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	68fa      	ldr	r2, [r7, #12]
 810545e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8105460:	683b      	ldr	r3, [r7, #0]
 8105462:	685a      	ldr	r2, [r3, #4]
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	693a      	ldr	r2, [r7, #16]
 810546c:	621a      	str	r2, [r3, #32]
}
 810546e:	bf00      	nop
 8105470:	371c      	adds	r7, #28
 8105472:	46bd      	mov	sp, r7
 8105474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105478:	4770      	bx	lr
 810547a:	bf00      	nop
 810547c:	40010000 	.word	0x40010000
 8105480:	40010400 	.word	0x40010400
 8105484:	40014000 	.word	0x40014000
 8105488:	40014400 	.word	0x40014400
 810548c:	40014800 	.word	0x40014800

08105490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8105490:	b480      	push	{r7}
 8105492:	b087      	sub	sp, #28
 8105494:	af00      	add	r7, sp, #0
 8105496:	60f8      	str	r0, [r7, #12]
 8105498:	60b9      	str	r1, [r7, #8]
 810549a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810549c:	68bb      	ldr	r3, [r7, #8]
 810549e:	f003 031f 	and.w	r3, r3, #31
 81054a2:	2201      	movs	r2, #1
 81054a4:	fa02 f303 	lsl.w	r3, r2, r3
 81054a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81054aa:	68fb      	ldr	r3, [r7, #12]
 81054ac:	6a1a      	ldr	r2, [r3, #32]
 81054ae:	697b      	ldr	r3, [r7, #20]
 81054b0:	43db      	mvns	r3, r3
 81054b2:	401a      	ands	r2, r3
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81054b8:	68fb      	ldr	r3, [r7, #12]
 81054ba:	6a1a      	ldr	r2, [r3, #32]
 81054bc:	68bb      	ldr	r3, [r7, #8]
 81054be:	f003 031f 	and.w	r3, r3, #31
 81054c2:	6879      	ldr	r1, [r7, #4]
 81054c4:	fa01 f303 	lsl.w	r3, r1, r3
 81054c8:	431a      	orrs	r2, r3
 81054ca:	68fb      	ldr	r3, [r7, #12]
 81054cc:	621a      	str	r2, [r3, #32]
}
 81054ce:	bf00      	nop
 81054d0:	371c      	adds	r7, #28
 81054d2:	46bd      	mov	sp, r7
 81054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054d8:	4770      	bx	lr
	...

081054dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81054dc:	b480      	push	{r7}
 81054de:	b085      	sub	sp, #20
 81054e0:	af00      	add	r7, sp, #0
 81054e2:	6078      	str	r0, [r7, #4]
 81054e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81054ec:	2b01      	cmp	r3, #1
 81054ee:	d101      	bne.n	81054f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81054f0:	2302      	movs	r3, #2
 81054f2:	e068      	b.n	81055c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	2201      	movs	r2, #1
 81054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	2202      	movs	r2, #2
 8105500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	685b      	ldr	r3, [r3, #4]
 810550a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	689b      	ldr	r3, [r3, #8]
 8105512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	4a2e      	ldr	r2, [pc, #184]	; (81055d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810551a:	4293      	cmp	r3, r2
 810551c:	d004      	beq.n	8105528 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	681b      	ldr	r3, [r3, #0]
 8105522:	4a2d      	ldr	r2, [pc, #180]	; (81055d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8105524:	4293      	cmp	r3, r2
 8105526:	d108      	bne.n	810553a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105528:	68fb      	ldr	r3, [r7, #12]
 810552a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810552e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105530:	683b      	ldr	r3, [r7, #0]
 8105532:	685b      	ldr	r3, [r3, #4]
 8105534:	68fa      	ldr	r2, [r7, #12]
 8105536:	4313      	orrs	r3, r2
 8105538:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810553a:	68fb      	ldr	r3, [r7, #12]
 810553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105540:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105542:	683b      	ldr	r3, [r7, #0]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	68fa      	ldr	r2, [r7, #12]
 8105548:	4313      	orrs	r3, r2
 810554a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	68fa      	ldr	r2, [r7, #12]
 8105552:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	4a1e      	ldr	r2, [pc, #120]	; (81055d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810555a:	4293      	cmp	r3, r2
 810555c:	d01d      	beq.n	810559a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105566:	d018      	beq.n	810559a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	4a1b      	ldr	r2, [pc, #108]	; (81055dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810556e:	4293      	cmp	r3, r2
 8105570:	d013      	beq.n	810559a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	681b      	ldr	r3, [r3, #0]
 8105576:	4a1a      	ldr	r2, [pc, #104]	; (81055e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105578:	4293      	cmp	r3, r2
 810557a:	d00e      	beq.n	810559a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	4a18      	ldr	r2, [pc, #96]	; (81055e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8105582:	4293      	cmp	r3, r2
 8105584:	d009      	beq.n	810559a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	4a13      	ldr	r2, [pc, #76]	; (81055d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810558c:	4293      	cmp	r3, r2
 810558e:	d004      	beq.n	810559a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	4a14      	ldr	r2, [pc, #80]	; (81055e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105596:	4293      	cmp	r3, r2
 8105598:	d10c      	bne.n	81055b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810559a:	68bb      	ldr	r3, [r7, #8]
 810559c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81055a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81055a2:	683b      	ldr	r3, [r7, #0]
 81055a4:	689b      	ldr	r3, [r3, #8]
 81055a6:	68ba      	ldr	r2, [r7, #8]
 81055a8:	4313      	orrs	r3, r2
 81055aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	68ba      	ldr	r2, [r7, #8]
 81055b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	2201      	movs	r2, #1
 81055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	2200      	movs	r2, #0
 81055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81055c4:	2300      	movs	r3, #0
}
 81055c6:	4618      	mov	r0, r3
 81055c8:	3714      	adds	r7, #20
 81055ca:	46bd      	mov	sp, r7
 81055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055d0:	4770      	bx	lr
 81055d2:	bf00      	nop
 81055d4:	40010000 	.word	0x40010000
 81055d8:	40010400 	.word	0x40010400
 81055dc:	40000400 	.word	0x40000400
 81055e0:	40000800 	.word	0x40000800
 81055e4:	40000c00 	.word	0x40000c00
 81055e8:	40001800 	.word	0x40001800

081055ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81055ec:	b480      	push	{r7}
 81055ee:	b083      	sub	sp, #12
 81055f0:	af00      	add	r7, sp, #0
 81055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81055f4:	bf00      	nop
 81055f6:	370c      	adds	r7, #12
 81055f8:	46bd      	mov	sp, r7
 81055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055fe:	4770      	bx	lr

08105600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8105600:	b480      	push	{r7}
 8105602:	b083      	sub	sp, #12
 8105604:	af00      	add	r7, sp, #0
 8105606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8105608:	bf00      	nop
 810560a:	370c      	adds	r7, #12
 810560c:	46bd      	mov	sp, r7
 810560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105612:	4770      	bx	lr

08105614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8105614:	b480      	push	{r7}
 8105616:	b083      	sub	sp, #12
 8105618:	af00      	add	r7, sp, #0
 810561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810561c:	bf00      	nop
 810561e:	370c      	adds	r7, #12
 8105620:	46bd      	mov	sp, r7
 8105622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105626:	4770      	bx	lr

08105628 <writeRegister>:
	MPU9250_Deactivate();
}

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 8105628:	b084      	sub	sp, #16
 810562a:	b580      	push	{r7, lr}
 810562c:	b086      	sub	sp, #24
 810562e:	af04      	add	r7, sp, #16
 8105630:	f107 0c10 	add.w	ip, r7, #16
 8105634:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Write(&data, subAddress, 1);
	uint8_t _buffer[1] = {data};
 8105638:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 810563c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&mpuToInit.i2cID, mpuToInit.deviceAddress, (uint16_t)subAddress, 1, _buffer, 1, 10);
 810563e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8105642:	b299      	uxth	r1, r3
 8105644:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8105648:	b29a      	uxth	r2, r3
 810564a:	230a      	movs	r3, #10
 810564c:	9302      	str	r3, [sp, #8]
 810564e:	2301      	movs	r3, #1
 8105650:	9301      	str	r3, [sp, #4]
 8105652:	1d3b      	adds	r3, r7, #4
 8105654:	9300      	str	r3, [sp, #0]
 8105656:	2301      	movs	r3, #1
 8105658:	f107 0010 	add.w	r0, r7, #16
 810565c:	f7fc ff30 	bl	81024c0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8105660:	200a      	movs	r0, #10
 8105662:	f7fc fb1f 	bl	8101ca4 <HAL_Delay>
}
 8105666:	bf00      	nop
 8105668:	3708      	adds	r7, #8
 810566a:	46bd      	mov	sp, r7
 810566c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8105670:	b004      	add	sp, #16
 8105672:	4770      	bx	lr

08105674 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8105674:	b084      	sub	sp, #16
 8105676:	b580      	push	{r7, lr}
 8105678:	b084      	sub	sp, #16
 810567a:	af04      	add	r7, sp, #16
 810567c:	f107 0c08 	add.w	ip, r7, #8
 8105680:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	MPU_SPI_Read(dest, subAddress, count);

	HAL_I2C_Mem_Read(&mpuToInit.i2cID, mpuToInit.deviceAddress, subAddress, 1, dest, count, 10);
 8105684:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8105688:	b299      	uxth	r1, r3
 810568a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 810568e:	b29a      	uxth	r2, r3
 8105690:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8105694:	b29b      	uxth	r3, r3
 8105696:	200a      	movs	r0, #10
 8105698:	9002      	str	r0, [sp, #8]
 810569a:	9301      	str	r3, [sp, #4]
 810569c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810569e:	9300      	str	r3, [sp, #0]
 81056a0:	2301      	movs	r3, #1
 81056a2:	f107 0008 	add.w	r0, r7, #8
 81056a6:	f7fd f81f 	bl	81026e8 <HAL_I2C_Mem_Read>
}
 81056aa:	bf00      	nop
 81056ac:	46bd      	mov	sp, r7
 81056ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81056b2:	b004      	add	sp, #16
 81056b4:	4770      	bx	lr

081056b6 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t data)
{
 81056b6:	b084      	sub	sp, #16
 81056b8:	b5b0      	push	{r4, r5, r7, lr}
 81056ba:	b092      	sub	sp, #72	; 0x48
 81056bc:	af12      	add	r7, sp, #72	; 0x48
 81056be:	f107 0410 	add.w	r4, r7, #16
 81056c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for write
	writeRegister(mpuToInit, I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 81056c6:	2325      	movs	r3, #37	; 0x25
 81056c8:	220c      	movs	r2, #12
 81056ca:	9211      	str	r2, [sp, #68]	; 0x44
 81056cc:	9310      	str	r3, [sp, #64]	; 0x40
 81056ce:	466d      	mov	r5, sp
 81056d0:	f107 0420 	add.w	r4, r7, #32
 81056d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81056de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81056e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81056e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81056e8:	f107 0310 	add.w	r3, r7, #16
 81056ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81056ee:	f7ff ff9b 	bl	8105628 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 81056f2:	2226      	movs	r2, #38	; 0x26
 81056f4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81056f8:	9311      	str	r3, [sp, #68]	; 0x44
 81056fa:	9210      	str	r2, [sp, #64]	; 0x40
 81056fc:	466d      	mov	r5, sp
 81056fe:	f107 0420 	add.w	r4, r7, #32
 8105702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810570a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810570c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810570e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105712:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105716:	f107 0310 	add.w	r3, r7, #16
 810571a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810571c:	f7ff ff84 	bl	8105628 <writeRegister>

	// store the data for write
	writeRegister(mpuToInit, I2C_SLV0_DO,data);
 8105720:	2263      	movs	r2, #99	; 0x63
 8105722:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8105726:	9311      	str	r3, [sp, #68]	; 0x44
 8105728:	9210      	str	r2, [sp, #64]	; 0x40
 810572a:	466d      	mov	r5, sp
 810572c:	f107 0420 	add.w	r4, r7, #32
 8105730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810573a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810573c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105740:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105744:	f107 0310 	add.w	r3, r7, #16
 8105748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810574a:	f7ff ff6d 	bl	8105628 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 810574e:	2227      	movs	r2, #39	; 0x27
 8105750:	2380      	movs	r3, #128	; 0x80
 8105752:	f043 0301 	orr.w	r3, r3, #1
 8105756:	b2db      	uxtb	r3, r3
 8105758:	9311      	str	r3, [sp, #68]	; 0x44
 810575a:	9210      	str	r2, [sp, #64]	; 0x40
 810575c:	466d      	mov	r5, sp
 810575e:	f107 0420 	add.w	r4, r7, #32
 8105762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810576a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810576c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810576e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105772:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105776:	f107 0310 	add.w	r3, r7, #16
 810577a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810577c:	f7ff ff54 	bl	8105628 <writeRegister>
}
 8105780:	bf00      	nop
 8105782:	46bd      	mov	sp, r7
 8105784:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105788:	b004      	add	sp, #16
 810578a:	4770      	bx	lr

0810578c <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(tMPU9250 mpuToInit, uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 810578c:	b084      	sub	sp, #16
 810578e:	b5b0      	push	{r4, r5, r7, lr}
 8105790:	b094      	sub	sp, #80	; 0x50
 8105792:	af14      	add	r7, sp, #80	; 0x50
 8105794:	f107 0410 	add.w	r4, r7, #16
 8105798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// set slave 0 to the AK8963 and set for read
	writeRegister(mpuToInit, I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 810579c:	2225      	movs	r2, #37	; 0x25
 810579e:	210c      	movs	r1, #12
 81057a0:	2380      	movs	r3, #128	; 0x80
 81057a2:	430b      	orrs	r3, r1
 81057a4:	b2db      	uxtb	r3, r3
 81057a6:	9311      	str	r3, [sp, #68]	; 0x44
 81057a8:	9210      	str	r2, [sp, #64]	; 0x40
 81057aa:	466d      	mov	r5, sp
 81057ac:	f107 0420 	add.w	r4, r7, #32
 81057b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81057c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81057c4:	f107 0310 	add.w	r3, r7, #16
 81057c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81057ca:	f7ff ff2d 	bl	8105628 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(mpuToInit, I2C_SLV0_REG,subAddress);
 81057ce:	2226      	movs	r2, #38	; 0x26
 81057d0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81057d4:	9311      	str	r3, [sp, #68]	; 0x44
 81057d6:	9210      	str	r2, [sp, #64]	; 0x40
 81057d8:	466d      	mov	r5, sp
 81057da:	f107 0420 	add.w	r4, r7, #32
 81057de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81057e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81057ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81057ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81057f2:	f107 0310 	add.w	r3, r7, #16
 81057f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81057f8:	f7ff ff16 	bl	8105628 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(mpuToInit, I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 81057fc:	2227      	movs	r2, #39	; 0x27
 81057fe:	2180      	movs	r1, #128	; 0x80
 8105800:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8105804:	430b      	orrs	r3, r1
 8105806:	b2db      	uxtb	r3, r3
 8105808:	9311      	str	r3, [sp, #68]	; 0x44
 810580a:	9210      	str	r2, [sp, #64]	; 0x40
 810580c:	466d      	mov	r5, sp
 810580e:	f107 0420 	add.w	r4, r7, #32
 8105812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810581a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810581c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810581e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105822:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105826:	f107 0310 	add.w	r3, r7, #16
 810582a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810582c:	f7ff fefc 	bl	8105628 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8105830:	2001      	movs	r0, #1
 8105832:	f7fc fa37 	bl	8101ca4 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(mpuToInit, EXT_SENS_DATA_00,count,dest);
 8105836:	2249      	movs	r2, #73	; 0x49
 8105838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810583a:	9312      	str	r3, [sp, #72]	; 0x48
 810583c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8105840:	9311      	str	r3, [sp, #68]	; 0x44
 8105842:	9210      	str	r2, [sp, #64]	; 0x40
 8105844:	466d      	mov	r5, sp
 8105846:	f107 0420 	add.w	r4, r7, #32
 810584a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810584c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810584e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810585a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810585e:	f107 0310 	add.w	r3, r7, #16
 8105862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105864:	f7ff ff06 	bl	8105674 <readRegisters>
}
 8105868:	bf00      	nop
 810586a:	46bd      	mov	sp, r7
 810586c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105870:	b004      	add	sp, #16
 8105872:	4770      	bx	lr

08105874 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(tMPU9250 mpuToInit)
{
 8105874:	b084      	sub	sp, #16
 8105876:	b5b0      	push	{r4, r5, r7, lr}
 8105878:	b094      	sub	sp, #80	; 0x50
 810587a:	af14      	add	r7, sp, #80	; 0x50
 810587c:	f107 0410 	add.w	r4, r7, #16
 8105880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readRegisters(mpuToInit, WHO_AM_I,1,_buffer);
 8105884:	2375      	movs	r3, #117	; 0x75
 8105886:	4a0f      	ldr	r2, [pc, #60]	; (81058c4 <whoAmI+0x50>)
 8105888:	9212      	str	r2, [sp, #72]	; 0x48
 810588a:	2201      	movs	r2, #1
 810588c:	9211      	str	r2, [sp, #68]	; 0x44
 810588e:	9310      	str	r3, [sp, #64]	; 0x40
 8105890:	466d      	mov	r5, sp
 8105892:	f107 0420 	add.w	r4, r7, #32
 8105896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810589a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810589c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810589e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81058a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81058aa:	f107 0310 	add.w	r3, r7, #16
 81058ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81058b0:	f7ff fee0 	bl	8105674 <readRegisters>

	// return the register value
	return _buffer[0];
 81058b4:	4b03      	ldr	r3, [pc, #12]	; (81058c4 <whoAmI+0x50>)
 81058b6:	781b      	ldrb	r3, [r3, #0]
}
 81058b8:	4618      	mov	r0, r3
 81058ba:	46bd      	mov	sp, r7
 81058bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81058c0:	b004      	add	sp, #16
 81058c2:	4770      	bx	lr
 81058c4:	100002bc 	.word	0x100002bc

081058c8 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(tMPU9250 mpuToInit)
{
 81058c8:	b084      	sub	sp, #16
 81058ca:	b5b0      	push	{r4, r5, r7, lr}
 81058cc:	b094      	sub	sp, #80	; 0x50
 81058ce:	af14      	add	r7, sp, #80	; 0x50
 81058d0:	f107 0410 	add.w	r4, r7, #16
 81058d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// read the WHO AM I register
	readAK8963Registers(mpuToInit, AK8963_WHO_AM_I,1,_buffer);
 81058d8:	2300      	movs	r3, #0
 81058da:	4a0f      	ldr	r2, [pc, #60]	; (8105918 <whoAmIAK8963+0x50>)
 81058dc:	9212      	str	r2, [sp, #72]	; 0x48
 81058de:	2201      	movs	r2, #1
 81058e0:	9211      	str	r2, [sp, #68]	; 0x44
 81058e2:	9310      	str	r3, [sp, #64]	; 0x40
 81058e4:	466d      	mov	r5, sp
 81058e6:	f107 0420 	add.w	r4, r7, #32
 81058ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81058f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81058f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81058fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81058fe:	f107 0310 	add.w	r3, r7, #16
 8105902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105904:	f7ff ff42 	bl	810578c <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8105908:	4b03      	ldr	r3, [pc, #12]	; (8105918 <whoAmIAK8963+0x50>)
 810590a:	781b      	ldrb	r3, [r3, #0]
}
 810590c:	4618      	mov	r0, r3
 810590e:	46bd      	mov	sp, r7
 8105910:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105914:	b004      	add	sp, #16
 8105916:	4770      	bx	lr
 8105918:	100002bc 	.word	0x100002bc

0810591c <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(tMPU9250 mpuToInit)
{
 810591c:	b084      	sub	sp, #16
 810591e:	b5b0      	push	{r4, r5, r7, lr}
 8105920:	b096      	sub	sp, #88	; 0x58
 8105922:	af14      	add	r7, sp, #80	; 0x50
 8105924:	f107 0418 	add.w	r4, r7, #24
 8105928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1, CLOCK_SEL_PLL);
 810592c:	236b      	movs	r3, #107	; 0x6b
 810592e:	2201      	movs	r2, #1
 8105930:	9211      	str	r2, [sp, #68]	; 0x44
 8105932:	9310      	str	r3, [sp, #64]	; 0x40
 8105934:	466d      	mov	r5, sp
 8105936:	f107 0428 	add.w	r4, r7, #40	; 0x28
 810593a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810593c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810593e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105946:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 810594a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810594e:	f107 0318 	add.w	r3, r7, #24
 8105952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105954:	f7ff fe68 	bl	8105628 <writeRegister>
	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL, I2C_MST_EN);
 8105958:	236a      	movs	r3, #106	; 0x6a
 810595a:	2220      	movs	r2, #32
 810595c:	9211      	str	r2, [sp, #68]	; 0x44
 810595e:	9310      	str	r3, [sp, #64]	; 0x40
 8105960:	466d      	mov	r5, sp
 8105962:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810596a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810596c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810596e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105972:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105976:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810597a:	f107 0318 	add.w	r3, r7, #24
 810597e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105980:	f7ff fe52 	bl	8105628 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL, I2C_MST_CLK);
 8105984:	2324      	movs	r3, #36	; 0x24
 8105986:	220d      	movs	r2, #13
 8105988:	9211      	str	r2, [sp, #68]	; 0x44
 810598a:	9310      	str	r3, [sp, #64]	; 0x40
 810598c:	466d      	mov	r5, sp
 810598e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810599a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810599c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810599e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81059a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81059a6:	f107 0318 	add.w	r3, r7, #24
 81059aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81059ac:	f7ff fe3c 	bl	8105628 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 81059b0:	230a      	movs	r3, #10
 81059b2:	2200      	movs	r2, #0
 81059b4:	9211      	str	r2, [sp, #68]	; 0x44
 81059b6:	9310      	str	r3, [sp, #64]	; 0x40
 81059b8:	466d      	mov	r5, sp
 81059ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81059be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81059ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81059d2:	f107 0318 	add.w	r3, r7, #24
 81059d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81059d8:	f7ff fe6d 	bl	81056b6 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(mpuToInit, PWR_MGMNT_1,PWR_RESET);
 81059dc:	236b      	movs	r3, #107	; 0x6b
 81059de:	2280      	movs	r2, #128	; 0x80
 81059e0:	9211      	str	r2, [sp, #68]	; 0x44
 81059e2:	9310      	str	r3, [sp, #64]	; 0x40
 81059e4:	466d      	mov	r5, sp
 81059e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 81059ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81059f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81059f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81059fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81059fe:	f107 0318 	add.w	r3, r7, #24
 8105a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105a04:	f7ff fe10 	bl	8105628 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8105a08:	200a      	movs	r0, #10
 8105a0a:	f7fc f94b 	bl	8101ca4 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(mpuToInit, AK8963_CNTL2,AK8963_RESET);
 8105a0e:	230b      	movs	r3, #11
 8105a10:	2201      	movs	r2, #1
 8105a12:	9211      	str	r2, [sp, #68]	; 0x44
 8105a14:	9310      	str	r3, [sp, #64]	; 0x40
 8105a16:	466d      	mov	r5, sp
 8105a18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105a2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105a30:	f107 0318 	add.w	r3, r7, #24
 8105a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105a36:	f7ff fe3e 	bl	81056b6 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 8105a3a:	236b      	movs	r3, #107	; 0x6b
 8105a3c:	2201      	movs	r2, #1
 8105a3e:	9211      	str	r2, [sp, #68]	; 0x44
 8105a40:	9310      	str	r3, [sp, #64]	; 0x40
 8105a42:	466d      	mov	r5, sp
 8105a44:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105a58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105a5c:	f107 0318 	add.w	r3, r7, #24
 8105a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105a62:	f7ff fde1 	bl	8105628 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI(mpuToInit);
 8105a66:	466d      	mov	r5, sp
 8105a68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105a7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105a80:	f107 0318 	add.w	r3, r7, #24
 8105a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105a86:	f7ff fef5 	bl	8105874 <whoAmI>
 8105a8a:	4603      	mov	r3, r0
 8105a8c:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8105a8e:	79fb      	ldrb	r3, [r7, #7]
 8105a90:	2b71      	cmp	r3, #113	; 0x71
 8105a92:	d004      	beq.n	8105a9e <MPU9250_Init+0x182>
 8105a94:	79fb      	ldrb	r3, [r7, #7]
 8105a96:	2b73      	cmp	r3, #115	; 0x73
 8105a98:	d001      	beq.n	8105a9e <MPU9250_Init+0x182>
	{
		return 1;
 8105a9a:	2301      	movs	r3, #1
 8105a9c:	e171      	b.n	8105d82 <MPU9250_Init+0x466>
	}

	// enable accelerometer and gyro
	writeRegister(mpuToInit, PWR_MGMNT_2,SEN_ENABLE);
 8105a9e:	236c      	movs	r3, #108	; 0x6c
 8105aa0:	2200      	movs	r2, #0
 8105aa2:	9211      	str	r2, [sp, #68]	; 0x44
 8105aa4:	9310      	str	r3, [sp, #64]	; 0x40
 8105aa6:	466d      	mov	r5, sp
 8105aa8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105ab8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105abc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105ac0:	f107 0318 	add.w	r3, r7, #24
 8105ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105ac6:	f7ff fdaf 	bl	8105628 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(mpuToInit, ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8105aca:	231c      	movs	r3, #28
 8105acc:	2200      	movs	r2, #0
 8105ace:	9211      	str	r2, [sp, #68]	; 0x44
 8105ad0:	9310      	str	r3, [sp, #64]	; 0x40
 8105ad2:	466d      	mov	r5, sp
 8105ad4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105ae4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105ae8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105aec:	f107 0318 	add.w	r3, r7, #24
 8105af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105af2:	f7ff fd99 	bl	8105628 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(mpuToInit, GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8105af6:	231b      	movs	r3, #27
 8105af8:	2200      	movs	r2, #0
 8105afa:	9211      	str	r2, [sp, #68]	; 0x44
 8105afc:	9310      	str	r3, [sp, #64]	; 0x40
 8105afe:	466d      	mov	r5, sp
 8105b00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105b14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105b18:	f107 0318 	add.w	r3, r7, #24
 8105b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105b1e:	f7ff fd83 	bl	8105628 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(mpuToInit, ACCEL_CONFIG2,DLPF_184);
 8105b22:	231d      	movs	r3, #29
 8105b24:	2201      	movs	r2, #1
 8105b26:	9211      	str	r2, [sp, #68]	; 0x44
 8105b28:	9310      	str	r3, [sp, #64]	; 0x40
 8105b2a:	466d      	mov	r5, sp
 8105b2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105b40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105b44:	f107 0318 	add.w	r3, r7, #24
 8105b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105b4a:	f7ff fd6d 	bl	8105628 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(mpuToInit, CONFIG,DLPF_184);
 8105b4e:	231a      	movs	r3, #26
 8105b50:	2201      	movs	r2, #1
 8105b52:	9211      	str	r2, [sp, #68]	; 0x44
 8105b54:	9310      	str	r3, [sp, #64]	; 0x40
 8105b56:	466d      	mov	r5, sp
 8105b58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105b6c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105b70:	f107 0318 	add.w	r3, r7, #24
 8105b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105b76:	f7ff fd57 	bl	8105628 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(mpuToInit, SMPDIV,0x00);
 8105b7a:	2319      	movs	r3, #25
 8105b7c:	2200      	movs	r2, #0
 8105b7e:	9211      	str	r2, [sp, #68]	; 0x44
 8105b80:	9310      	str	r3, [sp, #64]	; 0x40
 8105b82:	466d      	mov	r5, sp
 8105b84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105b94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105b98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105b9c:	f107 0318 	add.w	r3, r7, #24
 8105ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105ba2:	f7ff fd41 	bl	8105628 <writeRegister>

	// enable I2C master mode
	writeRegister(mpuToInit, USER_CTRL,I2C_MST_EN);
 8105ba6:	236a      	movs	r3, #106	; 0x6a
 8105ba8:	2220      	movs	r2, #32
 8105baa:	9211      	str	r2, [sp, #68]	; 0x44
 8105bac:	9310      	str	r3, [sp, #64]	; 0x40
 8105bae:	466d      	mov	r5, sp
 8105bb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105bc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105bc4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105bc8:	f107 0318 	add.w	r3, r7, #24
 8105bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105bce:	f7ff fd2b 	bl	8105628 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(mpuToInit, I2C_MST_CTRL,I2C_MST_CLK);
 8105bd2:	2324      	movs	r3, #36	; 0x24
 8105bd4:	220d      	movs	r2, #13
 8105bd6:	9211      	str	r2, [sp, #68]	; 0x44
 8105bd8:	9310      	str	r3, [sp, #64]	; 0x40
 8105bda:	466d      	mov	r5, sp
 8105bdc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105bec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105bf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105bf4:	f107 0318 	add.w	r3, r7, #24
 8105bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105bfa:	f7ff fd15 	bl	8105628 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963(mpuToInit) != 0x48 )
 8105bfe:	466d      	mov	r5, sp
 8105c00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105c14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105c18:	f107 0318 	add.w	r3, r7, #24
 8105c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105c1e:	f7ff fe53 	bl	81058c8 <whoAmIAK8963>
 8105c22:	4603      	mov	r3, r0
 8105c24:	2b48      	cmp	r3, #72	; 0x48
 8105c26:	d001      	beq.n	8105c2c <MPU9250_Init+0x310>
	{
		return 1;
 8105c28:	2301      	movs	r3, #1
 8105c2a:	e0aa      	b.n	8105d82 <MPU9250_Init+0x466>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8105c2c:	230a      	movs	r3, #10
 8105c2e:	2200      	movs	r2, #0
 8105c30:	9211      	str	r2, [sp, #68]	; 0x44
 8105c32:	9310      	str	r3, [sp, #64]	; 0x40
 8105c34:	466d      	mov	r5, sp
 8105c36:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105c4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105c4e:	f107 0318 	add.w	r3, r7, #24
 8105c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105c54:	f7ff fd2f 	bl	81056b6 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8105c58:	2064      	movs	r0, #100	; 0x64
 8105c5a:	f7fc f823 	bl	8101ca4 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_FUSE_ROM);
 8105c5e:	230a      	movs	r3, #10
 8105c60:	220f      	movs	r2, #15
 8105c62:	9211      	str	r2, [sp, #68]	; 0x44
 8105c64:	9310      	str	r3, [sp, #64]	; 0x40
 8105c66:	466d      	mov	r5, sp
 8105c68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105c78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105c7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105c80:	f107 0318 	add.w	r3, r7, #24
 8105c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105c86:	f7ff fd16 	bl	81056b6 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8105c8a:	2064      	movs	r0, #100	; 0x64
 8105c8c:	f7fc f80a 	bl	8101ca4 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(mpuToInit, AK8963_ASA, 3, _mag_adjust);
 8105c90:	2310      	movs	r3, #16
 8105c92:	4a3f      	ldr	r2, [pc, #252]	; (8105d90 <MPU9250_Init+0x474>)
 8105c94:	9212      	str	r2, [sp, #72]	; 0x48
 8105c96:	2203      	movs	r2, #3
 8105c98:	9211      	str	r2, [sp, #68]	; 0x44
 8105c9a:	9310      	str	r3, [sp, #64]	; 0x40
 8105c9c:	466d      	mov	r5, sp
 8105c9e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105cae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105cb2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105cb6:	f107 0318 	add.w	r3, r7, #24
 8105cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105cbc:	f7ff fd66 	bl	810578c <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_PWR_DOWN);
 8105cc0:	230a      	movs	r3, #10
 8105cc2:	2200      	movs	r2, #0
 8105cc4:	9211      	str	r2, [sp, #68]	; 0x44
 8105cc6:	9310      	str	r3, [sp, #64]	; 0x40
 8105cc8:	466d      	mov	r5, sp
 8105cca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105cda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105cde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105ce2:	f107 0318 	add.w	r3, r7, #24
 8105ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105ce8:	f7ff fce5 	bl	81056b6 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8105cec:	2064      	movs	r0, #100	; 0x64
 8105cee:	f7fb ffd9 	bl	8101ca4 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(mpuToInit, AK8963_CNTL1,AK8963_CNT_MEAS2);
 8105cf2:	230a      	movs	r3, #10
 8105cf4:	2216      	movs	r2, #22
 8105cf6:	9211      	str	r2, [sp, #68]	; 0x44
 8105cf8:	9310      	str	r3, [sp, #64]	; 0x40
 8105cfa:	466d      	mov	r5, sp
 8105cfc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105d10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105d14:	f107 0318 	add.w	r3, r7, #24
 8105d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105d1a:	f7ff fccc 	bl	81056b6 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8105d1e:	2064      	movs	r0, #100	; 0x64
 8105d20:	f7fb ffc0 	bl	8101ca4 <HAL_Delay>

	// select clock source to gyro
	writeRegister(mpuToInit, PWR_MGMNT_1,CLOCK_SEL_PLL);
 8105d24:	236b      	movs	r3, #107	; 0x6b
 8105d26:	2201      	movs	r2, #1
 8105d28:	9211      	str	r2, [sp, #68]	; 0x44
 8105d2a:	9310      	str	r3, [sp, #64]	; 0x40
 8105d2c:	466d      	mov	r5, sp
 8105d2e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105d42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105d46:	f107 0318 	add.w	r3, r7, #24
 8105d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105d4c:	f7ff fc6c 	bl	8105628 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(mpuToInit, AK8963_HXL,7,_buffer);
 8105d50:	2303      	movs	r3, #3
 8105d52:	4a10      	ldr	r2, [pc, #64]	; (8105d94 <MPU9250_Init+0x478>)
 8105d54:	9212      	str	r2, [sp, #72]	; 0x48
 8105d56:	2207      	movs	r2, #7
 8105d58:	9211      	str	r2, [sp, #68]	; 0x44
 8105d5a:	9310      	str	r3, [sp, #64]	; 0x40
 8105d5c:	466d      	mov	r5, sp
 8105d5e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105d72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105d76:	f107 0318 	add.w	r3, r7, #24
 8105d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105d7c:	f7ff fd06 	bl	810578c <readAK8963Registers>

	// successful init, return 0
	return 0;
 8105d80:	2300      	movs	r3, #0
}
 8105d82:	4618      	mov	r0, r3
 8105d84:	3708      	adds	r7, #8
 8105d86:	46bd      	mov	sp, r7
 8105d88:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105d8c:	b004      	add	sp, #16
 8105d8e:	4770      	bx	lr
 8105d90:	100002d4 	.word	0x100002d4
 8105d94:	100002bc 	.word	0x100002bc

08105d98 <MPU9250_GetData>:
	writeRegister(mpuToInit, SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(tMPU9250 mpuToInit, int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8105d98:	b084      	sub	sp, #16
 8105d9a:	b5b0      	push	{r4, r5, r7, lr}
 8105d9c:	b096      	sub	sp, #88	; 0x58
 8105d9e:	af14      	add	r7, sp, #80	; 0x50
 8105da0:	f107 0418 	add.w	r4, r7, #24
 8105da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// grab the data from the MPU9250
	readRegisters(mpuToInit, ACCEL_OUT, 21, _buffer);
 8105da8:	233b      	movs	r3, #59	; 0x3b
 8105daa:	4a6d      	ldr	r2, [pc, #436]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105dac:	9212      	str	r2, [sp, #72]	; 0x48
 8105dae:	2215      	movs	r2, #21
 8105db0:	9211      	str	r2, [sp, #68]	; 0x44
 8105db2:	9310      	str	r3, [sp, #64]	; 0x40
 8105db4:	466d      	mov	r5, sp
 8105db6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8105dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105dc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8105dca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8105dce:	f107 0318 	add.w	r3, r7, #24
 8105dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8105dd4:	f7ff fc4e 	bl	8105674 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8105dd8:	4b61      	ldr	r3, [pc, #388]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105dda:	781b      	ldrb	r3, [r3, #0]
 8105ddc:	021b      	lsls	r3, r3, #8
 8105dde:	b21a      	sxth	r2, r3
 8105de0:	4b5f      	ldr	r3, [pc, #380]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105de2:	785b      	ldrb	r3, [r3, #1]
 8105de4:	b21b      	sxth	r3, r3
 8105de6:	4313      	orrs	r3, r2
 8105de8:	b21a      	sxth	r2, r3
 8105dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105dec:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8105dee:	4b5c      	ldr	r3, [pc, #368]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105df0:	789b      	ldrb	r3, [r3, #2]
 8105df2:	021b      	lsls	r3, r3, #8
 8105df4:	b219      	sxth	r1, r3
 8105df6:	4b5a      	ldr	r3, [pc, #360]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105df8:	78db      	ldrb	r3, [r3, #3]
 8105dfa:	b21a      	sxth	r2, r3
 8105dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105dfe:	3302      	adds	r3, #2
 8105e00:	430a      	orrs	r2, r1
 8105e02:	b212      	sxth	r2, r2
 8105e04:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8105e06:	4b56      	ldr	r3, [pc, #344]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e08:	791b      	ldrb	r3, [r3, #4]
 8105e0a:	021b      	lsls	r3, r3, #8
 8105e0c:	b219      	sxth	r1, r3
 8105e0e:	4b54      	ldr	r3, [pc, #336]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e10:	795b      	ldrb	r3, [r3, #5]
 8105e12:	b21a      	sxth	r2, r3
 8105e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105e16:	3304      	adds	r3, #4
 8105e18:	430a      	orrs	r2, r1
 8105e1a:	b212      	sxth	r2, r2
 8105e1c:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8105e1e:	4b50      	ldr	r3, [pc, #320]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e20:	7a1b      	ldrb	r3, [r3, #8]
 8105e22:	021b      	lsls	r3, r3, #8
 8105e24:	b21a      	sxth	r2, r3
 8105e26:	4b4e      	ldr	r3, [pc, #312]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e28:	7a5b      	ldrb	r3, [r3, #9]
 8105e2a:	b21b      	sxth	r3, r3
 8105e2c:	4313      	orrs	r3, r2
 8105e2e:	b21a      	sxth	r2, r3
 8105e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105e32:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8105e34:	4b4a      	ldr	r3, [pc, #296]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e36:	7a9b      	ldrb	r3, [r3, #10]
 8105e38:	021b      	lsls	r3, r3, #8
 8105e3a:	b219      	sxth	r1, r3
 8105e3c:	4b48      	ldr	r3, [pc, #288]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e3e:	7adb      	ldrb	r3, [r3, #11]
 8105e40:	b21a      	sxth	r2, r3
 8105e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105e44:	3302      	adds	r3, #2
 8105e46:	430a      	orrs	r2, r1
 8105e48:	b212      	sxth	r2, r2
 8105e4a:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8105e4c:	4b44      	ldr	r3, [pc, #272]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e4e:	7b1b      	ldrb	r3, [r3, #12]
 8105e50:	021b      	lsls	r3, r3, #8
 8105e52:	b219      	sxth	r1, r3
 8105e54:	4b42      	ldr	r3, [pc, #264]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e56:	7b5b      	ldrb	r3, [r3, #13]
 8105e58:	b21a      	sxth	r2, r3
 8105e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105e5c:	3304      	adds	r3, #4
 8105e5e:	430a      	orrs	r2, r1
 8105e60:	b212      	sxth	r2, r2
 8105e62:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8105e64:	4b3e      	ldr	r3, [pc, #248]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e66:	7bdb      	ldrb	r3, [r3, #15]
 8105e68:	021b      	lsls	r3, r3, #8
 8105e6a:	b21a      	sxth	r2, r3
 8105e6c:	4b3c      	ldr	r3, [pc, #240]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e6e:	7b9b      	ldrb	r3, [r3, #14]
 8105e70:	b21b      	sxth	r3, r3
 8105e72:	4313      	orrs	r3, r2
 8105e74:	80fb      	strh	r3, [r7, #6]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8105e76:	4b3a      	ldr	r3, [pc, #232]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e78:	7c5b      	ldrb	r3, [r3, #17]
 8105e7a:	021b      	lsls	r3, r3, #8
 8105e7c:	b21a      	sxth	r2, r3
 8105e7e:	4b38      	ldr	r3, [pc, #224]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e80:	7c1b      	ldrb	r3, [r3, #16]
 8105e82:	b21b      	sxth	r3, r3
 8105e84:	4313      	orrs	r3, r2
 8105e86:	80bb      	strh	r3, [r7, #4]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8105e88:	4b35      	ldr	r3, [pc, #212]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e8a:	7cdb      	ldrb	r3, [r3, #19]
 8105e8c:	021b      	lsls	r3, r3, #8
 8105e8e:	b21a      	sxth	r2, r3
 8105e90:	4b33      	ldr	r3, [pc, #204]	; (8105f60 <MPU9250_GetData+0x1c8>)
 8105e92:	7c9b      	ldrb	r3, [r3, #18]
 8105e94:	b21b      	sxth	r3, r3
 8105e96:	4313      	orrs	r3, r2
 8105e98:	807b      	strh	r3, [r7, #2]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8105e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105e9e:	ee07 3a90 	vmov	s15, r3
 8105ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105ea6:	4b2f      	ldr	r3, [pc, #188]	; (8105f64 <MPU9250_GetData+0x1cc>)
 8105ea8:	781b      	ldrb	r3, [r3, #0]
 8105eaa:	3b80      	subs	r3, #128	; 0x80
 8105eac:	ee07 3a90 	vmov	s15, r3
 8105eb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8105eb4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8105f68 <MPU9250_GetData+0x1d0>
 8105eb8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8105ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105ecc:	ee17 3a90 	vmov	r3, s15
 8105ed0:	b21a      	sxth	r2, r3
 8105ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105ed4:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8105ed6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8105eda:	ee07 3a90 	vmov	s15, r3
 8105ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105ee2:	4b20      	ldr	r3, [pc, #128]	; (8105f64 <MPU9250_GetData+0x1cc>)
 8105ee4:	785b      	ldrb	r3, [r3, #1]
 8105ee6:	3b80      	subs	r3, #128	; 0x80
 8105ee8:	ee07 3a90 	vmov	s15, r3
 8105eec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8105ef0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8105f68 <MPU9250_GetData+0x1d0>
 8105ef4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8105ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105f06:	3302      	adds	r3, #2
 8105f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105f0c:	ee17 2a90 	vmov	r2, s15
 8105f10:	b212      	sxth	r2, r2
 8105f12:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8105f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8105f18:	ee07 3a90 	vmov	s15, r3
 8105f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105f20:	4b10      	ldr	r3, [pc, #64]	; (8105f64 <MPU9250_GetData+0x1cc>)
 8105f22:	789b      	ldrb	r3, [r3, #2]
 8105f24:	3b80      	subs	r3, #128	; 0x80
 8105f26:	ee07 3a90 	vmov	s15, r3
 8105f2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8105f2e:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8105f68 <MPU9250_GetData+0x1d0>
 8105f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8105f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105f44:	3304      	adds	r3, #4
 8105f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105f4a:	ee17 2a90 	vmov	r2, s15
 8105f4e:	b212      	sxth	r2, r2
 8105f50:	801a      	strh	r2, [r3, #0]
}
 8105f52:	bf00      	nop
 8105f54:	3708      	adds	r7, #8
 8105f56:	46bd      	mov	sp, r7
 8105f58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8105f5c:	b004      	add	sp, #16
 8105f5e:	4770      	bx	lr
 8105f60:	100002bc 	.word	0x100002bc
 8105f64:	100002d4 	.word	0x100002d4
 8105f68:	43800000 	.word	0x43800000

08105f6c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8105f6c:	b480      	push	{r7}
 8105f6e:	b083      	sub	sp, #12
 8105f70:	af00      	add	r7, sp, #0
 8105f72:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	687a      	ldr	r2, [r7, #4]
 8105f78:	605a      	str	r2, [r3, #4]
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	685a      	ldr	r2, [r3, #4]
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	601a      	str	r2, [r3, #0]
}
 8105f82:	bf00      	nop
 8105f84:	370c      	adds	r7, #12
 8105f86:	46bd      	mov	sp, r7
 8105f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f8c:	4770      	bx	lr

08105f8e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8105f8e:	b480      	push	{r7}
 8105f90:	b083      	sub	sp, #12
 8105f92:	af00      	add	r7, sp, #0
 8105f94:	6078      	str	r0, [r7, #4]
 8105f96:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	685a      	ldr	r2, [r3, #4]
 8105f9c:	683b      	ldr	r3, [r7, #0]
 8105f9e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105fa0:	683b      	ldr	r3, [r7, #0]
 8105fa2:	687a      	ldr	r2, [r7, #4]
 8105fa4:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8105fa6:	683b      	ldr	r3, [r7, #0]
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	683a      	ldr	r2, [r7, #0]
 8105fac:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8105fae:	683b      	ldr	r3, [r7, #0]
 8105fb0:	685b      	ldr	r3, [r3, #4]
 8105fb2:	683a      	ldr	r2, [r7, #0]
 8105fb4:	601a      	str	r2, [r3, #0]
}
 8105fb6:	bf00      	nop
 8105fb8:	370c      	adds	r7, #12
 8105fba:	46bd      	mov	sp, r7
 8105fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fc0:	4770      	bx	lr

08105fc2 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8105fc2:	b580      	push	{r7, lr}
 8105fc4:	b082      	sub	sp, #8
 8105fc6:	af00      	add	r7, sp, #0
 8105fc8:	6078      	str	r0, [r7, #4]
 8105fca:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8105fcc:	6839      	ldr	r1, [r7, #0]
 8105fce:	6878      	ldr	r0, [r7, #4]
 8105fd0:	f7ff ffdd 	bl	8105f8e <metal_list_add_before>
}
 8105fd4:	bf00      	nop
 8105fd6:	3708      	adds	r7, #8
 8105fd8:	46bd      	mov	sp, r7
 8105fda:	bd80      	pop	{r7, pc}

08105fdc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8105fdc:	b580      	push	{r7, lr}
 8105fde:	b082      	sub	sp, #8
 8105fe0:	af00      	add	r7, sp, #0
 8105fe2:	6078      	str	r0, [r7, #4]
 8105fe4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8105fe6:	6839      	ldr	r1, [r7, #0]
 8105fe8:	6878      	ldr	r0, [r7, #4]
 8105fea:	f001 fdb9 	bl	8107b60 <metal_machine_cache_flush>
}
 8105fee:	bf00      	nop
 8105ff0:	3708      	adds	r7, #8
 8105ff2:	46bd      	mov	sp, r7
 8105ff4:	bd80      	pop	{r7, pc}

08105ff6 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8105ff6:	b580      	push	{r7, lr}
 8105ff8:	b082      	sub	sp, #8
 8105ffa:	af00      	add	r7, sp, #0
 8105ffc:	6078      	str	r0, [r7, #4]
 8105ffe:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8106000:	6839      	ldr	r1, [r7, #0]
 8106002:	6878      	ldr	r0, [r7, #4]
 8106004:	f001 fdb7 	bl	8107b76 <metal_machine_cache_invalidate>
}
 8106008:	bf00      	nop
 810600a:	3708      	adds	r7, #8
 810600c:	46bd      	mov	sp, r7
 810600e:	bd80      	pop	{r7, pc}

08106010 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8106010:	b580      	push	{r7, lr}
 8106012:	b082      	sub	sp, #8
 8106014:	af00      	add	r7, sp, #0
 8106016:	6078      	str	r0, [r7, #4]
 8106018:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 810601a:	6839      	ldr	r1, [r7, #0]
 810601c:	6878      	ldr	r0, [r7, #4]
 810601e:	f7ff ffdd 	bl	8105fdc <__metal_cache_flush>
}
 8106022:	bf00      	nop
 8106024:	3708      	adds	r7, #8
 8106026:	46bd      	mov	sp, r7
 8106028:	bd80      	pop	{r7, pc}

0810602a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 810602a:	b580      	push	{r7, lr}
 810602c:	b082      	sub	sp, #8
 810602e:	af00      	add	r7, sp, #0
 8106030:	6078      	str	r0, [r7, #4]
 8106032:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8106034:	6839      	ldr	r1, [r7, #0]
 8106036:	6878      	ldr	r0, [r7, #4]
 8106038:	f7ff ffdd 	bl	8105ff6 <__metal_cache_invalidate>
}
 810603c:	bf00      	nop
 810603e:	3708      	adds	r7, #8
 8106040:	46bd      	mov	sp, r7
 8106042:	bd80      	pop	{r7, pc}

08106044 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8106044:	b580      	push	{r7, lr}
 8106046:	b082      	sub	sp, #8
 8106048:	af00      	add	r7, sp, #0
 810604a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	2b00      	cmp	r3, #0
 8106050:	d008      	beq.n	8106064 <metal_bus_register+0x20>
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	2b00      	cmp	r3, #0
 8106058:	d004      	beq.n	8106064 <metal_bus_register+0x20>
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	681b      	ldr	r3, [r3, #0]
 810605e:	781b      	ldrb	r3, [r3, #0]
 8106060:	2b00      	cmp	r3, #0
 8106062:	d102      	bne.n	810606a <metal_bus_register+0x26>
		return -EINVAL;
 8106064:	f06f 0315 	mvn.w	r3, #21
 8106068:	e026      	b.n	81060b8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	2100      	movs	r1, #0
 8106070:	4618      	mov	r0, r3
 8106072:	f000 f82b 	bl	81060cc <metal_bus_find>
 8106076:	4603      	mov	r3, r0
 8106078:	2b00      	cmp	r3, #0
 810607a:	d102      	bne.n	8106082 <metal_bus_register+0x3e>
		return -EEXIST;
 810607c:	f06f 0310 	mvn.w	r3, #16
 8106080:	e01a      	b.n	81060b8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	331c      	adds	r3, #28
 8106086:	4618      	mov	r0, r3
 8106088:	f7ff ff70 	bl	8105f6c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	3324      	adds	r3, #36	; 0x24
 8106090:	4619      	mov	r1, r3
 8106092:	480b      	ldr	r0, [pc, #44]	; (81060c0 <metal_bus_register+0x7c>)
 8106094:	f7ff ff95 	bl	8105fc2 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8106098:	4b0a      	ldr	r3, [pc, #40]	; (81060c4 <metal_bus_register+0x80>)
 810609a:	781b      	ldrb	r3, [r3, #0]
 810609c:	2b06      	cmp	r3, #6
 810609e:	d90a      	bls.n	81060b6 <metal_bus_register+0x72>
 81060a0:	4b08      	ldr	r3, [pc, #32]	; (81060c4 <metal_bus_register+0x80>)
 81060a2:	685b      	ldr	r3, [r3, #4]
 81060a4:	2b00      	cmp	r3, #0
 81060a6:	d006      	beq.n	81060b6 <metal_bus_register+0x72>
 81060a8:	4b06      	ldr	r3, [pc, #24]	; (81060c4 <metal_bus_register+0x80>)
 81060aa:	685b      	ldr	r3, [r3, #4]
 81060ac:	687a      	ldr	r2, [r7, #4]
 81060ae:	6812      	ldr	r2, [r2, #0]
 81060b0:	4905      	ldr	r1, [pc, #20]	; (81060c8 <metal_bus_register+0x84>)
 81060b2:	2007      	movs	r0, #7
 81060b4:	4798      	blx	r3
	return 0;
 81060b6:	2300      	movs	r3, #0
}
 81060b8:	4618      	mov	r0, r3
 81060ba:	3708      	adds	r7, #8
 81060bc:	46bd      	mov	sp, r7
 81060be:	bd80      	pop	{r7, pc}
 81060c0:	100005dc 	.word	0x100005dc
 81060c4:	100005d4 	.word	0x100005d4
 81060c8:	0810ee78 	.word	0x0810ee78

081060cc <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 81060cc:	b580      	push	{r7, lr}
 81060ce:	b084      	sub	sp, #16
 81060d0:	af00      	add	r7, sp, #0
 81060d2:	6078      	str	r0, [r7, #4]
 81060d4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 81060d6:	4b13      	ldr	r3, [pc, #76]	; (8106124 <metal_bus_find+0x58>)
 81060d8:	689b      	ldr	r3, [r3, #8]
 81060da:	60fb      	str	r3, [r7, #12]
 81060dc:	e017      	b.n	810610e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 81060de:	68fb      	ldr	r3, [r7, #12]
 81060e0:	3b24      	subs	r3, #36	; 0x24
 81060e2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 81060e4:	68bb      	ldr	r3, [r7, #8]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	6879      	ldr	r1, [r7, #4]
 81060ea:	4618      	mov	r0, r3
 81060ec:	f7fa f8f8 	bl	81002e0 <strcmp>
 81060f0:	4603      	mov	r3, r0
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d003      	beq.n	81060fe <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 81060f6:	68fb      	ldr	r3, [r7, #12]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	60fb      	str	r3, [r7, #12]
 81060fc:	e007      	b.n	810610e <metal_bus_find+0x42>
			continue;
		if (result)
 81060fe:	683b      	ldr	r3, [r7, #0]
 8106100:	2b00      	cmp	r3, #0
 8106102:	d002      	beq.n	810610a <metal_bus_find+0x3e>
			*result = bus;
 8106104:	683b      	ldr	r3, [r7, #0]
 8106106:	68ba      	ldr	r2, [r7, #8]
 8106108:	601a      	str	r2, [r3, #0]
		return 0;
 810610a:	2300      	movs	r3, #0
 810610c:	e005      	b.n	810611a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 810610e:	68fb      	ldr	r3, [r7, #12]
 8106110:	4a05      	ldr	r2, [pc, #20]	; (8106128 <metal_bus_find+0x5c>)
 8106112:	4293      	cmp	r3, r2
 8106114:	d1e3      	bne.n	81060de <metal_bus_find+0x12>
	}
	return -ENOENT;
 8106116:	f06f 0301 	mvn.w	r3, #1
}
 810611a:	4618      	mov	r0, r3
 810611c:	3710      	adds	r7, #16
 810611e:	46bd      	mov	sp, r7
 8106120:	bd80      	pop	{r7, pc}
 8106122:	bf00      	nop
 8106124:	100005d4 	.word	0x100005d4
 8106128:	100005dc 	.word	0x100005dc

0810612c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 810612c:	b580      	push	{r7, lr}
 810612e:	b086      	sub	sp, #24
 8106130:	af00      	add	r7, sp, #0
 8106132:	60f8      	str	r0, [r7, #12]
 8106134:	60b9      	str	r1, [r7, #8]
 8106136:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8106138:	68fb      	ldr	r3, [r7, #12]
 810613a:	2b00      	cmp	r3, #0
 810613c:	d00d      	beq.n	810615a <metal_device_open+0x2e>
 810613e:	68fb      	ldr	r3, [r7, #12]
 8106140:	781b      	ldrb	r3, [r3, #0]
 8106142:	2b00      	cmp	r3, #0
 8106144:	d009      	beq.n	810615a <metal_device_open+0x2e>
 8106146:	68bb      	ldr	r3, [r7, #8]
 8106148:	2b00      	cmp	r3, #0
 810614a:	d006      	beq.n	810615a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 810614c:	68bb      	ldr	r3, [r7, #8]
 810614e:	781b      	ldrb	r3, [r3, #0]
 8106150:	2b00      	cmp	r3, #0
 8106152:	d002      	beq.n	810615a <metal_device_open+0x2e>
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	2b00      	cmp	r3, #0
 8106158:	d102      	bne.n	8106160 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 810615a:	f06f 0315 	mvn.w	r3, #21
 810615e:	e01f      	b.n	81061a0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8106160:	f107 0310 	add.w	r3, r7, #16
 8106164:	4619      	mov	r1, r3
 8106166:	68f8      	ldr	r0, [r7, #12]
 8106168:	f7ff ffb0 	bl	81060cc <metal_bus_find>
 810616c:	6178      	str	r0, [r7, #20]
	if (error)
 810616e:	697b      	ldr	r3, [r7, #20]
 8106170:	2b00      	cmp	r3, #0
 8106172:	d001      	beq.n	8106178 <metal_device_open+0x4c>
		return error;
 8106174:	697b      	ldr	r3, [r7, #20]
 8106176:	e013      	b.n	81061a0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8106178:	693b      	ldr	r3, [r7, #16]
 810617a:	689b      	ldr	r3, [r3, #8]
 810617c:	2b00      	cmp	r3, #0
 810617e:	d102      	bne.n	8106186 <metal_device_open+0x5a>
		return -ENODEV;
 8106180:	f06f 0312 	mvn.w	r3, #18
 8106184:	e00c      	b.n	81061a0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8106186:	693b      	ldr	r3, [r7, #16]
 8106188:	689b      	ldr	r3, [r3, #8]
 810618a:	6938      	ldr	r0, [r7, #16]
 810618c:	687a      	ldr	r2, [r7, #4]
 810618e:	68b9      	ldr	r1, [r7, #8]
 8106190:	4798      	blx	r3
 8106192:	6178      	str	r0, [r7, #20]
	if (error)
 8106194:	697b      	ldr	r3, [r7, #20]
 8106196:	2b00      	cmp	r3, #0
 8106198:	d001      	beq.n	810619e <metal_device_open+0x72>
		return error;
 810619a:	697b      	ldr	r3, [r7, #20]
 810619c:	e000      	b.n	81061a0 <metal_device_open+0x74>

	return 0;
 810619e:	2300      	movs	r3, #0
}
 81061a0:	4618      	mov	r0, r3
 81061a2:	3718      	adds	r7, #24
 81061a4:	46bd      	mov	sp, r7
 81061a6:	bd80      	pop	{r7, pc}

081061a8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 81061a8:	b580      	push	{r7, lr}
 81061aa:	b082      	sub	sp, #8
 81061ac:	af00      	add	r7, sp, #0
 81061ae:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d008      	beq.n	81061ca <metal_register_generic_device+0x22>
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	781b      	ldrb	r3, [r3, #0]
 81061be:	2b00      	cmp	r3, #0
 81061c0:	d003      	beq.n	81061ca <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 81061c6:	2b02      	cmp	r3, #2
 81061c8:	d902      	bls.n	81061d0 <metal_register_generic_device+0x28>
		return -EINVAL;
 81061ca:	f06f 0315 	mvn.w	r3, #21
 81061ce:	e009      	b.n	81061e4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	4a06      	ldr	r2, [pc, #24]	; (81061ec <metal_register_generic_device+0x44>)
 81061d4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	336c      	adds	r3, #108	; 0x6c
 81061da:	4619      	mov	r1, r3
 81061dc:	4804      	ldr	r0, [pc, #16]	; (81061f0 <metal_register_generic_device+0x48>)
 81061de:	f7ff fef0 	bl	8105fc2 <metal_list_add_tail>
			    &device->node);
	return 0;
 81061e2:	2300      	movs	r3, #0
}
 81061e4:	4618      	mov	r0, r3
 81061e6:	3708      	adds	r7, #8
 81061e8:	46bd      	mov	sp, r7
 81061ea:	bd80      	pop	{r7, pc}
 81061ec:	10000010 	.word	0x10000010
 81061f0:	100005ec 	.word	0x100005ec

081061f4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 81061f4:	b580      	push	{r7, lr}
 81061f6:	b086      	sub	sp, #24
 81061f8:	af00      	add	r7, sp, #0
 81061fa:	60f8      	str	r0, [r7, #12]
 81061fc:	60b9      	str	r1, [r7, #8]
 81061fe:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8106200:	4b12      	ldr	r3, [pc, #72]	; (810624c <metal_generic_dev_open+0x58>)
 8106202:	699b      	ldr	r3, [r3, #24]
 8106204:	617b      	str	r3, [r7, #20]
 8106206:	e017      	b.n	8106238 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8106208:	697b      	ldr	r3, [r7, #20]
 810620a:	3b6c      	subs	r3, #108	; 0x6c
 810620c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 810620e:	693b      	ldr	r3, [r7, #16]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	68b9      	ldr	r1, [r7, #8]
 8106214:	4618      	mov	r0, r3
 8106216:	f7fa f863 	bl	81002e0 <strcmp>
 810621a:	4603      	mov	r3, r0
 810621c:	2b00      	cmp	r3, #0
 810621e:	d003      	beq.n	8106228 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8106220:	697b      	ldr	r3, [r7, #20]
 8106222:	681b      	ldr	r3, [r3, #0]
 8106224:	617b      	str	r3, [r7, #20]
 8106226:	e007      	b.n	8106238 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	693a      	ldr	r2, [r7, #16]
 810622c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 810622e:	6938      	ldr	r0, [r7, #16]
 8106230:	f000 f88c 	bl	810634c <metal_generic_dev_sys_open>
 8106234:	4603      	mov	r3, r0
 8106236:	e005      	b.n	8106244 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8106238:	697b      	ldr	r3, [r7, #20]
 810623a:	4a05      	ldr	r2, [pc, #20]	; (8106250 <metal_generic_dev_open+0x5c>)
 810623c:	4293      	cmp	r3, r2
 810623e:	d1e3      	bne.n	8106208 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8106240:	f06f 0312 	mvn.w	r3, #18
}
 8106244:	4618      	mov	r0, r3
 8106246:	3718      	adds	r7, #24
 8106248:	46bd      	mov	sp, r7
 810624a:	bd80      	pop	{r7, pc}
 810624c:	100005d4 	.word	0x100005d4
 8106250:	100005ec 	.word	0x100005ec

08106254 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8106254:	b580      	push	{r7, lr}
 8106256:	b086      	sub	sp, #24
 8106258:	af00      	add	r7, sp, #0
 810625a:	60f8      	str	r0, [r7, #12]
 810625c:	60b9      	str	r1, [r7, #8]
 810625e:	607a      	str	r2, [r7, #4]
 8106260:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8106262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106264:	683b      	ldr	r3, [r7, #0]
 8106266:	429a      	cmp	r2, r3
 8106268:	d009      	beq.n	810627e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 810626a:	6a3a      	ldr	r2, [r7, #32]
 810626c:	4613      	mov	r3, r2
 810626e:	005b      	lsls	r3, r3, #1
 8106270:	4413      	add	r3, r2
 8106272:	009b      	lsls	r3, r3, #2
 8106274:	461a      	mov	r2, r3
 8106276:	6839      	ldr	r1, [r7, #0]
 8106278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810627a:	f004 f9e7 	bl	810a64c <memcpy>
	for (i = 0; i < nents_in; i++) {
 810627e:	2300      	movs	r3, #0
 8106280:	617b      	str	r3, [r7, #20]
 8106282:	e02f      	b.n	81062e4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	2b02      	cmp	r3, #2
 8106288:	d114      	bne.n	81062b4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 810628a:	697a      	ldr	r2, [r7, #20]
 810628c:	4613      	mov	r3, r2
 810628e:	005b      	lsls	r3, r3, #1
 8106290:	4413      	add	r3, r2
 8106292:	009b      	lsls	r3, r3, #2
 8106294:	461a      	mov	r2, r3
 8106296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106298:	4413      	add	r3, r2
 810629a:	6818      	ldr	r0, [r3, #0]
 810629c:	697a      	ldr	r2, [r7, #20]
 810629e:	4613      	mov	r3, r2
 81062a0:	005b      	lsls	r3, r3, #1
 81062a2:	4413      	add	r3, r2
 81062a4:	009b      	lsls	r3, r3, #2
 81062a6:	461a      	mov	r2, r3
 81062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81062aa:	4413      	add	r3, r2
 81062ac:	689b      	ldr	r3, [r3, #8]
 81062ae:	4619      	mov	r1, r3
 81062b0:	f7ff feae 	bl	8106010 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 81062b4:	697a      	ldr	r2, [r7, #20]
 81062b6:	4613      	mov	r3, r2
 81062b8:	005b      	lsls	r3, r3, #1
 81062ba:	4413      	add	r3, r2
 81062bc:	009b      	lsls	r3, r3, #2
 81062be:	461a      	mov	r2, r3
 81062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81062c2:	4413      	add	r3, r2
 81062c4:	6818      	ldr	r0, [r3, #0]
 81062c6:	697a      	ldr	r2, [r7, #20]
 81062c8:	4613      	mov	r3, r2
 81062ca:	005b      	lsls	r3, r3, #1
 81062cc:	4413      	add	r3, r2
 81062ce:	009b      	lsls	r3, r3, #2
 81062d0:	461a      	mov	r2, r3
 81062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81062d4:	4413      	add	r3, r2
 81062d6:	689b      	ldr	r3, [r3, #8]
 81062d8:	4619      	mov	r1, r3
 81062da:	f7ff fea6 	bl	810602a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 81062de:	697b      	ldr	r3, [r7, #20]
 81062e0:	3301      	adds	r3, #1
 81062e2:	617b      	str	r3, [r7, #20]
 81062e4:	697a      	ldr	r2, [r7, #20]
 81062e6:	6a3b      	ldr	r3, [r7, #32]
 81062e8:	429a      	cmp	r2, r3
 81062ea:	dbcb      	blt.n	8106284 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 81062ec:	6a3b      	ldr	r3, [r7, #32]
}
 81062ee:	4618      	mov	r0, r3
 81062f0:	3718      	adds	r7, #24
 81062f2:	46bd      	mov	sp, r7
 81062f4:	bd80      	pop	{r7, pc}

081062f6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 81062f6:	b580      	push	{r7, lr}
 81062f8:	b086      	sub	sp, #24
 81062fa:	af00      	add	r7, sp, #0
 81062fc:	60f8      	str	r0, [r7, #12]
 81062fe:	60b9      	str	r1, [r7, #8]
 8106300:	607a      	str	r2, [r7, #4]
 8106302:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8106304:	2300      	movs	r3, #0
 8106306:	617b      	str	r3, [r7, #20]
 8106308:	e017      	b.n	810633a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 810630a:	697a      	ldr	r2, [r7, #20]
 810630c:	4613      	mov	r3, r2
 810630e:	005b      	lsls	r3, r3, #1
 8106310:	4413      	add	r3, r2
 8106312:	009b      	lsls	r3, r3, #2
 8106314:	461a      	mov	r2, r3
 8106316:	683b      	ldr	r3, [r7, #0]
 8106318:	4413      	add	r3, r2
 810631a:	6818      	ldr	r0, [r3, #0]
 810631c:	697a      	ldr	r2, [r7, #20]
 810631e:	4613      	mov	r3, r2
 8106320:	005b      	lsls	r3, r3, #1
 8106322:	4413      	add	r3, r2
 8106324:	009b      	lsls	r3, r3, #2
 8106326:	461a      	mov	r2, r3
 8106328:	683b      	ldr	r3, [r7, #0]
 810632a:	4413      	add	r3, r2
 810632c:	689b      	ldr	r3, [r3, #8]
 810632e:	4619      	mov	r1, r3
 8106330:	f7ff fe7b 	bl	810602a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8106334:	697b      	ldr	r3, [r7, #20]
 8106336:	3301      	adds	r3, #1
 8106338:	617b      	str	r3, [r7, #20]
 810633a:	697a      	ldr	r2, [r7, #20]
 810633c:	6a3b      	ldr	r3, [r7, #32]
 810633e:	429a      	cmp	r2, r3
 8106340:	dbe3      	blt.n	810630a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8106342:	bf00      	nop
 8106344:	bf00      	nop
 8106346:	3718      	adds	r7, #24
 8106348:	46bd      	mov	sp, r7
 810634a:	bd80      	pop	{r7, pc}

0810634c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 810634c:	b580      	push	{r7, lr}
 810634e:	b084      	sub	sp, #16
 8106350:	af00      	add	r7, sp, #0
 8106352:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8106354:	2300      	movs	r3, #0
 8106356:	60fb      	str	r3, [r7, #12]
 8106358:	e013      	b.n	8106382 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 810635a:	68fa      	ldr	r2, [r7, #12]
 810635c:	4613      	mov	r3, r2
 810635e:	005b      	lsls	r3, r3, #1
 8106360:	4413      	add	r3, r2
 8106362:	011b      	lsls	r3, r3, #4
 8106364:	3308      	adds	r3, #8
 8106366:	687a      	ldr	r2, [r7, #4]
 8106368:	4413      	add	r3, r2
 810636a:	3304      	adds	r3, #4
 810636c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 810636e:	68bb      	ldr	r3, [r7, #8]
 8106370:	689b      	ldr	r3, [r3, #8]
 8106372:	2b00      	cmp	r3, #0
 8106374:	d00b      	beq.n	810638e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8106376:	68b8      	ldr	r0, [r7, #8]
 8106378:	f000 f81e 	bl	81063b8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 810637c:	68fb      	ldr	r3, [r7, #12]
 810637e:	3301      	adds	r3, #1
 8106380:	60fb      	str	r3, [r7, #12]
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	689b      	ldr	r3, [r3, #8]
 8106386:	68fa      	ldr	r2, [r7, #12]
 8106388:	429a      	cmp	r2, r3
 810638a:	d3e6      	bcc.n	810635a <metal_generic_dev_sys_open+0xe>
 810638c:	e000      	b.n	8106390 <metal_generic_dev_sys_open+0x44>
			break;
 810638e:	bf00      	nop
	}

	return 0;
 8106390:	2300      	movs	r3, #0
}
 8106392:	4618      	mov	r0, r3
 8106394:	3710      	adds	r7, #16
 8106396:	46bd      	mov	sp, r7
 8106398:	bd80      	pop	{r7, pc}
	...

0810639c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 810639c:	b580      	push	{r7, lr}
 810639e:	b082      	sub	sp, #8
 81063a0:	af00      	add	r7, sp, #0
 81063a2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 81063a4:	4803      	ldr	r0, [pc, #12]	; (81063b4 <metal_sys_init+0x18>)
 81063a6:	f7ff fe4d 	bl	8106044 <metal_bus_register>
	return 0;
 81063aa:	2300      	movs	r3, #0
}
 81063ac:	4618      	mov	r0, r3
 81063ae:	3708      	adds	r7, #8
 81063b0:	46bd      	mov	sp, r7
 81063b2:	bd80      	pop	{r7, pc}
 81063b4:	10000010 	.word	0x10000010

081063b8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 81063b8:	b580      	push	{r7, lr}
 81063ba:	b086      	sub	sp, #24
 81063bc:	af00      	add	r7, sp, #0
 81063be:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	689b      	ldr	r3, [r3, #8]
 81063ca:	613b      	str	r3, [r7, #16]
	if (psize) {
 81063cc:	693b      	ldr	r3, [r7, #16]
 81063ce:	2b00      	cmp	r3, #0
 81063d0:	d02c      	beq.n	810642c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	68db      	ldr	r3, [r3, #12]
 81063d6:	693a      	ldr	r2, [r7, #16]
 81063d8:	fa22 f303 	lsr.w	r3, r2, r3
 81063dc:	2b00      	cmp	r3, #0
 81063de:	d005      	beq.n	81063ec <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	68db      	ldr	r3, [r3, #12]
 81063e4:	2201      	movs	r2, #1
 81063e6:	fa02 f303 	lsl.w	r3, r2, r3
 81063ea:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 81063ec:	2300      	movs	r3, #0
 81063ee:	617b      	str	r3, [r7, #20]
 81063f0:	e013      	b.n	810641a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	685a      	ldr	r2, [r3, #4]
 81063f6:	697b      	ldr	r3, [r7, #20]
 81063f8:	009b      	lsls	r3, r3, #2
 81063fa:	4413      	add	r3, r2
 81063fc:	6819      	ldr	r1, [r3, #0]
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	695b      	ldr	r3, [r3, #20]
 8106402:	693a      	ldr	r2, [r7, #16]
 8106404:	68f8      	ldr	r0, [r7, #12]
 8106406:	f001 fbc1 	bl	8107b8c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810640a:	693b      	ldr	r3, [r7, #16]
 810640c:	009b      	lsls	r3, r3, #2
 810640e:	68fa      	ldr	r2, [r7, #12]
 8106410:	4413      	add	r3, r2
 8106412:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8106414:	697b      	ldr	r3, [r7, #20]
 8106416:	3301      	adds	r3, #1
 8106418:	617b      	str	r3, [r7, #20]
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	689a      	ldr	r2, [r3, #8]
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	68db      	ldr	r3, [r3, #12]
 8106422:	fa22 f303 	lsr.w	r3, r2, r3
 8106426:	697a      	ldr	r2, [r7, #20]
 8106428:	429a      	cmp	r2, r3
 810642a:	d9e2      	bls.n	81063f2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 810642c:	bf00      	nop
 810642e:	3718      	adds	r7, #24
 8106430:	46bd      	mov	sp, r7
 8106432:	bd80      	pop	{r7, pc}

08106434 <metal_list_init>:
{
 8106434:	b480      	push	{r7}
 8106436:	b083      	sub	sp, #12
 8106438:	af00      	add	r7, sp, #0
 810643a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	687a      	ldr	r2, [r7, #4]
 8106440:	605a      	str	r2, [r3, #4]
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	685a      	ldr	r2, [r3, #4]
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	601a      	str	r2, [r3, #0]
}
 810644a:	bf00      	nop
 810644c:	370c      	adds	r7, #12
 810644e:	46bd      	mov	sp, r7
 8106450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106454:	4770      	bx	lr
	...

08106458 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8106458:	b580      	push	{r7, lr}
 810645a:	b084      	sub	sp, #16
 810645c:	af00      	add	r7, sp, #0
 810645e:	6078      	str	r0, [r7, #4]
	int error = 0;
 8106460:	2300      	movs	r3, #0
 8106462:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8106464:	2220      	movs	r2, #32
 8106466:	2100      	movs	r1, #0
 8106468:	4810      	ldr	r0, [pc, #64]	; (81064ac <metal_init+0x54>)
 810646a:	f004 f8fd 	bl	810a668 <memset>

	_metal.common.log_handler   = params->log_handler;
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	4a0e      	ldr	r2, [pc, #56]	; (81064ac <metal_init+0x54>)
 8106474:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	791a      	ldrb	r2, [r3, #4]
 810647a:	4b0c      	ldr	r3, [pc, #48]	; (81064ac <metal_init+0x54>)
 810647c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 810647e:	480c      	ldr	r0, [pc, #48]	; (81064b0 <metal_init+0x58>)
 8106480:	f7ff ffd8 	bl	8106434 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8106484:	480b      	ldr	r0, [pc, #44]	; (81064b4 <metal_init+0x5c>)
 8106486:	f7ff ffd5 	bl	8106434 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 810648a:	480b      	ldr	r0, [pc, #44]	; (81064b8 <metal_init+0x60>)
 810648c:	f7ff ffd2 	bl	8106434 <metal_list_init>

	error = metal_sys_init(params);
 8106490:	6878      	ldr	r0, [r7, #4]
 8106492:	f7ff ff83 	bl	810639c <metal_sys_init>
 8106496:	60f8      	str	r0, [r7, #12]
	if (error)
 8106498:	68fb      	ldr	r3, [r7, #12]
 810649a:	2b00      	cmp	r3, #0
 810649c:	d001      	beq.n	81064a2 <metal_init+0x4a>
		return error;
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	e000      	b.n	81064a4 <metal_init+0x4c>

	return error;
 81064a2:	68fb      	ldr	r3, [r7, #12]
}
 81064a4:	4618      	mov	r0, r3
 81064a6:	3710      	adds	r7, #16
 81064a8:	46bd      	mov	sp, r7
 81064aa:	bd80      	pop	{r7, pc}
 81064ac:	100005d4 	.word	0x100005d4
 81064b0:	100005dc 	.word	0x100005dc
 81064b4:	100005e4 	.word	0x100005e4
 81064b8:	100005ec 	.word	0x100005ec

081064bc <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 81064bc:	b480      	push	{r7}
 81064be:	b083      	sub	sp, #12
 81064c0:	af00      	add	r7, sp, #0
 81064c2:	6078      	str	r0, [r7, #4]
 81064c4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 81064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81064ce:	d009      	beq.n	81064e4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	689b      	ldr	r3, [r3, #8]
 81064d4:	683a      	ldr	r2, [r7, #0]
 81064d6:	429a      	cmp	r2, r3
 81064d8:	d804      	bhi.n	81064e4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81064da:	687b      	ldr	r3, [r7, #4]
 81064dc:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81064de:	683b      	ldr	r3, [r7, #0]
 81064e0:	4413      	add	r3, r2
 81064e2:	e000      	b.n	81064e6 <metal_io_virt+0x2a>
 81064e4:	2300      	movs	r3, #0
}
 81064e6:	4618      	mov	r0, r3
 81064e8:	370c      	adds	r7, #12
 81064ea:	46bd      	mov	sp, r7
 81064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064f0:	4770      	bx	lr

081064f2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 81064f2:	b5b0      	push	{r4, r5, r7, lr}
 81064f4:	b08a      	sub	sp, #40	; 0x28
 81064f6:	af00      	add	r7, sp, #0
 81064f8:	60f8      	str	r0, [r7, #12]
 81064fa:	60b9      	str	r1, [r7, #8]
 81064fc:	607a      	str	r2, [r7, #4]
 81064fe:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8106500:	f107 0310 	add.w	r3, r7, #16
 8106504:	2200      	movs	r2, #0
 8106506:	601a      	str	r2, [r3, #0]
 8106508:	605a      	str	r2, [r3, #4]
 810650a:	609a      	str	r2, [r3, #8]
 810650c:	60da      	str	r2, [r3, #12]
 810650e:	611a      	str	r2, [r3, #16]
 8106510:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8106512:	68fb      	ldr	r3, [r7, #12]
 8106514:	68ba      	ldr	r2, [r7, #8]
 8106516:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8106518:	68fb      	ldr	r3, [r7, #12]
 810651a:	687a      	ldr	r2, [r7, #4]
 810651c:	605a      	str	r2, [r3, #4]
	io->size = size;
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	683a      	ldr	r2, [r7, #0]
 8106522:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8106524:	68fb      	ldr	r3, [r7, #12]
 8106526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106528:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 810652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810652c:	2b1f      	cmp	r3, #31
 810652e:	d904      	bls.n	810653a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8106530:	68fb      	ldr	r3, [r7, #12]
 8106532:	f04f 32ff 	mov.w	r2, #4294967295
 8106536:	611a      	str	r2, [r3, #16]
 8106538:	e006      	b.n	8106548 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 810653a:	2201      	movs	r2, #1
 810653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810653e:	fa02 f303 	lsl.w	r3, r2, r3
 8106542:	1e5a      	subs	r2, r3, #1
 8106544:	68fb      	ldr	r3, [r7, #12]
 8106546:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8106548:	68fb      	ldr	r3, [r7, #12]
 810654a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 810654c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 810654e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106550:	2b00      	cmp	r3, #0
 8106552:	d00b      	beq.n	810656c <metal_io_init+0x7a>
 8106554:	68fb      	ldr	r3, [r7, #12]
 8106556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8106558:	f103 0418 	add.w	r4, r3, #24
 810655c:	4615      	mov	r5, r2
 810655e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8106562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8106566:	e884 0003 	stmia.w	r4, {r0, r1}
 810656a:	e00a      	b.n	8106582 <metal_io_init+0x90>
 810656c:	68fb      	ldr	r3, [r7, #12]
 810656e:	f103 0418 	add.w	r4, r3, #24
 8106572:	f107 0510 	add.w	r5, r7, #16
 8106576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8106578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810657a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810657e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8106582:	68f8      	ldr	r0, [r7, #12]
 8106584:	f7ff ff18 	bl	81063b8 <metal_sys_io_mem_map>
}
 8106588:	bf00      	nop
 810658a:	3728      	adds	r7, #40	; 0x28
 810658c:	46bd      	mov	sp, r7
 810658e:	bdb0      	pop	{r4, r5, r7, pc}

08106590 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8106590:	b590      	push	{r4, r7, lr}
 8106592:	b08b      	sub	sp, #44	; 0x2c
 8106594:	af02      	add	r7, sp, #8
 8106596:	60f8      	str	r0, [r7, #12]
 8106598:	60b9      	str	r1, [r7, #8]
 810659a:	607a      	str	r2, [r7, #4]
 810659c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810659e:	68b9      	ldr	r1, [r7, #8]
 81065a0:	68f8      	ldr	r0, [r7, #12]
 81065a2:	f7ff ff8b 	bl	81064bc <metal_io_virt>
 81065a6:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 81065ac:	68fb      	ldr	r3, [r7, #12]
 81065ae:	689b      	ldr	r3, [r3, #8]
 81065b0:	68ba      	ldr	r2, [r7, #8]
 81065b2:	429a      	cmp	r2, r3
 81065b4:	d902      	bls.n	81065bc <metal_io_block_read+0x2c>
		return -ERANGE;
 81065b6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 81065ba:	e05c      	b.n	8106676 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 81065bc:	683a      	ldr	r2, [r7, #0]
 81065be:	68bb      	ldr	r3, [r7, #8]
 81065c0:	441a      	add	r2, r3
 81065c2:	68fb      	ldr	r3, [r7, #12]
 81065c4:	689b      	ldr	r3, [r3, #8]
 81065c6:	429a      	cmp	r2, r3
 81065c8:	d904      	bls.n	81065d4 <metal_io_block_read+0x44>
		len = io->size - offset;
 81065ca:	68fb      	ldr	r3, [r7, #12]
 81065cc:	689a      	ldr	r2, [r3, #8]
 81065ce:	68bb      	ldr	r3, [r7, #8]
 81065d0:	1ad3      	subs	r3, r2, r3
 81065d2:	603b      	str	r3, [r7, #0]
	retlen = len;
 81065d4:	683b      	ldr	r3, [r7, #0]
 81065d6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 81065d8:	68fb      	ldr	r3, [r7, #12]
 81065da:	6a1b      	ldr	r3, [r3, #32]
 81065dc:	2b00      	cmp	r3, #0
 81065de:	d00a      	beq.n	81065f6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 81065e0:	68fb      	ldr	r3, [r7, #12]
 81065e2:	6a1c      	ldr	r4, [r3, #32]
 81065e4:	683b      	ldr	r3, [r7, #0]
 81065e6:	9300      	str	r3, [sp, #0]
 81065e8:	2305      	movs	r3, #5
 81065ea:	687a      	ldr	r2, [r7, #4]
 81065ec:	68b9      	ldr	r1, [r7, #8]
 81065ee:	68f8      	ldr	r0, [r7, #12]
 81065f0:	47a0      	blx	r4
 81065f2:	6178      	str	r0, [r7, #20]
 81065f4:	e03e      	b.n	8106674 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 81065f6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 81065fa:	e00c      	b.n	8106616 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81065fc:	69fb      	ldr	r3, [r7, #28]
 81065fe:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8106600:	69bb      	ldr	r3, [r7, #24]
 8106602:	701a      	strb	r2, [r3, #0]
			dest++;
 8106604:	69bb      	ldr	r3, [r7, #24]
 8106606:	3301      	adds	r3, #1
 8106608:	61bb      	str	r3, [r7, #24]
			ptr++;
 810660a:	69fb      	ldr	r3, [r7, #28]
 810660c:	3301      	adds	r3, #1
 810660e:	61fb      	str	r3, [r7, #28]
			len--;
 8106610:	683b      	ldr	r3, [r7, #0]
 8106612:	3b01      	subs	r3, #1
 8106614:	603b      	str	r3, [r7, #0]
		while ( len && (
 8106616:	683b      	ldr	r3, [r7, #0]
 8106618:	2b00      	cmp	r3, #0
 810661a:	d017      	beq.n	810664c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 810661c:	69bb      	ldr	r3, [r7, #24]
 810661e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8106622:	2b00      	cmp	r3, #0
 8106624:	d1ea      	bne.n	81065fc <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8106626:	69fb      	ldr	r3, [r7, #28]
 8106628:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 810662c:	2b00      	cmp	r3, #0
 810662e:	d1e5      	bne.n	81065fc <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8106630:	e00c      	b.n	810664c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8106632:	69fb      	ldr	r3, [r7, #28]
 8106634:	681a      	ldr	r2, [r3, #0]
 8106636:	69bb      	ldr	r3, [r7, #24]
 8106638:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810663a:	69bb      	ldr	r3, [r7, #24]
 810663c:	3304      	adds	r3, #4
 810663e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8106640:	69fb      	ldr	r3, [r7, #28]
 8106642:	3304      	adds	r3, #4
 8106644:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8106646:	683b      	ldr	r3, [r7, #0]
 8106648:	3b04      	subs	r3, #4
 810664a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810664c:	683b      	ldr	r3, [r7, #0]
 810664e:	2b03      	cmp	r3, #3
 8106650:	dcef      	bgt.n	8106632 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8106652:	e00c      	b.n	810666e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8106654:	69fb      	ldr	r3, [r7, #28]
 8106656:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8106658:	69bb      	ldr	r3, [r7, #24]
 810665a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 810665c:	69bb      	ldr	r3, [r7, #24]
 810665e:	3301      	adds	r3, #1
 8106660:	61bb      	str	r3, [r7, #24]
 8106662:	69fb      	ldr	r3, [r7, #28]
 8106664:	3301      	adds	r3, #1
 8106666:	61fb      	str	r3, [r7, #28]
 8106668:	683b      	ldr	r3, [r7, #0]
 810666a:	3b01      	subs	r3, #1
 810666c:	603b      	str	r3, [r7, #0]
 810666e:	683b      	ldr	r3, [r7, #0]
 8106670:	2b00      	cmp	r3, #0
 8106672:	d1ef      	bne.n	8106654 <metal_io_block_read+0xc4>
	}
	return retlen;
 8106674:	697b      	ldr	r3, [r7, #20]
}
 8106676:	4618      	mov	r0, r3
 8106678:	3724      	adds	r7, #36	; 0x24
 810667a:	46bd      	mov	sp, r7
 810667c:	bd90      	pop	{r4, r7, pc}

0810667e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 810667e:	b590      	push	{r4, r7, lr}
 8106680:	b08b      	sub	sp, #44	; 0x2c
 8106682:	af02      	add	r7, sp, #8
 8106684:	60f8      	str	r0, [r7, #12]
 8106686:	60b9      	str	r1, [r7, #8]
 8106688:	607a      	str	r2, [r7, #4]
 810668a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 810668c:	68b9      	ldr	r1, [r7, #8]
 810668e:	68f8      	ldr	r0, [r7, #12]
 8106690:	f7ff ff14 	bl	81064bc <metal_io_virt>
 8106694:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810669a:	68fb      	ldr	r3, [r7, #12]
 810669c:	689b      	ldr	r3, [r3, #8]
 810669e:	68ba      	ldr	r2, [r7, #8]
 81066a0:	429a      	cmp	r2, r3
 81066a2:	d902      	bls.n	81066aa <metal_io_block_write+0x2c>
		return -ERANGE;
 81066a4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 81066a8:	e05b      	b.n	8106762 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 81066aa:	683a      	ldr	r2, [r7, #0]
 81066ac:	68bb      	ldr	r3, [r7, #8]
 81066ae:	441a      	add	r2, r3
 81066b0:	68fb      	ldr	r3, [r7, #12]
 81066b2:	689b      	ldr	r3, [r3, #8]
 81066b4:	429a      	cmp	r2, r3
 81066b6:	d904      	bls.n	81066c2 <metal_io_block_write+0x44>
		len = io->size - offset;
 81066b8:	68fb      	ldr	r3, [r7, #12]
 81066ba:	689a      	ldr	r2, [r3, #8]
 81066bc:	68bb      	ldr	r3, [r7, #8]
 81066be:	1ad3      	subs	r3, r2, r3
 81066c0:	603b      	str	r3, [r7, #0]
	retlen = len;
 81066c2:	683b      	ldr	r3, [r7, #0]
 81066c4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 81066c6:	68fb      	ldr	r3, [r7, #12]
 81066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81066ca:	2b00      	cmp	r3, #0
 81066cc:	d017      	beq.n	81066fe <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 81066ce:	68fb      	ldr	r3, [r7, #12]
 81066d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 81066d2:	683b      	ldr	r3, [r7, #0]
 81066d4:	9300      	str	r3, [sp, #0]
 81066d6:	2305      	movs	r3, #5
 81066d8:	687a      	ldr	r2, [r7, #4]
 81066da:	68b9      	ldr	r1, [r7, #8]
 81066dc:	68f8      	ldr	r0, [r7, #12]
 81066de:	47a0      	blx	r4
 81066e0:	6178      	str	r0, [r7, #20]
 81066e2:	e03d      	b.n	8106760 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81066e4:	69bb      	ldr	r3, [r7, #24]
 81066e6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81066e8:	69fb      	ldr	r3, [r7, #28]
 81066ea:	701a      	strb	r2, [r3, #0]
			ptr++;
 81066ec:	69fb      	ldr	r3, [r7, #28]
 81066ee:	3301      	adds	r3, #1
 81066f0:	61fb      	str	r3, [r7, #28]
			source++;
 81066f2:	69bb      	ldr	r3, [r7, #24]
 81066f4:	3301      	adds	r3, #1
 81066f6:	61bb      	str	r3, [r7, #24]
			len--;
 81066f8:	683b      	ldr	r3, [r7, #0]
 81066fa:	3b01      	subs	r3, #1
 81066fc:	603b      	str	r3, [r7, #0]
		while ( len && (
 81066fe:	683b      	ldr	r3, [r7, #0]
 8106700:	2b00      	cmp	r3, #0
 8106702:	d017      	beq.n	8106734 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8106704:	69fb      	ldr	r3, [r7, #28]
 8106706:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810670a:	2b00      	cmp	r3, #0
 810670c:	d1ea      	bne.n	81066e4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810670e:	69bb      	ldr	r3, [r7, #24]
 8106710:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8106714:	2b00      	cmp	r3, #0
 8106716:	d1e5      	bne.n	81066e4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8106718:	e00c      	b.n	8106734 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810671a:	69bb      	ldr	r3, [r7, #24]
 810671c:	681a      	ldr	r2, [r3, #0]
 810671e:	69fb      	ldr	r3, [r7, #28]
 8106720:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8106722:	69fb      	ldr	r3, [r7, #28]
 8106724:	3304      	adds	r3, #4
 8106726:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8106728:	69bb      	ldr	r3, [r7, #24]
 810672a:	3304      	adds	r3, #4
 810672c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810672e:	683b      	ldr	r3, [r7, #0]
 8106730:	3b04      	subs	r3, #4
 8106732:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8106734:	683b      	ldr	r3, [r7, #0]
 8106736:	2b03      	cmp	r3, #3
 8106738:	dcef      	bgt.n	810671a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810673a:	e00c      	b.n	8106756 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810673c:	69bb      	ldr	r3, [r7, #24]
 810673e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8106740:	69fb      	ldr	r3, [r7, #28]
 8106742:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8106744:	69fb      	ldr	r3, [r7, #28]
 8106746:	3301      	adds	r3, #1
 8106748:	61fb      	str	r3, [r7, #28]
 810674a:	69bb      	ldr	r3, [r7, #24]
 810674c:	3301      	adds	r3, #1
 810674e:	61bb      	str	r3, [r7, #24]
 8106750:	683b      	ldr	r3, [r7, #0]
 8106752:	3b01      	subs	r3, #1
 8106754:	603b      	str	r3, [r7, #0]
 8106756:	683b      	ldr	r3, [r7, #0]
 8106758:	2b00      	cmp	r3, #0
 810675a:	d1ef      	bne.n	810673c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 810675c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8106760:	697b      	ldr	r3, [r7, #20]
}
 8106762:	4618      	mov	r0, r3
 8106764:	3724      	adds	r7, #36	; 0x24
 8106766:	46bd      	mov	sp, r7
 8106768:	bd90      	pop	{r4, r7, pc}

0810676a <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 810676a:	b40e      	push	{r1, r2, r3}
 810676c:	b480      	push	{r7}
 810676e:	b082      	sub	sp, #8
 8106770:	af00      	add	r7, sp, #0
 8106772:	4603      	mov	r3, r0
 8106774:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8106776:	bf00      	nop
 8106778:	3708      	adds	r7, #8
 810677a:	46bd      	mov	sp, r7
 810677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106780:	b003      	add	sp, #12
 8106782:	4770      	bx	lr

08106784 <metal_io_virt>:
{
 8106784:	b480      	push	{r7}
 8106786:	b083      	sub	sp, #12
 8106788:	af00      	add	r7, sp, #0
 810678a:	6078      	str	r0, [r7, #4]
 810678c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106796:	d009      	beq.n	81067ac <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	689b      	ldr	r3, [r3, #8]
 810679c:	683a      	ldr	r2, [r7, #0]
 810679e:	429a      	cmp	r2, r3
 81067a0:	d804      	bhi.n	81067ac <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81067a6:	683b      	ldr	r3, [r7, #0]
 81067a8:	4413      	add	r3, r2
 81067aa:	e000      	b.n	81067ae <metal_io_virt+0x2a>
 81067ac:	2300      	movs	r3, #0
}
 81067ae:	4618      	mov	r0, r3
 81067b0:	370c      	adds	r7, #12
 81067b2:	46bd      	mov	sp, r7
 81067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b8:	4770      	bx	lr

081067ba <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 81067ba:	b480      	push	{r7}
 81067bc:	b085      	sub	sp, #20
 81067be:	af00      	add	r7, sp, #0
 81067c0:	6078      	str	r0, [r7, #4]
 81067c2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	683a      	ldr	r2, [r7, #0]
 81067ca:	1ad3      	subs	r3, r2, r3
 81067cc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	689b      	ldr	r3, [r3, #8]
 81067d2:	68fa      	ldr	r2, [r7, #12]
 81067d4:	429a      	cmp	r2, r3
 81067d6:	d201      	bcs.n	81067dc <metal_io_virt_to_offset+0x22>
 81067d8:	68fb      	ldr	r3, [r7, #12]
 81067da:	e001      	b.n	81067e0 <metal_io_virt_to_offset+0x26>
 81067dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 81067e0:	4618      	mov	r0, r3
 81067e2:	3714      	adds	r7, #20
 81067e4:	46bd      	mov	sp, r7
 81067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ea:	4770      	bx	lr

081067ec <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 81067ec:	b590      	push	{r4, r7, lr}
 81067ee:	b08d      	sub	sp, #52	; 0x34
 81067f0:	af00      	add	r7, sp, #0
 81067f2:	60f8      	str	r0, [r7, #12]
 81067f4:	60b9      	str	r1, [r7, #8]
 81067f6:	603b      	str	r3, [r7, #0]
 81067f8:	4613      	mov	r3, r2
 81067fa:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 81067fc:	68b9      	ldr	r1, [r7, #8]
 81067fe:	68f8      	ldr	r0, [r7, #12]
 8106800:	f7ff ffc0 	bl	8106784 <metal_io_virt>
 8106804:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8106806:	68fb      	ldr	r3, [r7, #12]
 8106808:	699b      	ldr	r3, [r3, #24]
 810680a:	2b00      	cmp	r3, #0
 810680c:	d009      	beq.n	8106822 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 810680e:	68fb      	ldr	r3, [r7, #12]
 8106810:	699c      	ldr	r4, [r3, #24]
 8106812:	79fa      	ldrb	r2, [r7, #7]
 8106814:	683b      	ldr	r3, [r7, #0]
 8106816:	68b9      	ldr	r1, [r7, #8]
 8106818:	68f8      	ldr	r0, [r7, #12]
 810681a:	47a0      	blx	r4
 810681c:	4602      	mov	r2, r0
 810681e:	460b      	mov	r3, r1
 8106820:	e057      	b.n	81068d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8106822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106824:	2b00      	cmp	r3, #0
 8106826:	d011      	beq.n	810684c <metal_io_read+0x60>
 8106828:	683b      	ldr	r3, [r7, #0]
 810682a:	2b01      	cmp	r3, #1
 810682c:	d10e      	bne.n	810684c <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 810682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106830:	62bb      	str	r3, [r7, #40]	; 0x28
 8106832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106834:	f3bf 8f5b 	dmb	ish
 8106838:	781b      	ldrb	r3, [r3, #0]
 810683a:	f3bf 8f5b 	dmb	ish
 810683e:	b2db      	uxtb	r3, r3
 8106840:	76fb      	strb	r3, [r7, #27]
 8106842:	7efb      	ldrb	r3, [r7, #27]
 8106844:	b2da      	uxtb	r2, r3
 8106846:	f04f 0300 	mov.w	r3, #0
 810684a:	e042      	b.n	81068d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 810684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810684e:	2b00      	cmp	r3, #0
 8106850:	d011      	beq.n	8106876 <metal_io_read+0x8a>
 8106852:	683b      	ldr	r3, [r7, #0]
 8106854:	2b02      	cmp	r3, #2
 8106856:	d10e      	bne.n	8106876 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8106858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810685a:	627b      	str	r3, [r7, #36]	; 0x24
 810685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810685e:	f3bf 8f5b 	dmb	ish
 8106862:	881b      	ldrh	r3, [r3, #0]
 8106864:	f3bf 8f5b 	dmb	ish
 8106868:	b29b      	uxth	r3, r3
 810686a:	833b      	strh	r3, [r7, #24]
 810686c:	8b3b      	ldrh	r3, [r7, #24]
 810686e:	b29a      	uxth	r2, r3
 8106870:	f04f 0300 	mov.w	r3, #0
 8106874:	e02d      	b.n	81068d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8106876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106878:	2b00      	cmp	r3, #0
 810687a:	d010      	beq.n	810689e <metal_io_read+0xb2>
 810687c:	683b      	ldr	r3, [r7, #0]
 810687e:	2b04      	cmp	r3, #4
 8106880:	d10d      	bne.n	810689e <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8106882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106884:	623b      	str	r3, [r7, #32]
 8106886:	6a3b      	ldr	r3, [r7, #32]
 8106888:	f3bf 8f5b 	dmb	ish
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	f3bf 8f5b 	dmb	ish
 8106892:	617b      	str	r3, [r7, #20]
 8106894:	697b      	ldr	r3, [r7, #20]
 8106896:	461a      	mov	r2, r3
 8106898:	f04f 0300 	mov.w	r3, #0
 810689c:	e019      	b.n	81068d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 810689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068a0:	2b00      	cmp	r3, #0
 81068a2:	d010      	beq.n	81068c6 <metal_io_read+0xda>
 81068a4:	683b      	ldr	r3, [r7, #0]
 81068a6:	2b04      	cmp	r3, #4
 81068a8:	d10d      	bne.n	81068c6 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 81068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068ac:	61fb      	str	r3, [r7, #28]
 81068ae:	69fb      	ldr	r3, [r7, #28]
 81068b0:	f3bf 8f5b 	dmb	ish
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	f3bf 8f5b 	dmb	ish
 81068ba:	613b      	str	r3, [r7, #16]
 81068bc:	693b      	ldr	r3, [r7, #16]
 81068be:	461a      	mov	r2, r3
 81068c0:	f04f 0300 	mov.w	r3, #0
 81068c4:	e005      	b.n	81068d2 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 81068c6:	4b05      	ldr	r3, [pc, #20]	; (81068dc <metal_io_read+0xf0>)
 81068c8:	4a05      	ldr	r2, [pc, #20]	; (81068e0 <metal_io_read+0xf4>)
 81068ca:	21f0      	movs	r1, #240	; 0xf0
 81068cc:	4805      	ldr	r0, [pc, #20]	; (81068e4 <metal_io_read+0xf8>)
 81068ce:	f003 fe53 	bl	810a578 <__assert_func>
	return 0; /* quiet compiler */
}
 81068d2:	4610      	mov	r0, r2
 81068d4:	4619      	mov	r1, r3
 81068d6:	3734      	adds	r7, #52	; 0x34
 81068d8:	46bd      	mov	sp, r7
 81068da:	bd90      	pop	{r4, r7, pc}
 81068dc:	0810ef34 	.word	0x0810ef34
 81068e0:	0810f0b8 	.word	0x0810f0b8
 81068e4:	0810ef38 	.word	0x0810ef38

081068e8 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 81068e8:	b580      	push	{r7, lr}
 81068ea:	b082      	sub	sp, #8
 81068ec:	af00      	add	r7, sp, #0
 81068ee:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 81068f0:	6878      	ldr	r0, [r7, #4]
 81068f2:	f003 fe9b 	bl	810a62c <malloc>
 81068f6:	4603      	mov	r3, r0
}
 81068f8:	4618      	mov	r0, r3
 81068fa:	3708      	adds	r7, #8
 81068fc:	46bd      	mov	sp, r7
 81068fe:	bd80      	pop	{r7, pc}

08106900 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8106900:	b580      	push	{r7, lr}
 8106902:	b082      	sub	sp, #8
 8106904:	af00      	add	r7, sp, #0
 8106906:	6078      	str	r0, [r7, #4]
	free(ptr);
 8106908:	6878      	ldr	r0, [r7, #4]
 810690a:	f003 fe97 	bl	810a63c <free>
}
 810690e:	bf00      	nop
 8106910:	3708      	adds	r7, #8
 8106912:	46bd      	mov	sp, r7
 8106914:	bd80      	pop	{r7, pc}

08106916 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8106916:	b580      	push	{r7, lr}
 8106918:	b084      	sub	sp, #16
 810691a:	af00      	add	r7, sp, #0
 810691c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	3307      	adds	r3, #7
 8106922:	00db      	lsls	r3, r3, #3
 8106924:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8106926:	68f8      	ldr	r0, [r7, #12]
 8106928:	f7ff ffde 	bl	81068e8 <metal_allocate_memory>
 810692c:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 810692e:	68bb      	ldr	r3, [r7, #8]
 8106930:	2b00      	cmp	r3, #0
 8106932:	d004      	beq.n	810693e <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8106934:	68fa      	ldr	r2, [r7, #12]
 8106936:	2100      	movs	r1, #0
 8106938:	68b8      	ldr	r0, [r7, #8]
 810693a:	f003 fe95 	bl	810a668 <memset>
	}

	return vqs;
 810693e:	68bb      	ldr	r3, [r7, #8]
}
 8106940:	4618      	mov	r0, r3
 8106942:	3710      	adds	r7, #16
 8106944:	46bd      	mov	sp, r7
 8106946:	bd80      	pop	{r7, pc}

08106948 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8106948:	b580      	push	{r7, lr}
 810694a:	b086      	sub	sp, #24
 810694c:	af00      	add	r7, sp, #0
 810694e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	891b      	ldrh	r3, [r3, #8]
 8106954:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	681b      	ldr	r3, [r3, #0]
 810695a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810695c:	693b      	ldr	r3, [r7, #16]
 810695e:	3b18      	subs	r3, #24
 8106960:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8106962:	693b      	ldr	r3, [r7, #16]
 8106964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106966:	697a      	ldr	r2, [r7, #20]
 8106968:	429a      	cmp	r2, r3
 810696a:	d905      	bls.n	8106978 <rproc_virtio_virtqueue_notify+0x30>
 810696c:	4b0d      	ldr	r3, [pc, #52]	; (81069a4 <rproc_virtio_virtqueue_notify+0x5c>)
 810696e:	4a0e      	ldr	r2, [pc, #56]	; (81069a8 <rproc_virtio_virtqueue_notify+0x60>)
 8106970:	2133      	movs	r1, #51	; 0x33
 8106972:	480e      	ldr	r0, [pc, #56]	; (81069ac <rproc_virtio_virtqueue_notify+0x64>)
 8106974:	f003 fe00 	bl	810a578 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8106978:	693b      	ldr	r3, [r7, #16]
 810697a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 810697c:	697a      	ldr	r2, [r7, #20]
 810697e:	4613      	mov	r3, r2
 8106980:	005b      	lsls	r3, r3, #1
 8106982:	4413      	add	r3, r2
 8106984:	00db      	lsls	r3, r3, #3
 8106986:	440b      	add	r3, r1
 8106988:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 810698a:	68fb      	ldr	r3, [r7, #12]
 810698c:	691b      	ldr	r3, [r3, #16]
 810698e:	68fa      	ldr	r2, [r7, #12]
 8106990:	6810      	ldr	r0, [r2, #0]
 8106992:	68ba      	ldr	r2, [r7, #8]
 8106994:	6912      	ldr	r2, [r2, #16]
 8106996:	4611      	mov	r1, r2
 8106998:	4798      	blx	r3
}
 810699a:	bf00      	nop
 810699c:	3718      	adds	r7, #24
 810699e:	46bd      	mov	sp, r7
 81069a0:	bd80      	pop	{r7, pc}
 81069a2:	bf00      	nop
 81069a4:	0810ef80 	.word	0x0810ef80
 81069a8:	0810f098 	.word	0x0810f098
 81069ac:	0810ef9c 	.word	0x0810ef9c

081069b0 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 81069b0:	b580      	push	{r7, lr}
 81069b2:	b086      	sub	sp, #24
 81069b4:	af00      	add	r7, sp, #0
 81069b6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	3b18      	subs	r3, #24
 81069bc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81069be:	697b      	ldr	r3, [r7, #20]
 81069c0:	689b      	ldr	r3, [r3, #8]
 81069c2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81069c4:	697b      	ldr	r3, [r7, #20]
 81069c6:	68db      	ldr	r3, [r3, #12]
 81069c8:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 81069ca:	693b      	ldr	r3, [r7, #16]
 81069cc:	3318      	adds	r3, #24
 81069ce:	4619      	mov	r1, r3
 81069d0:	68f8      	ldr	r0, [r7, #12]
 81069d2:	f7ff fef2 	bl	81067ba <metal_io_virt_to_offset>
 81069d6:	4601      	mov	r1, r0
 81069d8:	2301      	movs	r3, #1
 81069da:	2205      	movs	r2, #5
 81069dc:	68f8      	ldr	r0, [r7, #12]
 81069de:	f7ff ff05 	bl	81067ec <metal_io_read>
 81069e2:	4602      	mov	r2, r0
 81069e4:	460b      	mov	r3, r1
 81069e6:	4613      	mov	r3, r2
 81069e8:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 81069ea:	7afb      	ldrb	r3, [r7, #11]
}
 81069ec:	4618      	mov	r0, r3
 81069ee:	3718      	adds	r7, #24
 81069f0:	46bd      	mov	sp, r7
 81069f2:	bd80      	pop	{r7, pc}

081069f4 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 81069f4:	b580      	push	{r7, lr}
 81069f6:	b086      	sub	sp, #24
 81069f8:	af00      	add	r7, sp, #0
 81069fa:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	3b18      	subs	r3, #24
 8106a00:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8106a02:	697b      	ldr	r3, [r7, #20]
 8106a04:	689b      	ldr	r3, [r3, #8]
 8106a06:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8106a08:	697b      	ldr	r3, [r7, #20]
 8106a0a:	68db      	ldr	r3, [r3, #12]
 8106a0c:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8106a0e:	693b      	ldr	r3, [r7, #16]
 8106a10:	330c      	adds	r3, #12
 8106a12:	4619      	mov	r1, r3
 8106a14:	68f8      	ldr	r0, [r7, #12]
 8106a16:	f7ff fed0 	bl	81067ba <metal_io_virt_to_offset>
 8106a1a:	4601      	mov	r1, r0
 8106a1c:	2304      	movs	r3, #4
 8106a1e:	2205      	movs	r2, #5
 8106a20:	68f8      	ldr	r0, [r7, #12]
 8106a22:	f7ff fee3 	bl	81067ec <metal_io_read>
 8106a26:	4602      	mov	r2, r0
 8106a28:	460b      	mov	r3, r1
 8106a2a:	4613      	mov	r3, r2
 8106a2c:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8106a2e:	68bb      	ldr	r3, [r7, #8]
}
 8106a30:	4618      	mov	r0, r3
 8106a32:	3718      	adds	r7, #24
 8106a34:	46bd      	mov	sp, r7
 8106a36:	bd80      	pop	{r7, pc}

08106a38 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8106a38:	b480      	push	{r7}
 8106a3a:	b083      	sub	sp, #12
 8106a3c:	af00      	add	r7, sp, #0
 8106a3e:	6078      	str	r0, [r7, #4]
 8106a40:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8106a42:	2300      	movs	r3, #0
}
 8106a44:	4618      	mov	r0, r3
 8106a46:	370c      	adds	r7, #12
 8106a48:	46bd      	mov	sp, r7
 8106a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a4e:	4770      	bx	lr

08106a50 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8106a50:	b480      	push	{r7}
 8106a52:	b085      	sub	sp, #20
 8106a54:	af00      	add	r7, sp, #0
 8106a56:	60f8      	str	r0, [r7, #12]
 8106a58:	60b9      	str	r1, [r7, #8]
 8106a5a:	607a      	str	r2, [r7, #4]
 8106a5c:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8106a5e:	bf00      	nop
 8106a60:	3714      	adds	r7, #20
 8106a62:	46bd      	mov	sp, r7
 8106a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a68:	4770      	bx	lr
	...

08106a6c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8106a6c:	b580      	push	{r7, lr}
 8106a6e:	b08e      	sub	sp, #56	; 0x38
 8106a70:	af00      	add	r7, sp, #0
 8106a72:	60f8      	str	r0, [r7, #12]
 8106a74:	60b9      	str	r1, [r7, #8]
 8106a76:	607a      	str	r2, [r7, #4]
 8106a78:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8106a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106a80:	7e5b      	ldrb	r3, [r3, #25]
 8106a82:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8106a84:	2050      	movs	r0, #80	; 0x50
 8106a86:	f7ff ff2f 	bl	81068e8 <metal_allocate_memory>
 8106a8a:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8106a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a8e:	2b00      	cmp	r3, #0
 8106a90:	d101      	bne.n	8106a96 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8106a92:	2300      	movs	r3, #0
 8106a94:	e092      	b.n	8106bbc <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8106a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106a98:	4613      	mov	r3, r2
 8106a9a:	005b      	lsls	r3, r3, #1
 8106a9c:	4413      	add	r3, r2
 8106a9e:	00db      	lsls	r3, r3, #3
 8106aa0:	4618      	mov	r0, r3
 8106aa2:	f7ff ff21 	bl	81068e8 <metal_allocate_memory>
 8106aa6:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8106aa8:	6a3b      	ldr	r3, [r7, #32]
 8106aaa:	2b00      	cmp	r3, #0
 8106aac:	f000 8081 	beq.w	8106bb2 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8106ab0:	2250      	movs	r2, #80	; 0x50
 8106ab2:	2100      	movs	r1, #0
 8106ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8106ab6:	f003 fdd7 	bl	810a668 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8106aba:	2218      	movs	r2, #24
 8106abc:	2100      	movs	r1, #0
 8106abe:	6a38      	ldr	r0, [r7, #32]
 8106ac0:	f003 fdd2 	bl	810a668 <memset>
	vdev = &rpvdev->vdev;
 8106ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106ac6:	3318      	adds	r3, #24
 8106ac8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8106aca:	2300      	movs	r3, #0
 8106acc:	637b      	str	r3, [r7, #52]	; 0x34
 8106ace:	e025      	b.n	8106b1c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8106ad0:	2300      	movs	r3, #0
 8106ad2:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8106ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106ad6:	4613      	mov	r3, r2
 8106ad8:	009b      	lsls	r3, r3, #2
 8106ada:	4413      	add	r3, r2
 8106adc:	009b      	lsls	r3, r3, #2
 8106ade:	3318      	adds	r3, #24
 8106ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106ae2:	4413      	add	r3, r2
 8106ae4:	3304      	adds	r3, #4
 8106ae6:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8106ae8:	68fb      	ldr	r3, [r7, #12]
 8106aea:	2b00      	cmp	r3, #0
 8106aec:	d102      	bne.n	8106af4 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8106aee:	69bb      	ldr	r3, [r7, #24]
 8106af0:	689b      	ldr	r3, [r3, #8]
 8106af2:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8106af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106af6:	f7ff ff0e 	bl	8106916 <virtqueue_allocate>
 8106afa:	6178      	str	r0, [r7, #20]
		if (!vq)
 8106afc:	697b      	ldr	r3, [r7, #20]
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d031      	beq.n	8106b66 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8106b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106b04:	4613      	mov	r3, r2
 8106b06:	005b      	lsls	r3, r3, #1
 8106b08:	4413      	add	r3, r2
 8106b0a:	00db      	lsls	r3, r3, #3
 8106b0c:	461a      	mov	r2, r3
 8106b0e:	6a3b      	ldr	r3, [r7, #32]
 8106b10:	4413      	add	r3, r2
 8106b12:	697a      	ldr	r2, [r7, #20]
 8106b14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8106b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b18:	3301      	adds	r3, #1
 8106b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8106b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b20:	429a      	cmp	r2, r3
 8106b22:	d3d5      	bcc.n	8106ad0 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8106b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106b28:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8106b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8106b2e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8106b30:	69fb      	ldr	r3, [r7, #28]
 8106b32:	6a3a      	ldr	r2, [r7, #32]
 8106b34:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8106b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106b3a:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8106b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b3e:	683a      	ldr	r2, [r7, #0]
 8106b40:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8106b42:	69fb      	ldr	r3, [r7, #28]
 8106b44:	68ba      	ldr	r2, [r7, #8]
 8106b46:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8106b48:	69fb      	ldr	r3, [r7, #28]
 8106b4a:	68fa      	ldr	r2, [r7, #12]
 8106b4c:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8106b4e:	69fb      	ldr	r3, [r7, #28]
 8106b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106b52:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8106b54:	69fb      	ldr	r3, [r7, #28]
 8106b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106b58:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8106b5a:	69fb      	ldr	r3, [r7, #28]
 8106b5c:	4a19      	ldr	r2, [pc, #100]	; (8106bc4 <rproc_virtio_create_vdev+0x158>)
 8106b5e:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8106b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b62:	3318      	adds	r3, #24
 8106b64:	e02a      	b.n	8106bbc <rproc_virtio_create_vdev+0x150>
			goto err1;
 8106b66:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8106b68:	2300      	movs	r3, #0
 8106b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8106b6c:	e019      	b.n	8106ba2 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8106b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106b70:	4613      	mov	r3, r2
 8106b72:	005b      	lsls	r3, r3, #1
 8106b74:	4413      	add	r3, r2
 8106b76:	00db      	lsls	r3, r3, #3
 8106b78:	461a      	mov	r2, r3
 8106b7a:	6a3b      	ldr	r3, [r7, #32]
 8106b7c:	4413      	add	r3, r2
 8106b7e:	681b      	ldr	r3, [r3, #0]
 8106b80:	2b00      	cmp	r3, #0
 8106b82:	d00b      	beq.n	8106b9c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8106b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106b86:	4613      	mov	r3, r2
 8106b88:	005b      	lsls	r3, r3, #1
 8106b8a:	4413      	add	r3, r2
 8106b8c:	00db      	lsls	r3, r3, #3
 8106b8e:	461a      	mov	r2, r3
 8106b90:	6a3b      	ldr	r3, [r7, #32]
 8106b92:	4413      	add	r3, r2
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	4618      	mov	r0, r3
 8106b98:	f7ff feb2 	bl	8106900 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8106b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b9e:	3301      	adds	r3, #1
 8106ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8106ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ba6:	429a      	cmp	r2, r3
 8106ba8:	d3e1      	bcc.n	8106b6e <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8106baa:	6a38      	ldr	r0, [r7, #32]
 8106bac:	f7ff fea8 	bl	8106900 <metal_free_memory>
 8106bb0:	e000      	b.n	8106bb4 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8106bb2:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8106bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8106bb6:	f7ff fea3 	bl	8106900 <metal_free_memory>
	return NULL;
 8106bba:	2300      	movs	r3, #0
}
 8106bbc:	4618      	mov	r0, r3
 8106bbe:	3738      	adds	r7, #56	; 0x38
 8106bc0:	46bd      	mov	sp, r7
 8106bc2:	bd80      	pop	{r7, pc}
 8106bc4:	0810f074 	.word	0x0810f074

08106bc8 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8106bc8:	b480      	push	{r7}
 8106bca:	b087      	sub	sp, #28
 8106bcc:	af00      	add	r7, sp, #0
 8106bce:	60f8      	str	r0, [r7, #12]
 8106bd0:	60b9      	str	r1, [r7, #8]
 8106bd2:	607a      	str	r2, [r7, #4]
 8106bd4:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8106bd6:	68fb      	ldr	r3, [r7, #12]
 8106bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106bda:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8106bdc:	68ba      	ldr	r2, [r7, #8]
 8106bde:	697b      	ldr	r3, [r7, #20]
 8106be0:	429a      	cmp	r2, r3
 8106be2:	d302      	bcc.n	8106bea <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8106be4:	f06f 0301 	mvn.w	r3, #1
 8106be8:	e019      	b.n	8106c1e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8106bea:	68fb      	ldr	r3, [r7, #12]
 8106bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106bee:	68ba      	ldr	r2, [r7, #8]
 8106bf0:	4613      	mov	r3, r2
 8106bf2:	005b      	lsls	r3, r3, #1
 8106bf4:	4413      	add	r3, r2
 8106bf6:	00db      	lsls	r3, r3, #3
 8106bf8:	440b      	add	r3, r1
 8106bfa:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8106bfc:	693b      	ldr	r3, [r7, #16]
 8106bfe:	6a3a      	ldr	r2, [r7, #32]
 8106c00:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8106c02:	693b      	ldr	r3, [r7, #16]
 8106c04:	687a      	ldr	r2, [r7, #4]
 8106c06:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8106c08:	693b      	ldr	r3, [r7, #16]
 8106c0a:	683a      	ldr	r2, [r7, #0]
 8106c0c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8106c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106c10:	b29a      	uxth	r2, r3
 8106c12:	693b      	ldr	r3, [r7, #16]
 8106c14:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8106c16:	693b      	ldr	r3, [r7, #16]
 8106c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106c1a:	609a      	str	r2, [r3, #8]

	return 0;
 8106c1c:	2300      	movs	r3, #0
}
 8106c1e:	4618      	mov	r0, r3
 8106c20:	371c      	adds	r7, #28
 8106c22:	46bd      	mov	sp, r7
 8106c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c28:	4770      	bx	lr

08106c2a <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8106c2a:	b580      	push	{r7, lr}
 8106c2c:	b086      	sub	sp, #24
 8106c2e:	af00      	add	r7, sp, #0
 8106c30:	6078      	str	r0, [r7, #4]
 8106c32:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	2b00      	cmp	r3, #0
 8106c38:	d102      	bne.n	8106c40 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8106c3a:	f06f 0315 	mvn.w	r3, #21
 8106c3e:	e02c      	b.n	8106c9a <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	683a      	ldr	r2, [r7, #0]
 8106c46:	429a      	cmp	r2, r3
 8106c48:	d101      	bne.n	8106c4e <rproc_virtio_notified+0x24>
		return 0;
 8106c4a:	2300      	movs	r3, #0
 8106c4c:	e025      	b.n	8106c9a <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c52:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8106c54:	2300      	movs	r3, #0
 8106c56:	617b      	str	r3, [r7, #20]
 8106c58:	e01a      	b.n	8106c90 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8106c5e:	697a      	ldr	r2, [r7, #20]
 8106c60:	4613      	mov	r3, r2
 8106c62:	005b      	lsls	r3, r3, #1
 8106c64:	4413      	add	r3, r2
 8106c66:	00db      	lsls	r3, r3, #3
 8106c68:	440b      	add	r3, r1
 8106c6a:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8106c6c:	68fb      	ldr	r3, [r7, #12]
 8106c6e:	691b      	ldr	r3, [r3, #16]
 8106c70:	683a      	ldr	r2, [r7, #0]
 8106c72:	429a      	cmp	r2, r3
 8106c74:	d003      	beq.n	8106c7e <rproc_virtio_notified+0x54>
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106c7c:	d105      	bne.n	8106c8a <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8106c7e:	68fb      	ldr	r3, [r7, #12]
 8106c80:	681b      	ldr	r3, [r3, #0]
 8106c82:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8106c84:	68b8      	ldr	r0, [r7, #8]
 8106c86:	f001 fa19 	bl	81080bc <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8106c8a:	697b      	ldr	r3, [r7, #20]
 8106c8c:	3301      	adds	r3, #1
 8106c8e:	617b      	str	r3, [r7, #20]
 8106c90:	697a      	ldr	r2, [r7, #20]
 8106c92:	693b      	ldr	r3, [r7, #16]
 8106c94:	429a      	cmp	r2, r3
 8106c96:	d3e0      	bcc.n	8106c5a <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8106c98:	2300      	movs	r3, #0
}
 8106c9a:	4618      	mov	r0, r3
 8106c9c:	3718      	adds	r7, #24
 8106c9e:	46bd      	mov	sp, r7
 8106ca0:	bd80      	pop	{r7, pc}

08106ca2 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8106ca2:	b580      	push	{r7, lr}
 8106ca4:	b084      	sub	sp, #16
 8106ca6:	af00      	add	r7, sp, #0
 8106ca8:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	699b      	ldr	r3, [r3, #24]
 8106cae:	2b00      	cmp	r3, #0
 8106cb0:	d00a      	beq.n	8106cc8 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8106cb2:	6878      	ldr	r0, [r7, #4]
 8106cb4:	f7ff fe7c 	bl	81069b0 <rproc_virtio_get_status>
 8106cb8:	4603      	mov	r3, r0
 8106cba:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8106cbc:	7bfb      	ldrb	r3, [r7, #15]
 8106cbe:	f003 0304 	and.w	r3, r3, #4
 8106cc2:	2b00      	cmp	r3, #0
 8106cc4:	d102      	bne.n	8106ccc <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8106cc6:	e7f4      	b.n	8106cb2 <rproc_virtio_wait_remote_ready+0x10>
		return;
 8106cc8:	bf00      	nop
 8106cca:	e000      	b.n	8106cce <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8106ccc:	bf00      	nop
	}
}
 8106cce:	3710      	adds	r7, #16
 8106cd0:	46bd      	mov	sp, r7
 8106cd2:	bd80      	pop	{r7, pc}

08106cd4 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8106cd4:	b480      	push	{r7}
 8106cd6:	b083      	sub	sp, #12
 8106cd8:	af00      	add	r7, sp, #0
 8106cda:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8106cdc:	bf00      	nop
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	2201      	movs	r2, #1
 8106ce2:	4611      	mov	r1, r2
 8106ce4:	f3bf 8f5b 	dmb	ish
 8106ce8:	e8d3 2f4f 	ldrexb	r2, [r3]
 8106cec:	e8c3 1f40 	strexb	r0, r1, [r3]
 8106cf0:	2800      	cmp	r0, #0
 8106cf2:	d1f9      	bne.n	8106ce8 <__metal_mutex_acquire+0x14>
 8106cf4:	f3bf 8f5b 	dmb	ish
 8106cf8:	b2d3      	uxtb	r3, r2
 8106cfa:	2b00      	cmp	r3, #0
 8106cfc:	d1ef      	bne.n	8106cde <__metal_mutex_acquire+0xa>
		;
	}
}
 8106cfe:	bf00      	nop
 8106d00:	bf00      	nop
 8106d02:	370c      	adds	r7, #12
 8106d04:	46bd      	mov	sp, r7
 8106d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d0a:	4770      	bx	lr

08106d0c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8106d0c:	b480      	push	{r7}
 8106d0e:	b083      	sub	sp, #12
 8106d10:	af00      	add	r7, sp, #0
 8106d12:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	f3bf 8f5b 	dmb	ish
 8106d1a:	2200      	movs	r2, #0
 8106d1c:	701a      	strb	r2, [r3, #0]
 8106d1e:	f3bf 8f5b 	dmb	ish
}
 8106d22:	bf00      	nop
 8106d24:	370c      	adds	r7, #12
 8106d26:	46bd      	mov	sp, r7
 8106d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d2c:	4770      	bx	lr

08106d2e <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8106d2e:	b580      	push	{r7, lr}
 8106d30:	b082      	sub	sp, #8
 8106d32:	af00      	add	r7, sp, #0
 8106d34:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8106d36:	6878      	ldr	r0, [r7, #4]
 8106d38:	f7ff ffcc 	bl	8106cd4 <__metal_mutex_acquire>
}
 8106d3c:	bf00      	nop
 8106d3e:	3708      	adds	r7, #8
 8106d40:	46bd      	mov	sp, r7
 8106d42:	bd80      	pop	{r7, pc}

08106d44 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8106d44:	b580      	push	{r7, lr}
 8106d46:	b082      	sub	sp, #8
 8106d48:	af00      	add	r7, sp, #0
 8106d4a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8106d4c:	6878      	ldr	r0, [r7, #4]
 8106d4e:	f7ff ffdd 	bl	8106d0c <__metal_mutex_release>
}
 8106d52:	bf00      	nop
 8106d54:	3708      	adds	r7, #8
 8106d56:	46bd      	mov	sp, r7
 8106d58:	bd80      	pop	{r7, pc}

08106d5a <metal_list_add_before>:
{
 8106d5a:	b480      	push	{r7}
 8106d5c:	b083      	sub	sp, #12
 8106d5e:	af00      	add	r7, sp, #0
 8106d60:	6078      	str	r0, [r7, #4]
 8106d62:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8106d64:	687b      	ldr	r3, [r7, #4]
 8106d66:	685a      	ldr	r2, [r3, #4]
 8106d68:	683b      	ldr	r3, [r7, #0]
 8106d6a:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8106d6c:	683b      	ldr	r3, [r7, #0]
 8106d6e:	687a      	ldr	r2, [r7, #4]
 8106d70:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8106d72:	683b      	ldr	r3, [r7, #0]
 8106d74:	681b      	ldr	r3, [r3, #0]
 8106d76:	683a      	ldr	r2, [r7, #0]
 8106d78:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8106d7a:	683b      	ldr	r3, [r7, #0]
 8106d7c:	685b      	ldr	r3, [r3, #4]
 8106d7e:	683a      	ldr	r2, [r7, #0]
 8106d80:	601a      	str	r2, [r3, #0]
}
 8106d82:	bf00      	nop
 8106d84:	370c      	adds	r7, #12
 8106d86:	46bd      	mov	sp, r7
 8106d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d8c:	4770      	bx	lr

08106d8e <metal_list_add_tail>:
{
 8106d8e:	b580      	push	{r7, lr}
 8106d90:	b082      	sub	sp, #8
 8106d92:	af00      	add	r7, sp, #0
 8106d94:	6078      	str	r0, [r7, #4]
 8106d96:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8106d98:	6839      	ldr	r1, [r7, #0]
 8106d9a:	6878      	ldr	r0, [r7, #4]
 8106d9c:	f7ff ffdd 	bl	8106d5a <metal_list_add_before>
}
 8106da0:	bf00      	nop
 8106da2:	3708      	adds	r7, #8
 8106da4:	46bd      	mov	sp, r7
 8106da6:	bd80      	pop	{r7, pc}

08106da8 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8106da8:	b480      	push	{r7}
 8106daa:	b083      	sub	sp, #12
 8106dac:	af00      	add	r7, sp, #0
 8106dae:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	687a      	ldr	r2, [r7, #4]
 8106db6:	6852      	ldr	r2, [r2, #4]
 8106db8:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8106dba:	687b      	ldr	r3, [r7, #4]
 8106dbc:	685b      	ldr	r3, [r3, #4]
 8106dbe:	687a      	ldr	r2, [r7, #4]
 8106dc0:	6812      	ldr	r2, [r2, #0]
 8106dc2:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	687a      	ldr	r2, [r7, #4]
 8106dc8:	605a      	str	r2, [r3, #4]
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	685a      	ldr	r2, [r3, #4]
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	601a      	str	r2, [r3, #0]
}
 8106dd2:	bf00      	nop
 8106dd4:	370c      	adds	r7, #12
 8106dd6:	46bd      	mov	sp, r7
 8106dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ddc:	4770      	bx	lr

08106dde <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8106dde:	b480      	push	{r7}
 8106de0:	b083      	sub	sp, #12
 8106de2:	af00      	add	r7, sp, #0
 8106de4:	6078      	str	r0, [r7, #4]
 8106de6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8106de8:	683b      	ldr	r3, [r7, #0]
 8106dea:	095b      	lsrs	r3, r3, #5
 8106dec:	009a      	lsls	r2, r3, #2
 8106dee:	6879      	ldr	r1, [r7, #4]
 8106df0:	440a      	add	r2, r1
 8106df2:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8106df4:	683a      	ldr	r2, [r7, #0]
 8106df6:	f002 021f 	and.w	r2, r2, #31
 8106dfa:	2001      	movs	r0, #1
 8106dfc:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8106e00:	009b      	lsls	r3, r3, #2
 8106e02:	6878      	ldr	r0, [r7, #4]
 8106e04:	4403      	add	r3, r0
 8106e06:	430a      	orrs	r2, r1
 8106e08:	601a      	str	r2, [r3, #0]
}
 8106e0a:	bf00      	nop
 8106e0c:	370c      	adds	r7, #12
 8106e0e:	46bd      	mov	sp, r7
 8106e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e14:	4770      	bx	lr

08106e16 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8106e16:	b480      	push	{r7}
 8106e18:	b083      	sub	sp, #12
 8106e1a:	af00      	add	r7, sp, #0
 8106e1c:	6078      	str	r0, [r7, #4]
 8106e1e:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8106e20:	683b      	ldr	r3, [r7, #0]
 8106e22:	095b      	lsrs	r3, r3, #5
 8106e24:	009b      	lsls	r3, r3, #2
 8106e26:	687a      	ldr	r2, [r7, #4]
 8106e28:	4413      	add	r3, r2
 8106e2a:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8106e2c:	683b      	ldr	r3, [r7, #0]
 8106e2e:	f003 031f 	and.w	r3, r3, #31
 8106e32:	2101      	movs	r1, #1
 8106e34:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8106e38:	4013      	ands	r3, r2
}
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	370c      	adds	r7, #12
 8106e3e:	46bd      	mov	sp, r7
 8106e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e44:	4770      	bx	lr

08106e46 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8106e46:	b480      	push	{r7}
 8106e48:	b083      	sub	sp, #12
 8106e4a:	af00      	add	r7, sp, #0
 8106e4c:	6078      	str	r0, [r7, #4]
 8106e4e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8106e50:	683b      	ldr	r3, [r7, #0]
 8106e52:	095b      	lsrs	r3, r3, #5
 8106e54:	009a      	lsls	r2, r3, #2
 8106e56:	6879      	ldr	r1, [r7, #4]
 8106e58:	440a      	add	r2, r1
 8106e5a:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8106e5c:	683a      	ldr	r2, [r7, #0]
 8106e5e:	f002 021f 	and.w	r2, r2, #31
 8106e62:	2001      	movs	r0, #1
 8106e64:	fa00 f202 	lsl.w	r2, r0, r2
 8106e68:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8106e6a:	009b      	lsls	r3, r3, #2
 8106e6c:	6878      	ldr	r0, [r7, #4]
 8106e6e:	4403      	add	r3, r0
 8106e70:	400a      	ands	r2, r1
 8106e72:	601a      	str	r2, [r3, #0]
}
 8106e74:	bf00      	nop
 8106e76:	370c      	adds	r7, #12
 8106e78:	46bd      	mov	sp, r7
 8106e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e7e:	4770      	bx	lr

08106e80 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8106e80:	b580      	push	{r7, lr}
 8106e82:	b082      	sub	sp, #8
 8106e84:	af00      	add	r7, sp, #0
 8106e86:	6078      	str	r0, [r7, #4]
 8106e88:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8106e8a:	6839      	ldr	r1, [r7, #0]
 8106e8c:	6878      	ldr	r0, [r7, #4]
 8106e8e:	f7ff ffc2 	bl	8106e16 <metal_bitmap_is_bit_set>
 8106e92:	4603      	mov	r3, r0
 8106e94:	2b00      	cmp	r3, #0
 8106e96:	bf0c      	ite	eq
 8106e98:	2301      	moveq	r3, #1
 8106e9a:	2300      	movne	r3, #0
 8106e9c:	b2db      	uxtb	r3, r3
}
 8106e9e:	4618      	mov	r0, r3
 8106ea0:	3708      	adds	r7, #8
 8106ea2:	46bd      	mov	sp, r7
 8106ea4:	bd80      	pop	{r7, pc}

08106ea6 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8106ea6:	b580      	push	{r7, lr}
 8106ea8:	b086      	sub	sp, #24
 8106eaa:	af00      	add	r7, sp, #0
 8106eac:	60f8      	str	r0, [r7, #12]
 8106eae:	60b9      	str	r1, [r7, #8]
 8106eb0:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8106eb2:	68bb      	ldr	r3, [r7, #8]
 8106eb4:	617b      	str	r3, [r7, #20]
 8106eb6:	e002      	b.n	8106ebe <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8106eb8:	697b      	ldr	r3, [r7, #20]
 8106eba:	3301      	adds	r3, #1
 8106ebc:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8106ebe:	697a      	ldr	r2, [r7, #20]
 8106ec0:	687b      	ldr	r3, [r7, #4]
 8106ec2:	429a      	cmp	r2, r3
 8106ec4:	d207      	bcs.n	8106ed6 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8106ec6:	697b      	ldr	r3, [r7, #20]
 8106ec8:	4619      	mov	r1, r3
 8106eca:	68f8      	ldr	r0, [r7, #12]
 8106ecc:	f7ff ffd8 	bl	8106e80 <metal_bitmap_is_bit_clear>
 8106ed0:	4603      	mov	r3, r0
 8106ed2:	2b00      	cmp	r3, #0
 8106ed4:	d0f0      	beq.n	8106eb8 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8106ed6:	697b      	ldr	r3, [r7, #20]
}
 8106ed8:	4618      	mov	r0, r3
 8106eda:	3718      	adds	r7, #24
 8106edc:	46bd      	mov	sp, r7
 8106ede:	bd80      	pop	{r7, pc}

08106ee0 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8106ee0:	b580      	push	{r7, lr}
 8106ee2:	b084      	sub	sp, #16
 8106ee4:	af00      	add	r7, sp, #0
 8106ee6:	60f8      	str	r0, [r7, #12]
 8106ee8:	60b9      	str	r1, [r7, #8]
 8106eea:	607a      	str	r2, [r7, #4]
 8106eec:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	2220      	movs	r2, #32
 8106ef2:	68b9      	ldr	r1, [r7, #8]
 8106ef4:	4618      	mov	r0, r3
 8106ef6:	f004 fc85 	bl	810b804 <strncpy>
	ept->addr = src;
 8106efa:	68fb      	ldr	r3, [r7, #12]
 8106efc:	687a      	ldr	r2, [r7, #4]
 8106efe:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8106f00:	68fb      	ldr	r3, [r7, #12]
 8106f02:	683a      	ldr	r2, [r7, #0]
 8106f04:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8106f06:	68fb      	ldr	r3, [r7, #12]
 8106f08:	69ba      	ldr	r2, [r7, #24]
 8106f0a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8106f0c:	68fb      	ldr	r3, [r7, #12]
 8106f0e:	69fa      	ldr	r2, [r7, #28]
 8106f10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8106f12:	bf00      	nop
 8106f14:	3710      	adds	r7, #16
 8106f16:	46bd      	mov	sp, r7
 8106f18:	bd80      	pop	{r7, pc}

08106f1a <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8106f1a:	b580      	push	{r7, lr}
 8106f1c:	b084      	sub	sp, #16
 8106f1e:	af00      	add	r7, sp, #0
 8106f20:	6078      	str	r0, [r7, #4]
 8106f22:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8106f24:	f04f 33ff 	mov.w	r3, #4294967295
 8106f28:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8106f2a:	683b      	ldr	r3, [r7, #0]
 8106f2c:	461a      	mov	r2, r3
 8106f2e:	2100      	movs	r1, #0
 8106f30:	6878      	ldr	r0, [r7, #4]
 8106f32:	f7ff ffb8 	bl	8106ea6 <metal_bitmap_next_clear_bit>
 8106f36:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8106f38:	683b      	ldr	r3, [r7, #0]
 8106f3a:	68ba      	ldr	r2, [r7, #8]
 8106f3c:	429a      	cmp	r2, r3
 8106f3e:	d206      	bcs.n	8106f4e <rpmsg_get_address+0x34>
		addr = nextbit;
 8106f40:	68bb      	ldr	r3, [r7, #8]
 8106f42:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8106f44:	68bb      	ldr	r3, [r7, #8]
 8106f46:	4619      	mov	r1, r3
 8106f48:	6878      	ldr	r0, [r7, #4]
 8106f4a:	f7ff ff48 	bl	8106dde <metal_bitmap_set_bit>
	}

	return addr;
 8106f4e:	68fb      	ldr	r3, [r7, #12]
}
 8106f50:	4618      	mov	r0, r3
 8106f52:	3710      	adds	r7, #16
 8106f54:	46bd      	mov	sp, r7
 8106f56:	bd80      	pop	{r7, pc}

08106f58 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8106f58:	b580      	push	{r7, lr}
 8106f5a:	b084      	sub	sp, #16
 8106f5c:	af00      	add	r7, sp, #0
 8106f5e:	60f8      	str	r0, [r7, #12]
 8106f60:	60b9      	str	r1, [r7, #8]
 8106f62:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8106f64:	687a      	ldr	r2, [r7, #4]
 8106f66:	68bb      	ldr	r3, [r7, #8]
 8106f68:	429a      	cmp	r2, r3
 8106f6a:	da03      	bge.n	8106f74 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8106f6c:	6879      	ldr	r1, [r7, #4]
 8106f6e:	68f8      	ldr	r0, [r7, #12]
 8106f70:	f7ff ff69 	bl	8106e46 <metal_bitmap_clear_bit>
}
 8106f74:	bf00      	nop
 8106f76:	3710      	adds	r7, #16
 8106f78:	46bd      	mov	sp, r7
 8106f7a:	bd80      	pop	{r7, pc}

08106f7c <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8106f7c:	b580      	push	{r7, lr}
 8106f7e:	b084      	sub	sp, #16
 8106f80:	af00      	add	r7, sp, #0
 8106f82:	60f8      	str	r0, [r7, #12]
 8106f84:	60b9      	str	r1, [r7, #8]
 8106f86:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8106f88:	687a      	ldr	r2, [r7, #4]
 8106f8a:	68bb      	ldr	r3, [r7, #8]
 8106f8c:	429a      	cmp	r2, r3
 8106f8e:	da05      	bge.n	8106f9c <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8106f90:	6879      	ldr	r1, [r7, #4]
 8106f92:	68f8      	ldr	r0, [r7, #12]
 8106f94:	f7ff ff3f 	bl	8106e16 <metal_bitmap_is_bit_set>
 8106f98:	4603      	mov	r3, r0
 8106f9a:	e000      	b.n	8106f9e <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8106f9c:	4b02      	ldr	r3, [pc, #8]	; (8106fa8 <rpmsg_is_address_set+0x2c>)
}
 8106f9e:	4618      	mov	r0, r3
 8106fa0:	3710      	adds	r7, #16
 8106fa2:	46bd      	mov	sp, r7
 8106fa4:	bd80      	pop	{r7, pc}
 8106fa6:	bf00      	nop
 8106fa8:	fffff82d 	.word	0xfffff82d

08106fac <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8106fac:	b580      	push	{r7, lr}
 8106fae:	b084      	sub	sp, #16
 8106fb0:	af00      	add	r7, sp, #0
 8106fb2:	60f8      	str	r0, [r7, #12]
 8106fb4:	60b9      	str	r1, [r7, #8]
 8106fb6:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8106fb8:	687a      	ldr	r2, [r7, #4]
 8106fba:	68bb      	ldr	r3, [r7, #8]
 8106fbc:	429a      	cmp	r2, r3
 8106fbe:	da05      	bge.n	8106fcc <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8106fc0:	6879      	ldr	r1, [r7, #4]
 8106fc2:	68f8      	ldr	r0, [r7, #12]
 8106fc4:	f7ff ff0b 	bl	8106dde <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8106fc8:	2300      	movs	r3, #0
 8106fca:	e000      	b.n	8106fce <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8106fcc:	4b02      	ldr	r3, [pc, #8]	; (8106fd8 <rpmsg_set_address+0x2c>)
	}
}
 8106fce:	4618      	mov	r0, r3
 8106fd0:	3710      	adds	r7, #16
 8106fd2:	46bd      	mov	sp, r7
 8106fd4:	bd80      	pop	{r7, pc}
 8106fd6:	bf00      	nop
 8106fd8:	fffff82d 	.word	0xfffff82d

08106fdc <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8106fdc:	b590      	push	{r4, r7, lr}
 8106fde:	b089      	sub	sp, #36	; 0x24
 8106fe0:	af02      	add	r7, sp, #8
 8106fe2:	60f8      	str	r0, [r7, #12]
 8106fe4:	60b9      	str	r1, [r7, #8]
 8106fe6:	607a      	str	r2, [r7, #4]
 8106fe8:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8106fea:	68fb      	ldr	r3, [r7, #12]
 8106fec:	2b00      	cmp	r3, #0
 8106fee:	d00a      	beq.n	8107006 <rpmsg_send_offchannel_raw+0x2a>
 8106ff0:	68fb      	ldr	r3, [r7, #12]
 8106ff2:	6a1b      	ldr	r3, [r3, #32]
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d006      	beq.n	8107006 <rpmsg_send_offchannel_raw+0x2a>
 8106ff8:	683b      	ldr	r3, [r7, #0]
 8106ffa:	2b00      	cmp	r3, #0
 8106ffc:	d003      	beq.n	8107006 <rpmsg_send_offchannel_raw+0x2a>
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107004:	d101      	bne.n	810700a <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8107006:	4b0d      	ldr	r3, [pc, #52]	; (810703c <rpmsg_send_offchannel_raw+0x60>)
 8107008:	e014      	b.n	8107034 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 810700a:	68fb      	ldr	r3, [r7, #12]
 810700c:	6a1b      	ldr	r3, [r3, #32]
 810700e:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8107010:	697b      	ldr	r3, [r7, #20]
 8107012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107014:	2b00      	cmp	r3, #0
 8107016:	d00c      	beq.n	8107032 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8107018:	697b      	ldr	r3, [r7, #20]
 810701a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 810701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810701e:	9301      	str	r3, [sp, #4]
 8107020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107022:	9300      	str	r3, [sp, #0]
 8107024:	683b      	ldr	r3, [r7, #0]
 8107026:	687a      	ldr	r2, [r7, #4]
 8107028:	68b9      	ldr	r1, [r7, #8]
 810702a:	6978      	ldr	r0, [r7, #20]
 810702c:	47a0      	blx	r4
 810702e:	4603      	mov	r3, r0
 8107030:	e000      	b.n	8107034 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8107032:	4b02      	ldr	r3, [pc, #8]	; (810703c <rpmsg_send_offchannel_raw+0x60>)
}
 8107034:	4618      	mov	r0, r3
 8107036:	371c      	adds	r7, #28
 8107038:	46bd      	mov	sp, r7
 810703a:	bd90      	pop	{r4, r7, pc}
 810703c:	fffff82d 	.word	0xfffff82d

08107040 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8107040:	b580      	push	{r7, lr}
 8107042:	b090      	sub	sp, #64	; 0x40
 8107044:	af02      	add	r7, sp, #8
 8107046:	6078      	str	r0, [r7, #4]
 8107048:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 810704a:	683b      	ldr	r3, [r7, #0]
 810704c:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107052:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8107054:	6879      	ldr	r1, [r7, #4]
 8107056:	f107 030c 	add.w	r3, r7, #12
 810705a:	2220      	movs	r2, #32
 810705c:	4618      	mov	r0, r3
 810705e:	f004 fbd1 	bl	810b804 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8107066:	f107 030c 	add.w	r3, r7, #12
 810706a:	2201      	movs	r2, #1
 810706c:	9201      	str	r2, [sp, #4]
 810706e:	2228      	movs	r2, #40	; 0x28
 8107070:	9200      	str	r2, [sp, #0]
 8107072:	2235      	movs	r2, #53	; 0x35
 8107074:	6878      	ldr	r0, [r7, #4]
 8107076:	f7ff ffb1 	bl	8106fdc <rpmsg_send_offchannel_raw>
 810707a:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 810707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810707e:	2b00      	cmp	r3, #0
 8107080:	da01      	bge.n	8107086 <rpmsg_send_ns_message+0x46>
		return ret;
 8107082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107084:	e000      	b.n	8107088 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8107086:	2300      	movs	r3, #0
}
 8107088:	4618      	mov	r0, r3
 810708a:	3738      	adds	r7, #56	; 0x38
 810708c:	46bd      	mov	sp, r7
 810708e:	bd80      	pop	{r7, pc}

08107090 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8107090:	b580      	push	{r7, lr}
 8107092:	b088      	sub	sp, #32
 8107094:	af00      	add	r7, sp, #0
 8107096:	60f8      	str	r0, [r7, #12]
 8107098:	60b9      	str	r1, [r7, #8]
 810709a:	607a      	str	r2, [r7, #4]
 810709c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 810709e:	68fb      	ldr	r3, [r7, #12]
 81070a0:	681b      	ldr	r3, [r3, #0]
 81070a2:	61fb      	str	r3, [r7, #28]
 81070a4:	e04b      	b.n	810713e <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 81070a6:	2300      	movs	r3, #0
 81070a8:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 81070aa:	69fb      	ldr	r3, [r7, #28]
 81070ac:	3b34      	subs	r3, #52	; 0x34
 81070ae:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81070b6:	d006      	beq.n	81070c6 <rpmsg_get_endpoint+0x36>
 81070b8:	697b      	ldr	r3, [r7, #20]
 81070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81070bc:	687a      	ldr	r2, [r7, #4]
 81070be:	429a      	cmp	r2, r3
 81070c0:	d101      	bne.n	81070c6 <rpmsg_get_endpoint+0x36>
			return ept;
 81070c2:	697b      	ldr	r3, [r7, #20]
 81070c4:	e040      	b.n	8107148 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 81070c6:	697b      	ldr	r3, [r7, #20]
 81070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81070ca:	687a      	ldr	r2, [r7, #4]
 81070cc:	429a      	cmp	r2, r3
 81070ce:	d106      	bne.n	81070de <rpmsg_get_endpoint+0x4e>
 81070d0:	697b      	ldr	r3, [r7, #20]
 81070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070d4:	683a      	ldr	r2, [r7, #0]
 81070d6:	429a      	cmp	r2, r3
 81070d8:	d101      	bne.n	81070de <rpmsg_get_endpoint+0x4e>
			return ept;
 81070da:	697b      	ldr	r3, [r7, #20]
 81070dc:	e034      	b.n	8107148 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 81070de:	68bb      	ldr	r3, [r7, #8]
 81070e0:	2b00      	cmp	r3, #0
 81070e2:	d00c      	beq.n	81070fe <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 81070e4:	697b      	ldr	r3, [r7, #20]
 81070e6:	2220      	movs	r2, #32
 81070e8:	68b9      	ldr	r1, [r7, #8]
 81070ea:	4618      	mov	r0, r3
 81070ec:	f004 fb78 	bl	810b7e0 <strncmp>
 81070f0:	4603      	mov	r3, r0
 81070f2:	2b00      	cmp	r3, #0
 81070f4:	bf0c      	ite	eq
 81070f6:	2301      	moveq	r3, #1
 81070f8:	2300      	movne	r3, #0
 81070fa:	b2db      	uxtb	r3, r3
 81070fc:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 81070fe:	68bb      	ldr	r3, [r7, #8]
 8107100:	2b00      	cmp	r3, #0
 8107102:	d018      	beq.n	8107136 <rpmsg_get_endpoint+0xa6>
 8107104:	69bb      	ldr	r3, [r7, #24]
 8107106:	2b00      	cmp	r3, #0
 8107108:	d015      	beq.n	8107136 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 810710a:	683b      	ldr	r3, [r7, #0]
 810710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107110:	d006      	beq.n	8107120 <rpmsg_get_endpoint+0x90>
 8107112:	697b      	ldr	r3, [r7, #20]
 8107114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107116:	683a      	ldr	r2, [r7, #0]
 8107118:	429a      	cmp	r2, r3
 810711a:	d101      	bne.n	8107120 <rpmsg_get_endpoint+0x90>
			return ept;
 810711c:	697b      	ldr	r3, [r7, #20]
 810711e:	e013      	b.n	8107148 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107126:	d107      	bne.n	8107138 <rpmsg_get_endpoint+0xa8>
 8107128:	697b      	ldr	r3, [r7, #20]
 810712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107130:	d102      	bne.n	8107138 <rpmsg_get_endpoint+0xa8>
			return ept;
 8107132:	697b      	ldr	r3, [r7, #20]
 8107134:	e008      	b.n	8107148 <rpmsg_get_endpoint+0xb8>
			continue;
 8107136:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8107138:	69fb      	ldr	r3, [r7, #28]
 810713a:	681b      	ldr	r3, [r3, #0]
 810713c:	61fb      	str	r3, [r7, #28]
 810713e:	68fb      	ldr	r3, [r7, #12]
 8107140:	69fa      	ldr	r2, [r7, #28]
 8107142:	429a      	cmp	r2, r3
 8107144:	d1af      	bne.n	81070a6 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8107146:	2300      	movs	r3, #0
}
 8107148:	4618      	mov	r0, r3
 810714a:	3720      	adds	r7, #32
 810714c:	46bd      	mov	sp, r7
 810714e:	bd80      	pop	{r7, pc}

08107150 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8107150:	b580      	push	{r7, lr}
 8107152:	b084      	sub	sp, #16
 8107154:	af00      	add	r7, sp, #0
 8107156:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	2b00      	cmp	r3, #0
 810715c:	d016      	beq.n	810718c <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	6a1b      	ldr	r3, [r3, #32]
 8107162:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107168:	f1b3 3fff 	cmp.w	r3, #4294967295
 810716c:	d008      	beq.n	8107180 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 810716e:	68fb      	ldr	r3, [r7, #12]
 8107170:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8107178:	461a      	mov	r2, r3
 810717a:	2180      	movs	r1, #128	; 0x80
 810717c:	f7ff feec 	bl	8106f58 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8107180:	687b      	ldr	r3, [r7, #4]
 8107182:	3334      	adds	r3, #52	; 0x34
 8107184:	4618      	mov	r0, r3
 8107186:	f7ff fe0f 	bl	8106da8 <metal_list_del>
 810718a:	e000      	b.n	810718e <rpmsg_unregister_endpoint+0x3e>
		return;
 810718c:	bf00      	nop
}
 810718e:	3710      	adds	r7, #16
 8107190:	46bd      	mov	sp, r7
 8107192:	bd80      	pop	{r7, pc}

08107194 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8107194:	b580      	push	{r7, lr}
 8107196:	b082      	sub	sp, #8
 8107198:	af00      	add	r7, sp, #0
 810719a:	6078      	str	r0, [r7, #4]
 810719c:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 810719e:	683b      	ldr	r3, [r7, #0]
 81071a0:	687a      	ldr	r2, [r7, #4]
 81071a2:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 81071a4:	687a      	ldr	r2, [r7, #4]
 81071a6:	683b      	ldr	r3, [r7, #0]
 81071a8:	3334      	adds	r3, #52	; 0x34
 81071aa:	4619      	mov	r1, r3
 81071ac:	4610      	mov	r0, r2
 81071ae:	f7ff fdee 	bl	8106d8e <metal_list_add_tail>
	return RPMSG_SUCCESS;
 81071b2:	2300      	movs	r3, #0
}
 81071b4:	4618      	mov	r0, r3
 81071b6:	3708      	adds	r7, #8
 81071b8:	46bd      	mov	sp, r7
 81071ba:	bd80      	pop	{r7, pc}

081071bc <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 81071bc:	b580      	push	{r7, lr}
 81071be:	b088      	sub	sp, #32
 81071c0:	af02      	add	r7, sp, #8
 81071c2:	60f8      	str	r0, [r7, #12]
 81071c4:	60b9      	str	r1, [r7, #8]
 81071c6:	607a      	str	r2, [r7, #4]
 81071c8:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 81071ca:	683b      	ldr	r3, [r7, #0]
 81071cc:	613b      	str	r3, [r7, #16]

	if (!ept)
 81071ce:	68fb      	ldr	r3, [r7, #12]
 81071d0:	2b00      	cmp	r3, #0
 81071d2:	d101      	bne.n	81071d8 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 81071d4:	4b37      	ldr	r3, [pc, #220]	; (81072b4 <rpmsg_create_ept+0xf8>)
 81071d6:	e068      	b.n	81072aa <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 81071d8:	68bb      	ldr	r3, [r7, #8]
 81071da:	3358      	adds	r3, #88	; 0x58
 81071dc:	4618      	mov	r0, r3
 81071de:	f7ff fda6 	bl	8106d2e <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 81071e2:	683b      	ldr	r3, [r7, #0]
 81071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81071e8:	d018      	beq.n	810721c <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 81071ea:	68bb      	ldr	r3, [r7, #8]
 81071ec:	3348      	adds	r3, #72	; 0x48
 81071ee:	683a      	ldr	r2, [r7, #0]
 81071f0:	2180      	movs	r1, #128	; 0x80
 81071f2:	4618      	mov	r0, r3
 81071f4:	f7ff fec2 	bl	8106f7c <rpmsg_is_address_set>
 81071f8:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 81071fa:	697b      	ldr	r3, [r7, #20]
 81071fc:	2b00      	cmp	r3, #0
 81071fe:	d107      	bne.n	8107210 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8107200:	68bb      	ldr	r3, [r7, #8]
 8107202:	3348      	adds	r3, #72	; 0x48
 8107204:	683a      	ldr	r2, [r7, #0]
 8107206:	2180      	movs	r1, #128	; 0x80
 8107208:	4618      	mov	r0, r3
 810720a:	f7ff fecf 	bl	8106fac <rpmsg_set_address>
 810720e:	e00c      	b.n	810722a <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8107210:	697b      	ldr	r3, [r7, #20]
 8107212:	2b00      	cmp	r3, #0
 8107214:	dd40      	ble.n	8107298 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8107216:	2300      	movs	r3, #0
 8107218:	617b      	str	r3, [r7, #20]
			goto ret_status;
 810721a:	e040      	b.n	810729e <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 810721c:	68bb      	ldr	r3, [r7, #8]
 810721e:	3348      	adds	r3, #72	; 0x48
 8107220:	2180      	movs	r1, #128	; 0x80
 8107222:	4618      	mov	r0, r3
 8107224:	f7ff fe79 	bl	8106f1a <rpmsg_get_address>
 8107228:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 810722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810722c:	9301      	str	r3, [sp, #4]
 810722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107230:	9300      	str	r3, [sp, #0]
 8107232:	6a3b      	ldr	r3, [r7, #32]
 8107234:	693a      	ldr	r2, [r7, #16]
 8107236:	6879      	ldr	r1, [r7, #4]
 8107238:	68f8      	ldr	r0, [r7, #12]
 810723a:	f7ff fe51 	bl	8106ee0 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 810723e:	68f9      	ldr	r1, [r7, #12]
 8107240:	68b8      	ldr	r0, [r7, #8]
 8107242:	f7ff ffa7 	bl	8107194 <rpmsg_register_endpoint>
 8107246:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8107248:	697b      	ldr	r3, [r7, #20]
 810724a:	2b00      	cmp	r3, #0
 810724c:	da06      	bge.n	810725c <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 810724e:	68bb      	ldr	r3, [r7, #8]
 8107250:	3348      	adds	r3, #72	; 0x48
 8107252:	693a      	ldr	r2, [r7, #16]
 8107254:	2180      	movs	r1, #128	; 0x80
 8107256:	4618      	mov	r0, r3
 8107258:	f7ff fe7e 	bl	8106f58 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 810725c:	697b      	ldr	r3, [r7, #20]
 810725e:	2b00      	cmp	r3, #0
 8107260:	d11c      	bne.n	810729c <rpmsg_create_ept+0xe0>
 8107262:	68fb      	ldr	r3, [r7, #12]
 8107264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107266:	f1b3 3fff 	cmp.w	r3, #4294967295
 810726a:	d117      	bne.n	810729c <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 810726c:	68bb      	ldr	r3, [r7, #8]
 810726e:	3358      	adds	r3, #88	; 0x58
 8107270:	4618      	mov	r0, r3
 8107272:	f7ff fd67 	bl	8106d44 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8107276:	2100      	movs	r1, #0
 8107278:	68f8      	ldr	r0, [r7, #12]
 810727a:	f7ff fee1 	bl	8107040 <rpmsg_send_ns_message>
 810727e:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8107280:	68bb      	ldr	r3, [r7, #8]
 8107282:	3358      	adds	r3, #88	; 0x58
 8107284:	4618      	mov	r0, r3
 8107286:	f7ff fd52 	bl	8106d2e <metal_mutex_acquire>
		if (status)
 810728a:	697b      	ldr	r3, [r7, #20]
 810728c:	2b00      	cmp	r3, #0
 810728e:	d005      	beq.n	810729c <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8107290:	68f8      	ldr	r0, [r7, #12]
 8107292:	f7ff ff5d 	bl	8107150 <rpmsg_unregister_endpoint>
 8107296:	e002      	b.n	810729e <rpmsg_create_ept+0xe2>
			goto ret_status;
 8107298:	bf00      	nop
 810729a:	e000      	b.n	810729e <rpmsg_create_ept+0xe2>
	}

ret_status:
 810729c:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 810729e:	68bb      	ldr	r3, [r7, #8]
 81072a0:	3358      	adds	r3, #88	; 0x58
 81072a2:	4618      	mov	r0, r3
 81072a4:	f7ff fd4e 	bl	8106d44 <metal_mutex_release>
	return status;
 81072a8:	697b      	ldr	r3, [r7, #20]
}
 81072aa:	4618      	mov	r0, r3
 81072ac:	3718      	adds	r7, #24
 81072ae:	46bd      	mov	sp, r7
 81072b0:	bd80      	pop	{r7, pc}
 81072b2:	bf00      	nop
 81072b4:	fffff82d 	.word	0xfffff82d

081072b8 <__metal_cache_invalidate>:
{
 81072b8:	b580      	push	{r7, lr}
 81072ba:	b082      	sub	sp, #8
 81072bc:	af00      	add	r7, sp, #0
 81072be:	6078      	str	r0, [r7, #4]
 81072c0:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 81072c2:	6839      	ldr	r1, [r7, #0]
 81072c4:	6878      	ldr	r0, [r7, #4]
 81072c6:	f000 fc56 	bl	8107b76 <metal_machine_cache_invalidate>
}
 81072ca:	bf00      	nop
 81072cc:	3708      	adds	r7, #8
 81072ce:	46bd      	mov	sp, r7
 81072d0:	bd80      	pop	{r7, pc}

081072d2 <metal_cache_invalidate>:
{
 81072d2:	b580      	push	{r7, lr}
 81072d4:	b082      	sub	sp, #8
 81072d6:	af00      	add	r7, sp, #0
 81072d8:	6078      	str	r0, [r7, #4]
 81072da:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 81072dc:	6839      	ldr	r1, [r7, #0]
 81072de:	6878      	ldr	r0, [r7, #4]
 81072e0:	f7ff ffea 	bl	81072b8 <__metal_cache_invalidate>
}
 81072e4:	bf00      	nop
 81072e6:	3708      	adds	r7, #8
 81072e8:	46bd      	mov	sp, r7
 81072ea:	bd80      	pop	{r7, pc}

081072ec <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 81072ec:	b480      	push	{r7}
 81072ee:	b083      	sub	sp, #12
 81072f0:	af00      	add	r7, sp, #0
 81072f2:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 81072f4:	2300      	movs	r3, #0
}
 81072f6:	4618      	mov	r0, r3
 81072f8:	370c      	adds	r7, #12
 81072fa:	46bd      	mov	sp, r7
 81072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107300:	4770      	bx	lr

08107302 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8107302:	b580      	push	{r7, lr}
 8107304:	b082      	sub	sp, #8
 8107306:	af00      	add	r7, sp, #0
 8107308:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 810730a:	6878      	ldr	r0, [r7, #4]
 810730c:	f7ff ffee 	bl	81072ec <__metal_sleep_usec>
 8107310:	4603      	mov	r3, r0
}
 8107312:	4618      	mov	r0, r3
 8107314:	3708      	adds	r7, #8
 8107316:	46bd      	mov	sp, r7
 8107318:	bd80      	pop	{r7, pc}

0810731a <metal_list_init>:
{
 810731a:	b480      	push	{r7}
 810731c:	b083      	sub	sp, #12
 810731e:	af00      	add	r7, sp, #0
 8107320:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	687a      	ldr	r2, [r7, #4]
 8107326:	605a      	str	r2, [r3, #4]
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	685a      	ldr	r2, [r3, #4]
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	601a      	str	r2, [r3, #0]
}
 8107330:	bf00      	nop
 8107332:	370c      	adds	r7, #12
 8107334:	46bd      	mov	sp, r7
 8107336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810733a:	4770      	bx	lr

0810733c <metal_io_virt_to_offset>:
{
 810733c:	b480      	push	{r7}
 810733e:	b085      	sub	sp, #20
 8107340:	af00      	add	r7, sp, #0
 8107342:	6078      	str	r0, [r7, #4]
 8107344:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	681b      	ldr	r3, [r3, #0]
 810734a:	683a      	ldr	r2, [r7, #0]
 810734c:	1ad3      	subs	r3, r2, r3
 810734e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	689b      	ldr	r3, [r3, #8]
 8107354:	68fa      	ldr	r2, [r7, #12]
 8107356:	429a      	cmp	r2, r3
 8107358:	d201      	bcs.n	810735e <metal_io_virt_to_offset+0x22>
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	e001      	b.n	8107362 <metal_io_virt_to_offset+0x26>
 810735e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8107362:	4618      	mov	r0, r3
 8107364:	3714      	adds	r7, #20
 8107366:	46bd      	mov	sp, r7
 8107368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810736c:	4770      	bx	lr

0810736e <__metal_mutex_init>:
{
 810736e:	b480      	push	{r7}
 8107370:	b085      	sub	sp, #20
 8107372:	af00      	add	r7, sp, #0
 8107374:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8107376:	687b      	ldr	r3, [r7, #4]
 8107378:	60fb      	str	r3, [r7, #12]
 810737a:	2300      	movs	r3, #0
 810737c:	60bb      	str	r3, [r7, #8]
 810737e:	68bb      	ldr	r3, [r7, #8]
 8107380:	461a      	mov	r2, r3
 8107382:	68fb      	ldr	r3, [r7, #12]
 8107384:	f3bf 8f5b 	dmb	ish
 8107388:	601a      	str	r2, [r3, #0]
 810738a:	f3bf 8f5b 	dmb	ish
}
 810738e:	bf00      	nop
 8107390:	3714      	adds	r7, #20
 8107392:	46bd      	mov	sp, r7
 8107394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107398:	4770      	bx	lr

0810739a <__metal_mutex_acquire>:
{
 810739a:	b480      	push	{r7}
 810739c:	b083      	sub	sp, #12
 810739e:	af00      	add	r7, sp, #0
 81073a0:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81073a2:	bf00      	nop
 81073a4:	687b      	ldr	r3, [r7, #4]
 81073a6:	2201      	movs	r2, #1
 81073a8:	4611      	mov	r1, r2
 81073aa:	f3bf 8f5b 	dmb	ish
 81073ae:	e8d3 2f4f 	ldrexb	r2, [r3]
 81073b2:	e8c3 1f40 	strexb	r0, r1, [r3]
 81073b6:	2800      	cmp	r0, #0
 81073b8:	d1f9      	bne.n	81073ae <__metal_mutex_acquire+0x14>
 81073ba:	f3bf 8f5b 	dmb	ish
 81073be:	b2d3      	uxtb	r3, r2
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d1ef      	bne.n	81073a4 <__metal_mutex_acquire+0xa>
}
 81073c4:	bf00      	nop
 81073c6:	bf00      	nop
 81073c8:	370c      	adds	r7, #12
 81073ca:	46bd      	mov	sp, r7
 81073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073d0:	4770      	bx	lr

081073d2 <__metal_mutex_release>:
{
 81073d2:	b480      	push	{r7}
 81073d4:	b083      	sub	sp, #12
 81073d6:	af00      	add	r7, sp, #0
 81073d8:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81073da:	687b      	ldr	r3, [r7, #4]
 81073dc:	f3bf 8f5b 	dmb	ish
 81073e0:	2200      	movs	r2, #0
 81073e2:	701a      	strb	r2, [r3, #0]
 81073e4:	f3bf 8f5b 	dmb	ish
}
 81073e8:	bf00      	nop
 81073ea:	370c      	adds	r7, #12
 81073ec:	46bd      	mov	sp, r7
 81073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073f2:	4770      	bx	lr

081073f4 <metal_mutex_init>:
{
 81073f4:	b580      	push	{r7, lr}
 81073f6:	b082      	sub	sp, #8
 81073f8:	af00      	add	r7, sp, #0
 81073fa:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 81073fc:	6878      	ldr	r0, [r7, #4]
 81073fe:	f7ff ffb6 	bl	810736e <__metal_mutex_init>
}
 8107402:	bf00      	nop
 8107404:	3708      	adds	r7, #8
 8107406:	46bd      	mov	sp, r7
 8107408:	bd80      	pop	{r7, pc}

0810740a <metal_mutex_acquire>:
{
 810740a:	b580      	push	{r7, lr}
 810740c:	b082      	sub	sp, #8
 810740e:	af00      	add	r7, sp, #0
 8107410:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8107412:	6878      	ldr	r0, [r7, #4]
 8107414:	f7ff ffc1 	bl	810739a <__metal_mutex_acquire>
}
 8107418:	bf00      	nop
 810741a:	3708      	adds	r7, #8
 810741c:	46bd      	mov	sp, r7
 810741e:	bd80      	pop	{r7, pc}

08107420 <metal_mutex_release>:
{
 8107420:	b580      	push	{r7, lr}
 8107422:	b082      	sub	sp, #8
 8107424:	af00      	add	r7, sp, #0
 8107426:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8107428:	6878      	ldr	r0, [r7, #4]
 810742a:	f7ff ffd2 	bl	81073d2 <__metal_mutex_release>
}
 810742e:	bf00      	nop
 8107430:	3708      	adds	r7, #8
 8107432:	46bd      	mov	sp, r7
 8107434:	bd80      	pop	{r7, pc}

08107436 <rpmsg_init_ept>:
{
 8107436:	b580      	push	{r7, lr}
 8107438:	b084      	sub	sp, #16
 810743a:	af00      	add	r7, sp, #0
 810743c:	60f8      	str	r0, [r7, #12]
 810743e:	60b9      	str	r1, [r7, #8]
 8107440:	607a      	str	r2, [r7, #4]
 8107442:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	2220      	movs	r2, #32
 8107448:	68b9      	ldr	r1, [r7, #8]
 810744a:	4618      	mov	r0, r3
 810744c:	f004 f9da 	bl	810b804 <strncpy>
	ept->addr = src;
 8107450:	68fb      	ldr	r3, [r7, #12]
 8107452:	687a      	ldr	r2, [r7, #4]
 8107454:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8107456:	68fb      	ldr	r3, [r7, #12]
 8107458:	683a      	ldr	r2, [r7, #0]
 810745a:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 810745c:	68fb      	ldr	r3, [r7, #12]
 810745e:	69ba      	ldr	r2, [r7, #24]
 8107460:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8107462:	68fb      	ldr	r3, [r7, #12]
 8107464:	69fa      	ldr	r2, [r7, #28]
 8107466:	631a      	str	r2, [r3, #48]	; 0x30
}
 8107468:	bf00      	nop
 810746a:	3710      	adds	r7, #16
 810746c:	46bd      	mov	sp, r7
 810746e:	bd80      	pop	{r7, pc}

08107470 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8107470:	b480      	push	{r7}
 8107472:	b083      	sub	sp, #12
 8107474:	af00      	add	r7, sp, #0
 8107476:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810747c:	699b      	ldr	r3, [r3, #24]
}
 810747e:	4618      	mov	r0, r3
 8107480:	370c      	adds	r7, #12
 8107482:	46bd      	mov	sp, r7
 8107484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107488:	4770      	bx	lr

0810748a <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 810748a:	b580      	push	{r7, lr}
 810748c:	b082      	sub	sp, #8
 810748e:	af00      	add	r7, sp, #0
 8107490:	6078      	str	r0, [r7, #4]
 8107492:	460b      	mov	r3, r1
 8107494:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8107496:	687b      	ldr	r3, [r7, #4]
 8107498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810749a:	6a1b      	ldr	r3, [r3, #32]
 810749c:	685b      	ldr	r3, [r3, #4]
 810749e:	687a      	ldr	r2, [r7, #4]
 81074a0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 81074a2:	78f9      	ldrb	r1, [r7, #3]
 81074a4:	4610      	mov	r0, r2
 81074a6:	4798      	blx	r3
}
 81074a8:	bf00      	nop
 81074aa:	3708      	adds	r7, #8
 81074ac:	46bd      	mov	sp, r7
 81074ae:	bd80      	pop	{r7, pc}

081074b0 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 81074b0:	b580      	push	{r7, lr}
 81074b2:	b082      	sub	sp, #8
 81074b4:	af00      	add	r7, sp, #0
 81074b6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81074bc:	6a1b      	ldr	r3, [r3, #32]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	687a      	ldr	r2, [r7, #4]
 81074c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 81074c4:	4610      	mov	r0, r2
 81074c6:	4798      	blx	r3
 81074c8:	4603      	mov	r3, r0
}
 81074ca:	4618      	mov	r0, r3
 81074cc:	3708      	adds	r7, #8
 81074ce:	46bd      	mov	sp, r7
 81074d0:	bd80      	pop	{r7, pc}

081074d2 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 81074d2:	b580      	push	{r7, lr}
 81074d4:	b082      	sub	sp, #8
 81074d6:	af00      	add	r7, sp, #0
 81074d8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81074de:	6a1b      	ldr	r3, [r3, #32]
 81074e0:	689b      	ldr	r3, [r3, #8]
 81074e2:	687a      	ldr	r2, [r7, #4]
 81074e4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 81074e6:	4610      	mov	r0, r2
 81074e8:	4798      	blx	r3
 81074ea:	4603      	mov	r3, r0
}
 81074ec:	4618      	mov	r0, r3
 81074ee:	3708      	adds	r7, #8
 81074f0:	46bd      	mov	sp, r7
 81074f2:	bd80      	pop	{r7, pc}

081074f4 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 81074f4:	b580      	push	{r7, lr}
 81074f6:	b086      	sub	sp, #24
 81074f8:	af02      	add	r7, sp, #8
 81074fa:	60f8      	str	r0, [r7, #12]
 81074fc:	60b9      	str	r1, [r7, #8]
 81074fe:	607a      	str	r2, [r7, #4]
 8107500:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8107502:	68fb      	ldr	r3, [r7, #12]
 8107504:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8107506:	68b9      	ldr	r1, [r7, #8]
 8107508:	69bb      	ldr	r3, [r7, #24]
 810750a:	9300      	str	r3, [sp, #0]
 810750c:	683b      	ldr	r3, [r7, #0]
 810750e:	687a      	ldr	r2, [r7, #4]
 8107510:	f000 fb4a 	bl	8107ba8 <virtio_create_virtqueues>
 8107514:	4603      	mov	r3, r0
					callbacks);
}
 8107516:	4618      	mov	r0, r3
 8107518:	3710      	adds	r7, #16
 810751a:	46bd      	mov	sp, r7
 810751c:	bd80      	pop	{r7, pc}

0810751e <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 810751e:	b580      	push	{r7, lr}
 8107520:	b082      	sub	sp, #8
 8107522:	af00      	add	r7, sp, #0
 8107524:	6078      	str	r0, [r7, #4]
 8107526:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8107528:	f04f 33ff 	mov.w	r3, #4294967295
 810752c:	683a      	ldr	r2, [r7, #0]
 810752e:	2100      	movs	r1, #0
 8107530:	6878      	ldr	r0, [r7, #4]
 8107532:	f7ff fdad 	bl	8107090 <rpmsg_get_endpoint>
 8107536:	4603      	mov	r3, r0
}
 8107538:	4618      	mov	r0, r3
 810753a:	3708      	adds	r7, #8
 810753c:	46bd      	mov	sp, r7
 810753e:	bd80      	pop	{r7, pc}

08107540 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8107540:	b480      	push	{r7}
 8107542:	b085      	sub	sp, #20
 8107544:	af00      	add	r7, sp, #0
 8107546:	60f8      	str	r0, [r7, #12]
 8107548:	60b9      	str	r1, [r7, #8]
 810754a:	607a      	str	r2, [r7, #4]
	if (!shpool)
 810754c:	68fb      	ldr	r3, [r7, #12]
 810754e:	2b00      	cmp	r3, #0
 8107550:	d01d      	beq.n	810758e <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8107552:	68fb      	ldr	r3, [r7, #12]
 8107554:	68ba      	ldr	r2, [r7, #8]
 8107556:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	f003 0303 	and.w	r3, r3, #3
 810755e:	2b00      	cmp	r3, #0
 8107560:	d004      	beq.n	810756c <rpmsg_virtio_init_shm_pool+0x2c>
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	f023 0303 	bic.w	r3, r3, #3
 8107568:	3304      	adds	r3, #4
 810756a:	e000      	b.n	810756e <rpmsg_virtio_init_shm_pool+0x2e>
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	68fa      	ldr	r2, [r7, #12]
 8107570:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	f003 0303 	and.w	r3, r3, #3
 8107578:	2b00      	cmp	r3, #0
 810757a:	d004      	beq.n	8107586 <rpmsg_virtio_init_shm_pool+0x46>
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	f023 0303 	bic.w	r3, r3, #3
 8107582:	3304      	adds	r3, #4
 8107584:	e000      	b.n	8107588 <rpmsg_virtio_init_shm_pool+0x48>
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	68fa      	ldr	r2, [r7, #12]
 810758a:	6053      	str	r3, [r2, #4]
 810758c:	e000      	b.n	8107590 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 810758e:	bf00      	nop
}
 8107590:	3714      	adds	r7, #20
 8107592:	46bd      	mov	sp, r7
 8107594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107598:	4770      	bx	lr

0810759a <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810759a:	b580      	push	{r7, lr}
 810759c:	b086      	sub	sp, #24
 810759e:	af00      	add	r7, sp, #0
 81075a0:	60f8      	str	r0, [r7, #12]
 81075a2:	60b9      	str	r1, [r7, #8]
 81075a4:	607a      	str	r2, [r7, #4]
 81075a6:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81075a8:	68f8      	ldr	r0, [r7, #12]
 81075aa:	f7ff ff61 	bl	8107470 <rpmsg_virtio_get_role>
 81075ae:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81075b0:	697b      	ldr	r3, [r7, #20]
 81075b2:	2b01      	cmp	r3, #1
 81075b4:	d106      	bne.n	81075c4 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 81075b6:	68fb      	ldr	r3, [r7, #12]
 81075b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81075ba:	8879      	ldrh	r1, [r7, #2]
 81075bc:	687a      	ldr	r2, [r7, #4]
 81075be:	4618      	mov	r0, r3
 81075c0:	f000 fc9c 	bl	8107efc <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 81075c4:	bf00      	nop
 81075c6:	3718      	adds	r7, #24
 81075c8:	46bd      	mov	sp, r7
 81075ca:	bd80      	pop	{r7, pc}

081075cc <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 81075cc:	b580      	push	{r7, lr}
 81075ce:	b086      	sub	sp, #24
 81075d0:	af00      	add	r7, sp, #0
 81075d2:	60f8      	str	r0, [r7, #12]
 81075d4:	60b9      	str	r1, [r7, #8]
 81075d6:	607a      	str	r2, [r7, #4]
 81075d8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81075da:	68f8      	ldr	r0, [r7, #12]
 81075dc:	f7ff ff48 	bl	8107470 <rpmsg_virtio_get_role>
 81075e0:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81075e2:	697b      	ldr	r3, [r7, #20]
 81075e4:	2b01      	cmp	r3, #1
 81075e6:	d108      	bne.n	81075fa <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 81075e8:	68fb      	ldr	r3, [r7, #12]
 81075ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81075ec:	8879      	ldrh	r1, [r7, #2]
 81075ee:	687a      	ldr	r2, [r7, #4]
 81075f0:	4618      	mov	r0, r3
 81075f2:	f000 fc83 	bl	8107efc <virtqueue_add_consumed_buffer>
 81075f6:	4603      	mov	r3, r0
 81075f8:	e000      	b.n	81075fc <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 81075fa:	2300      	movs	r3, #0
}
 81075fc:	4618      	mov	r0, r3
 81075fe:	3718      	adds	r7, #24
 8107600:	46bd      	mov	sp, r7
 8107602:	bd80      	pop	{r7, pc}

08107604 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8107604:	b580      	push	{r7, lr}
 8107606:	b086      	sub	sp, #24
 8107608:	af00      	add	r7, sp, #0
 810760a:	60f8      	str	r0, [r7, #12]
 810760c:	60b9      	str	r1, [r7, #8]
 810760e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107610:	68f8      	ldr	r0, [r7, #12]
 8107612:	f7ff ff2d 	bl	8107470 <rpmsg_virtio_get_role>
 8107616:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8107618:	2300      	movs	r3, #0
 810761a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810761c:	693b      	ldr	r3, [r7, #16]
 810761e:	2b01      	cmp	r3, #1
 8107620:	d107      	bne.n	8107632 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107626:	68ba      	ldr	r2, [r7, #8]
 8107628:	6879      	ldr	r1, [r7, #4]
 810762a:	4618      	mov	r0, r3
 810762c:	f000 fc20 	bl	8107e70 <virtqueue_get_available_buffer>
 8107630:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8107632:	697b      	ldr	r3, [r7, #20]
}
 8107634:	4618      	mov	r0, r3
 8107636:	3718      	adds	r7, #24
 8107638:	46bd      	mov	sp, r7
 810763a:	bd80      	pop	{r7, pc}

0810763c <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 810763c:	b580      	push	{r7, lr}
 810763e:	b086      	sub	sp, #24
 8107640:	af00      	add	r7, sp, #0
 8107642:	60f8      	str	r0, [r7, #12]
 8107644:	60b9      	str	r1, [r7, #8]
 8107646:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8107648:	68f8      	ldr	r0, [r7, #12]
 810764a:	f7ff ff11 	bl	8107470 <rpmsg_virtio_get_role>
 810764e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8107650:	2300      	movs	r3, #0
 8107652:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107654:	693b      	ldr	r3, [r7, #16]
 8107656:	2b01      	cmp	r3, #1
 8107658:	d107      	bne.n	810766a <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 810765a:	68fb      	ldr	r3, [r7, #12]
 810765c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810765e:	68ba      	ldr	r2, [r7, #8]
 8107660:	6879      	ldr	r1, [r7, #4]
 8107662:	4618      	mov	r0, r3
 8107664:	f000 fc04 	bl	8107e70 <virtqueue_get_available_buffer>
 8107668:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 810766a:	697b      	ldr	r3, [r7, #20]
 810766c:	2b00      	cmp	r3, #0
 810766e:	d005      	beq.n	810767c <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8107670:	68bb      	ldr	r3, [r7, #8]
 8107672:	681b      	ldr	r3, [r3, #0]
 8107674:	4619      	mov	r1, r3
 8107676:	6978      	ldr	r0, [r7, #20]
 8107678:	f7ff fe2b 	bl	81072d2 <metal_cache_invalidate>
	}

	return data;
 810767c:	697b      	ldr	r3, [r7, #20]
}
 810767e:	4618      	mov	r0, r3
 8107680:	3718      	adds	r7, #24
 8107682:	46bd      	mov	sp, r7
 8107684:	bd80      	pop	{r7, pc}

08107686 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8107686:	b580      	push	{r7, lr}
 8107688:	b084      	sub	sp, #16
 810768a:	af00      	add	r7, sp, #0
 810768c:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 810768e:	6878      	ldr	r0, [r7, #4]
 8107690:	f7ff ff0e 	bl	81074b0 <rpmsg_virtio_get_status>
 8107694:	4603      	mov	r3, r0
 8107696:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8107698:	7bfb      	ldrb	r3, [r7, #15]
 810769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810769e:	2b00      	cmp	r3, #0
 81076a0:	d004      	beq.n	81076ac <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 81076a2:	2100      	movs	r1, #0
 81076a4:	6878      	ldr	r0, [r7, #4]
 81076a6:	f7ff fef0 	bl	810748a <rpmsg_virtio_set_status>
 81076aa:	e7f0      	b.n	810768e <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 81076ac:	7bfb      	ldrb	r3, [r7, #15]
 81076ae:	f003 0304 	and.w	r3, r3, #4
 81076b2:	2b00      	cmp	r3, #0
 81076b4:	d0eb      	beq.n	810768e <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 81076b6:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 81076b8:	4618      	mov	r0, r3
 81076ba:	3710      	adds	r7, #16
 81076bc:	46bd      	mov	sp, r7
 81076be:	bd80      	pop	{r7, pc}

081076c0 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 81076c0:	b580      	push	{r7, lr}
 81076c2:	b084      	sub	sp, #16
 81076c4:	af00      	add	r7, sp, #0
 81076c6:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81076c8:	6878      	ldr	r0, [r7, #4]
 81076ca:	f7ff fed1 	bl	8107470 <rpmsg_virtio_get_role>
 81076ce:	60b8      	str	r0, [r7, #8]
	int length = 0;
 81076d0:	2300      	movs	r3, #0
 81076d2:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81076d4:	68bb      	ldr	r3, [r7, #8]
 81076d6:	2b01      	cmp	r3, #1
 81076d8:	d107      	bne.n	81076ea <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 81076da:	687b      	ldr	r3, [r7, #4]
 81076dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81076de:	4618      	mov	r0, r3
 81076e0:	f000 fc86 	bl	8107ff0 <virtqueue_get_desc_size>
 81076e4:	4603      	mov	r3, r0
 81076e6:	3b10      	subs	r3, #16
		length =
 81076e8:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 81076ea:	68fb      	ldr	r3, [r7, #12]
}
 81076ec:	4618      	mov	r0, r3
 81076ee:	3710      	adds	r7, #16
 81076f0:	46bd      	mov	sp, r7
 81076f2:	bd80      	pop	{r7, pc}

081076f4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 81076f4:	b580      	push	{r7, lr}
 81076f6:	b090      	sub	sp, #64	; 0x40
 81076f8:	af00      	add	r7, sp, #0
 81076fa:	60f8      	str	r0, [r7, #12]
 81076fc:	60b9      	str	r1, [r7, #8]
 81076fe:	607a      	str	r2, [r7, #4]
 8107700:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8107702:	2300      	movs	r3, #0
 8107704:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8107706:	2300      	movs	r3, #0
 8107708:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 810770a:	68fb      	ldr	r3, [r7, #12]
 810770c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 810770e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8107710:	f7ff fece 	bl	81074b0 <rpmsg_virtio_get_status>
 8107714:	4603      	mov	r3, r0
 8107716:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8107718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810771a:	f003 0304 	and.w	r3, r3, #4
 810771e:	2b00      	cmp	r3, #0
 8107720:	d101      	bne.n	8107726 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8107722:	4b45      	ldr	r3, [pc, #276]	; (8107838 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8107724:	e083      	b.n	810782e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8107726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107728:	2b00      	cmp	r3, #0
 810772a:	d003      	beq.n	8107734 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 810772c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8107730:	63bb      	str	r3, [r7, #56]	; 0x38
 8107732:	e001      	b.n	8107738 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8107734:	2300      	movs	r3, #0
 8107736:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8107738:	68fb      	ldr	r3, [r7, #12]
 810773a:	3358      	adds	r3, #88	; 0x58
 810773c:	4618      	mov	r0, r3
 810773e:	f7ff fe64 	bl	810740a <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8107742:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8107744:	f7ff ffbc 	bl	81076c0 <_rpmsg_virtio_get_buffer_size>
 8107748:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 810774a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810774e:	429a      	cmp	r2, r3
 8107750:	dc08      	bgt.n	8107764 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8107752:	f107 0216 	add.w	r2, r7, #22
 8107756:	f107 0310 	add.w	r3, r7, #16
 810775a:	4619      	mov	r1, r3
 810775c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810775e:	f7ff ff51 	bl	8107604 <rpmsg_virtio_get_tx_buffer>
 8107762:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8107764:	68fb      	ldr	r3, [r7, #12]
 8107766:	3358      	adds	r3, #88	; 0x58
 8107768:	4618      	mov	r0, r3
 810776a:	f7ff fe59 	bl	8107420 <metal_mutex_release>
		if (buffer || !tick_count)
 810776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107770:	2b00      	cmp	r3, #0
 8107772:	d10e      	bne.n	8107792 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8107774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107776:	2b00      	cmp	r3, #0
 8107778:	d00b      	beq.n	8107792 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 810777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810777c:	2b00      	cmp	r3, #0
 810777e:	d001      	beq.n	8107784 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8107780:	4b2e      	ldr	r3, [pc, #184]	; (810783c <rpmsg_virtio_send_offchannel_raw+0x148>)
 8107782:	e054      	b.n	810782e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8107784:	200a      	movs	r0, #10
 8107786:	f7ff fdbc 	bl	8107302 <metal_sleep_usec>
		tick_count--;
 810778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810778c:	3b01      	subs	r3, #1
 810778e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8107790:	e7d2      	b.n	8107738 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8107792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107794:	2b00      	cmp	r3, #0
 8107796:	d101      	bne.n	810779c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8107798:	4b29      	ldr	r3, [pc, #164]	; (8107840 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 810779a:	e048      	b.n	810782e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 81077a0:	68bb      	ldr	r3, [r7, #8]
 81077a2:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 81077a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81077a6:	b29b      	uxth	r3, r3
 81077a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 81077aa:	2300      	movs	r3, #0
 81077ac:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 81077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81077b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81077b2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 81077b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81077b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81077b8:	f7ff fdc0 	bl	810733c <metal_io_virt_to_offset>
 81077bc:	4601      	mov	r1, r0
 81077be:	f107 0218 	add.w	r2, r7, #24
 81077c2:	2310      	movs	r3, #16
 81077c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81077c6:	f7fe ff5a 	bl	810667e <metal_io_block_write>
 81077ca:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 81077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81077ce:	2b10      	cmp	r3, #16
 81077d0:	d000      	beq.n	81077d4 <rpmsg_virtio_send_offchannel_raw+0xe0>
 81077d2:	e7fe      	b.n	81077d2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 81077d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81077d6:	3310      	adds	r3, #16
 81077d8:	4619      	mov	r1, r3
 81077da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81077dc:	f7ff fdae 	bl	810733c <metal_io_virt_to_offset>
 81077e0:	4601      	mov	r1, r0
 81077e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81077e4:	683a      	ldr	r2, [r7, #0]
 81077e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81077e8:	f7fe ff49 	bl	810667e <metal_io_block_write>
 81077ec:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 81077ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81077f2:	429a      	cmp	r2, r3
 81077f4:	d000      	beq.n	81077f8 <rpmsg_virtio_send_offchannel_raw+0x104>
 81077f6:	e7fe      	b.n	81077f6 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 81077f8:	68fb      	ldr	r3, [r7, #12]
 81077fa:	3358      	adds	r3, #88	; 0x58
 81077fc:	4618      	mov	r0, r3
 81077fe:	f7ff fe04 	bl	810740a <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8107802:	693a      	ldr	r2, [r7, #16]
 8107804:	8afb      	ldrh	r3, [r7, #22]
 8107806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8107808:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810780a:	f7ff fedf 	bl	81075cc <rpmsg_virtio_enqueue_buffer>
 810780e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8107810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107812:	2b00      	cmp	r3, #0
 8107814:	d000      	beq.n	8107818 <rpmsg_virtio_send_offchannel_raw+0x124>
 8107816:	e7fe      	b.n	8107816 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8107818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810781a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810781c:	4618      	mov	r0, r3
 810781e:	f000 fbd1 	bl	8107fc4 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8107822:	68fb      	ldr	r3, [r7, #12]
 8107824:	3358      	adds	r3, #88	; 0x58
 8107826:	4618      	mov	r0, r3
 8107828:	f7ff fdfa 	bl	8107420 <metal_mutex_release>

	return size;
 810782c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 810782e:	4618      	mov	r0, r3
 8107830:	3740      	adds	r7, #64	; 0x40
 8107832:	46bd      	mov	sp, r7
 8107834:	bd80      	pop	{r7, pc}
 8107836:	bf00      	nop
 8107838:	fffff82c 	.word	0xfffff82c
 810783c:	fffff82b 	.word	0xfffff82b
 8107840:	fffff82e 	.word	0xfffff82e

08107844 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8107844:	b480      	push	{r7}
 8107846:	b083      	sub	sp, #12
 8107848:	af00      	add	r7, sp, #0
 810784a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 810784c:	bf00      	nop
 810784e:	370c      	adds	r7, #12
 8107850:	46bd      	mov	sp, r7
 8107852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107856:	4770      	bx	lr

08107858 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8107858:	b590      	push	{r4, r7, lr}
 810785a:	b08d      	sub	sp, #52	; 0x34
 810785c:	af02      	add	r7, sp, #8
 810785e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8107866:	6a3b      	ldr	r3, [r7, #32]
 8107868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810786a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 810786c:	69fb      	ldr	r3, [r7, #28]
 810786e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8107870:	69bb      	ldr	r3, [r7, #24]
 8107872:	3358      	adds	r3, #88	; 0x58
 8107874:	4618      	mov	r0, r3
 8107876:	f7ff fdc8 	bl	810740a <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 810787a:	f107 020a 	add.w	r2, r7, #10
 810787e:	f107 030c 	add.w	r3, r7, #12
 8107882:	4619      	mov	r1, r3
 8107884:	69f8      	ldr	r0, [r7, #28]
 8107886:	f7ff fed9 	bl	810763c <rpmsg_virtio_get_rx_buffer>
 810788a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 810788c:	69bb      	ldr	r3, [r7, #24]
 810788e:	3358      	adds	r3, #88	; 0x58
 8107890:	4618      	mov	r0, r3
 8107892:	f7ff fdc5 	bl	8107420 <metal_mutex_release>

	while (rp_hdr) {
 8107896:	e04c      	b.n	8107932 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8107898:	69bb      	ldr	r3, [r7, #24]
 810789a:	3358      	adds	r3, #88	; 0x58
 810789c:	4618      	mov	r0, r3
 810789e:	f7ff fdb4 	bl	810740a <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 81078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81078a4:	685b      	ldr	r3, [r3, #4]
 81078a6:	4619      	mov	r1, r3
 81078a8:	69b8      	ldr	r0, [r7, #24]
 81078aa:	f7ff fe38 	bl	810751e <rpmsg_get_ept_from_addr>
 81078ae:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 81078b0:	69bb      	ldr	r3, [r7, #24]
 81078b2:	3358      	adds	r3, #88	; 0x58
 81078b4:	4618      	mov	r0, r3
 81078b6:	f7ff fdb3 	bl	8107420 <metal_mutex_release>

		if (!ept)
 81078ba:	697b      	ldr	r3, [r7, #20]
 81078bc:	2b00      	cmp	r3, #0
 81078be:	d03c      	beq.n	810793a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 81078c0:	697b      	ldr	r3, [r7, #20]
 81078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81078c8:	d103      	bne.n	81078d2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 81078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81078cc:	681a      	ldr	r2, [r3, #0]
 81078ce:	697b      	ldr	r3, [r7, #20]
 81078d0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 81078d2:	697b      	ldr	r3, [r7, #20]
 81078d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 81078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81078d8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 81078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81078de:	899b      	ldrh	r3, [r3, #12]
 81078e0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 81078e2:	4618      	mov	r0, r3
 81078e4:	697b      	ldr	r3, [r7, #20]
 81078e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81078e8:	697b      	ldr	r3, [r7, #20]
 81078ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81078ec:	9300      	str	r3, [sp, #0]
 81078ee:	4613      	mov	r3, r2
 81078f0:	4602      	mov	r2, r0
 81078f2:	6978      	ldr	r0, [r7, #20]
 81078f4:	47a0      	blx	r4
 81078f6:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 81078f8:	693b      	ldr	r3, [r7, #16]
 81078fa:	2b00      	cmp	r3, #0
 81078fc:	d000      	beq.n	8107900 <rpmsg_virtio_rx_callback+0xa8>
 81078fe:	e7fe      	b.n	81078fe <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8107900:	69bb      	ldr	r3, [r7, #24]
 8107902:	3358      	adds	r3, #88	; 0x58
 8107904:	4618      	mov	r0, r3
 8107906:	f7ff fd80 	bl	810740a <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 810790a:	68fa      	ldr	r2, [r7, #12]
 810790c:	897b      	ldrh	r3, [r7, #10]
 810790e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8107910:	69f8      	ldr	r0, [r7, #28]
 8107912:	f7ff fe42 	bl	810759a <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8107916:	f107 020a 	add.w	r2, r7, #10
 810791a:	f107 030c 	add.w	r3, r7, #12
 810791e:	4619      	mov	r1, r3
 8107920:	69f8      	ldr	r0, [r7, #28]
 8107922:	f7ff fe8b 	bl	810763c <rpmsg_virtio_get_rx_buffer>
 8107926:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8107928:	69bb      	ldr	r3, [r7, #24]
 810792a:	3358      	adds	r3, #88	; 0x58
 810792c:	4618      	mov	r0, r3
 810792e:	f7ff fd77 	bl	8107420 <metal_mutex_release>
	while (rp_hdr) {
 8107932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107934:	2b00      	cmp	r3, #0
 8107936:	d1af      	bne.n	8107898 <rpmsg_virtio_rx_callback+0x40>
 8107938:	e000      	b.n	810793c <rpmsg_virtio_rx_callback+0xe4>
			return;
 810793a:	bf00      	nop
	}
}
 810793c:	372c      	adds	r7, #44	; 0x2c
 810793e:	46bd      	mov	sp, r7
 8107940:	bd90      	pop	{r4, r7, pc}

08107942 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8107942:	b580      	push	{r7, lr}
 8107944:	b092      	sub	sp, #72	; 0x48
 8107946:	af00      	add	r7, sp, #0
 8107948:	60f8      	str	r0, [r7, #12]
 810794a:	60b9      	str	r1, [r7, #8]
 810794c:	607a      	str	r2, [r7, #4]
 810794e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8107950:	68fb      	ldr	r3, [r7, #12]
 8107952:	6a1b      	ldr	r3, [r3, #32]
 8107954:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8107956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107958:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 810795a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810795e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8107960:	68bb      	ldr	r3, [r7, #8]
 8107962:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	2b28      	cmp	r3, #40	; 0x28
 8107968:	d001      	beq.n	810796e <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 810796a:	2300      	movs	r3, #0
 810796c:	e057      	b.n	8107a1e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 810796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8107970:	4619      	mov	r1, r3
 8107972:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8107974:	f7ff fce2 	bl	810733c <metal_io_virt_to_offset>
 8107978:	4601      	mov	r1, r0
 810797a:	f107 0210 	add.w	r2, r7, #16
 810797e:	2320      	movs	r3, #32
 8107980:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8107982:	f7fe fe05 	bl	8106590 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8107986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107988:	6a1b      	ldr	r3, [r3, #32]
 810798a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 810798c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810798e:	3358      	adds	r3, #88	; 0x58
 8107990:	4618      	mov	r0, r3
 8107992:	f7ff fd3a 	bl	810740a <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8107996:	f107 0110 	add.w	r1, r7, #16
 810799a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810799c:	f04f 32ff 	mov.w	r2, #4294967295
 81079a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81079a2:	f7ff fb75 	bl	8107090 <rpmsg_get_endpoint>
 81079a6:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 81079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81079ac:	f003 0301 	and.w	r3, r3, #1
 81079b0:	2b00      	cmp	r3, #0
 81079b2:	d017      	beq.n	81079e4 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 81079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81079b6:	2b00      	cmp	r3, #0
 81079b8:	d003      	beq.n	81079c2 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 81079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81079bc:	f04f 32ff 	mov.w	r2, #4294967295
 81079c0:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 81079c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81079c4:	3358      	adds	r3, #88	; 0x58
 81079c6:	4618      	mov	r0, r3
 81079c8:	f7ff fd2a 	bl	8107420 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 81079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81079ce:	2b00      	cmp	r3, #0
 81079d0:	d024      	beq.n	8107a1c <rpmsg_virtio_ns_callback+0xda>
 81079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079d6:	2b00      	cmp	r3, #0
 81079d8:	d020      	beq.n	8107a1c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 81079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079de:	68f8      	ldr	r0, [r7, #12]
 81079e0:	4798      	blx	r3
 81079e2:	e01b      	b.n	8107a1c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 81079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81079e6:	2b00      	cmp	r3, #0
 81079e8:	d110      	bne.n	8107a0c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 81079ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81079ec:	3358      	adds	r3, #88	; 0x58
 81079ee:	4618      	mov	r0, r3
 81079f0:	f7ff fd16 	bl	8107420 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 81079f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81079f8:	2b00      	cmp	r3, #0
 81079fa:	d00f      	beq.n	8107a1c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 81079fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81079fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107a00:	f107 0110 	add.w	r1, r7, #16
 8107a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107a06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8107a08:	4798      	blx	r3
 8107a0a:	e007      	b.n	8107a1c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8107a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107a10:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8107a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8107a14:	3358      	adds	r3, #88	; 0x58
 8107a16:	4618      	mov	r0, r3
 8107a18:	f7ff fd02 	bl	8107420 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8107a1c:	2300      	movs	r3, #0
}
 8107a1e:	4618      	mov	r0, r3
 8107a20:	3748      	adds	r7, #72	; 0x48
 8107a22:	46bd      	mov	sp, r7
 8107a24:	bd80      	pop	{r7, pc}
	...

08107a28 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8107a28:	b580      	push	{r7, lr}
 8107a2a:	b090      	sub	sp, #64	; 0x40
 8107a2c:	af02      	add	r7, sp, #8
 8107a2e:	60f8      	str	r0, [r7, #12]
 8107a30:	60b9      	str	r1, [r7, #8]
 8107a32:	607a      	str	r2, [r7, #4]
 8107a34:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8107a36:	68fb      	ldr	r3, [r7, #12]
 8107a38:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 8107a3a:	2264      	movs	r2, #100	; 0x64
 8107a3c:	2100      	movs	r1, #0
 8107a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107a40:	f002 fe12 	bl	810a668 <memset>
	metal_mutex_init(&rdev->lock);
 8107a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107a46:	3358      	adds	r3, #88	; 0x58
 8107a48:	4618      	mov	r0, r3
 8107a4a:	f7ff fcd3 	bl	81073f4 <metal_mutex_init>
	rvdev->vdev = vdev;
 8107a4e:	68fb      	ldr	r3, [r7, #12]
 8107a50:	68ba      	ldr	r2, [r7, #8]
 8107a52:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8107a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107a56:	687a      	ldr	r2, [r7, #4]
 8107a58:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8107a5a:	68bb      	ldr	r3, [r7, #8]
 8107a5c:	68fa      	ldr	r2, [r7, #12]
 8107a5e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8107a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107a62:	4a38      	ldr	r2, [pc, #224]	; (8107b44 <rpmsg_init_vdev+0x11c>)
 8107a64:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8107a66:	68f8      	ldr	r0, [r7, #12]
 8107a68:	f7ff fd02 	bl	8107470 <rpmsg_virtio_get_role>
 8107a6c:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8107a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107a70:	2b01      	cmp	r3, #1
 8107a72:	d112      	bne.n	8107a9a <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8107a74:	4b34      	ldr	r3, [pc, #208]	; (8107b48 <rpmsg_init_vdev+0x120>)
 8107a76:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8107a78:	4b34      	ldr	r3, [pc, #208]	; (8107b4c <rpmsg_init_vdev+0x124>)
 8107a7a:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8107a7c:	4b34      	ldr	r3, [pc, #208]	; (8107b50 <rpmsg_init_vdev+0x128>)
 8107a7e:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8107a80:	4b34      	ldr	r3, [pc, #208]	; (8107b54 <rpmsg_init_vdev+0x12c>)
 8107a82:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8107a84:	68bb      	ldr	r3, [r7, #8]
 8107a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a88:	3318      	adds	r3, #24
 8107a8a:	681a      	ldr	r2, [r3, #0]
 8107a8c:	68fb      	ldr	r3, [r7, #12]
 8107a8e:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8107a90:	68bb      	ldr	r3, [r7, #8]
 8107a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a94:	681a      	ldr	r2, [r3, #0]
 8107a96:	68fb      	ldr	r3, [r7, #12]
 8107a98:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8107a9a:	68fb      	ldr	r3, [r7, #12]
 8107a9c:	683a      	ldr	r2, [r7, #0]
 8107a9e:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8107aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107aa2:	2b01      	cmp	r3, #1
 8107aa4:	d102      	bne.n	8107aac <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8107aa6:	68f8      	ldr	r0, [r7, #12]
 8107aa8:	f7ff fded 	bl	8107686 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8107aac:	f107 0218 	add.w	r2, r7, #24
 8107ab0:	f107 0310 	add.w	r3, r7, #16
 8107ab4:	9300      	str	r3, [sp, #0]
 8107ab6:	4613      	mov	r3, r2
 8107ab8:	2202      	movs	r2, #2
 8107aba:	2100      	movs	r1, #0
 8107abc:	68f8      	ldr	r0, [r7, #12]
 8107abe:	f7ff fd19 	bl	81074f4 <rpmsg_virtio_create_virtqueues>
 8107ac2:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8107ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ac6:	2b00      	cmp	r3, #0
 8107ac8:	d001      	beq.n	8107ace <rpmsg_init_vdev+0xa6>
		return status;
 8107aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107acc:	e035      	b.n	8107b3a <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8107ace:	2300      	movs	r3, #0
 8107ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8107ad2:	e00f      	b.n	8107af4 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8107ad4:	68bb      	ldr	r3, [r7, #8]
 8107ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8107ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107ada:	4613      	mov	r3, r2
 8107adc:	005b      	lsls	r3, r3, #1
 8107ade:	4413      	add	r3, r2
 8107ae0:	00db      	lsls	r3, r3, #3
 8107ae2:	440b      	add	r3, r1
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8107ae8:	6a3b      	ldr	r3, [r7, #32]
 8107aea:	683a      	ldr	r2, [r7, #0]
 8107aec:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8107aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107af0:	3301      	adds	r3, #1
 8107af2:	637b      	str	r3, [r7, #52]	; 0x34
 8107af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107af6:	2b01      	cmp	r3, #1
 8107af8:	d9ec      	bls.n	8107ad4 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8107afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107afc:	4618      	mov	r0, r3
 8107afe:	f7ff fc0c 	bl	810731a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8107b02:	68f8      	ldr	r0, [r7, #12]
 8107b04:	f7ff fce5 	bl	81074d2 <rpmsg_virtio_get_features>
 8107b08:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8107b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107b0c:	f003 0301 	and.w	r3, r3, #1
 8107b10:	2b00      	cmp	r3, #0
 8107b12:	d011      	beq.n	8107b38 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8107b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107b16:	f103 0008 	add.w	r0, r3, #8
 8107b1a:	2300      	movs	r3, #0
 8107b1c:	9301      	str	r3, [sp, #4]
 8107b1e:	4b0e      	ldr	r3, [pc, #56]	; (8107b58 <rpmsg_init_vdev+0x130>)
 8107b20:	9300      	str	r3, [sp, #0]
 8107b22:	2335      	movs	r3, #53	; 0x35
 8107b24:	2235      	movs	r2, #53	; 0x35
 8107b26:	490d      	ldr	r1, [pc, #52]	; (8107b5c <rpmsg_init_vdev+0x134>)
 8107b28:	f7ff fc85 	bl	8107436 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8107b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107b2e:	3308      	adds	r3, #8
 8107b30:	4619      	mov	r1, r3
 8107b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107b34:	f7ff fb2e 	bl	8107194 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8107b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8107b3a:	4618      	mov	r0, r3
 8107b3c:	3738      	adds	r7, #56	; 0x38
 8107b3e:	46bd      	mov	sp, r7
 8107b40:	bd80      	pop	{r7, pc}
 8107b42:	bf00      	nop
 8107b44:	081076f5 	.word	0x081076f5
 8107b48:	0810f020 	.word	0x0810f020
 8107b4c:	0810f028 	.word	0x0810f028
 8107b50:	08107845 	.word	0x08107845
 8107b54:	08107859 	.word	0x08107859
 8107b58:	08107943 	.word	0x08107943
 8107b5c:	0810f030 	.word	0x0810f030

08107b60 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8107b60:	b480      	push	{r7}
 8107b62:	b083      	sub	sp, #12
 8107b64:	af00      	add	r7, sp, #0
 8107b66:	6078      	str	r0, [r7, #4]
 8107b68:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8107b6a:	bf00      	nop
 8107b6c:	370c      	adds	r7, #12
 8107b6e:	46bd      	mov	sp, r7
 8107b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b74:	4770      	bx	lr

08107b76 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8107b76:	b480      	push	{r7}
 8107b78:	b083      	sub	sp, #12
 8107b7a:	af00      	add	r7, sp, #0
 8107b7c:	6078      	str	r0, [r7, #4]
 8107b7e:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8107b80:	bf00      	nop
 8107b82:	370c      	adds	r7, #12
 8107b84:	46bd      	mov	sp, r7
 8107b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b8a:	4770      	bx	lr

08107b8c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8107b8c:	b480      	push	{r7}
 8107b8e:	b085      	sub	sp, #20
 8107b90:	af00      	add	r7, sp, #0
 8107b92:	60f8      	str	r0, [r7, #12]
 8107b94:	60b9      	str	r1, [r7, #8]
 8107b96:	607a      	str	r2, [r7, #4]
 8107b98:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8107b9a:	68fb      	ldr	r3, [r7, #12]
}
 8107b9c:	4618      	mov	r0, r3
 8107b9e:	3714      	adds	r7, #20
 8107ba0:	46bd      	mov	sp, r7
 8107ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ba6:	4770      	bx	lr

08107ba8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8107ba8:	b590      	push	{r4, r7, lr}
 8107baa:	b08f      	sub	sp, #60	; 0x3c
 8107bac:	af04      	add	r7, sp, #16
 8107bae:	60f8      	str	r0, [r7, #12]
 8107bb0:	60b9      	str	r1, [r7, #8]
 8107bb2:	607a      	str	r2, [r7, #4]
 8107bb4:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8107bb6:	68fb      	ldr	r3, [r7, #12]
 8107bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bba:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8107bbc:	687a      	ldr	r2, [r7, #4]
 8107bbe:	6a3b      	ldr	r3, [r7, #32]
 8107bc0:	429a      	cmp	r2, r3
 8107bc2:	d902      	bls.n	8107bca <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8107bc4:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8107bc8:	e036      	b.n	8107c38 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8107bca:	2300      	movs	r3, #0
 8107bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8107bce:	e02e      	b.n	8107c2e <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8107bd0:	68fb      	ldr	r3, [r7, #12]
 8107bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8107bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107bd6:	4613      	mov	r3, r2
 8107bd8:	005b      	lsls	r3, r3, #1
 8107bda:	4413      	add	r3, r2
 8107bdc:	00db      	lsls	r3, r3, #3
 8107bde:	440b      	add	r3, r1
 8107be0:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 8107be2:	69fb      	ldr	r3, [r7, #28]
 8107be4:	3304      	adds	r3, #4
 8107be6:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8107be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107bea:	b298      	uxth	r0, r3
 8107bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107bee:	009b      	lsls	r3, r3, #2
 8107bf0:	683a      	ldr	r2, [r7, #0]
 8107bf2:	4413      	add	r3, r2
 8107bf4:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8107bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107bf8:	009b      	lsls	r3, r3, #2
 8107bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107bfc:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8107bfe:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8107c00:	68fa      	ldr	r2, [r7, #12]
 8107c02:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8107c04:	6a12      	ldr	r2, [r2, #32]
 8107c06:	69f9      	ldr	r1, [r7, #28]
 8107c08:	6809      	ldr	r1, [r1, #0]
 8107c0a:	9102      	str	r1, [sp, #8]
 8107c0c:	9201      	str	r2, [sp, #4]
 8107c0e:	9300      	str	r3, [sp, #0]
 8107c10:	69bb      	ldr	r3, [r7, #24]
 8107c12:	4622      	mov	r2, r4
 8107c14:	4601      	mov	r1, r0
 8107c16:	68f8      	ldr	r0, [r7, #12]
 8107c18:	f000 f8f6 	bl	8107e08 <virtqueue_create>
 8107c1c:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8107c1e:	697b      	ldr	r3, [r7, #20]
 8107c20:	2b00      	cmp	r3, #0
 8107c22:	d001      	beq.n	8107c28 <virtio_create_virtqueues+0x80>
			return ret;
 8107c24:	697b      	ldr	r3, [r7, #20]
 8107c26:	e007      	b.n	8107c38 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8107c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107c2a:	3301      	adds	r3, #1
 8107c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8107c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	429a      	cmp	r2, r3
 8107c34:	d3cc      	bcc.n	8107bd0 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8107c36:	2300      	movs	r3, #0
}
 8107c38:	4618      	mov	r0, r3
 8107c3a:	372c      	adds	r7, #44	; 0x2c
 8107c3c:	46bd      	mov	sp, r7
 8107c3e:	bd90      	pop	{r4, r7, pc}

08107c40 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8107c40:	b480      	push	{r7}
 8107c42:	b085      	sub	sp, #20
 8107c44:	af00      	add	r7, sp, #0
 8107c46:	60f8      	str	r0, [r7, #12]
 8107c48:	60b9      	str	r1, [r7, #8]
 8107c4a:	607a      	str	r2, [r7, #4]
 8107c4c:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8107c4e:	68fb      	ldr	r3, [r7, #12]
 8107c50:	68ba      	ldr	r2, [r7, #8]
 8107c52:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8107c54:	68fb      	ldr	r3, [r7, #12]
 8107c56:	687a      	ldr	r2, [r7, #4]
 8107c58:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8107c5a:	68bb      	ldr	r3, [r7, #8]
 8107c5c:	011b      	lsls	r3, r3, #4
 8107c5e:	687a      	ldr	r2, [r7, #4]
 8107c60:	441a      	add	r2, r3
 8107c62:	68fb      	ldr	r3, [r7, #12]
 8107c64:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8107c66:	68fb      	ldr	r3, [r7, #12]
 8107c68:	689a      	ldr	r2, [r3, #8]
 8107c6a:	68bb      	ldr	r3, [r7, #8]
 8107c6c:	005b      	lsls	r3, r3, #1
 8107c6e:	4413      	add	r3, r2
 8107c70:	3304      	adds	r3, #4
 8107c72:	461a      	mov	r2, r3
 8107c74:	683b      	ldr	r3, [r7, #0]
 8107c76:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8107c78:	1c5a      	adds	r2, r3, #1
 8107c7a:	683b      	ldr	r3, [r7, #0]
 8107c7c:	425b      	negs	r3, r3
 8107c7e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8107c80:	461a      	mov	r2, r3
 8107c82:	68fb      	ldr	r3, [r7, #12]
 8107c84:	60da      	str	r2, [r3, #12]
}
 8107c86:	bf00      	nop
 8107c88:	3714      	adds	r7, #20
 8107c8a:	46bd      	mov	sp, r7
 8107c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c90:	4770      	bx	lr

08107c92 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8107c92:	b480      	push	{r7}
 8107c94:	b083      	sub	sp, #12
 8107c96:	af00      	add	r7, sp, #0
 8107c98:	4603      	mov	r3, r0
 8107c9a:	80fb      	strh	r3, [r7, #6]
 8107c9c:	460b      	mov	r3, r1
 8107c9e:	80bb      	strh	r3, [r7, #4]
 8107ca0:	4613      	mov	r3, r2
 8107ca2:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8107ca4:	88ba      	ldrh	r2, [r7, #4]
 8107ca6:	88fb      	ldrh	r3, [r7, #6]
 8107ca8:	1ad3      	subs	r3, r2, r3
 8107caa:	b29b      	uxth	r3, r3
 8107cac:	3b01      	subs	r3, #1
 8107cae:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8107cb0:	88b9      	ldrh	r1, [r7, #4]
 8107cb2:	887b      	ldrh	r3, [r7, #2]
 8107cb4:	1acb      	subs	r3, r1, r3
 8107cb6:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8107cb8:	429a      	cmp	r2, r3
 8107cba:	bf34      	ite	cc
 8107cbc:	2301      	movcc	r3, #1
 8107cbe:	2300      	movcs	r3, #0
 8107cc0:	b2db      	uxtb	r3, r3
}
 8107cc2:	4618      	mov	r0, r3
 8107cc4:	370c      	adds	r7, #12
 8107cc6:	46bd      	mov	sp, r7
 8107cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ccc:	4770      	bx	lr

08107cce <metal_io_virt>:
{
 8107cce:	b480      	push	{r7}
 8107cd0:	b083      	sub	sp, #12
 8107cd2:	af00      	add	r7, sp, #0
 8107cd4:	6078      	str	r0, [r7, #4]
 8107cd6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8107cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107ce0:	d009      	beq.n	8107cf6 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	689b      	ldr	r3, [r3, #8]
 8107ce6:	683a      	ldr	r2, [r7, #0]
 8107ce8:	429a      	cmp	r2, r3
 8107cea:	d804      	bhi.n	8107cf6 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8107cf0:	683b      	ldr	r3, [r7, #0]
 8107cf2:	4413      	add	r3, r2
 8107cf4:	e000      	b.n	8107cf8 <metal_io_virt+0x2a>
 8107cf6:	2300      	movs	r3, #0
}
 8107cf8:	4618      	mov	r0, r3
 8107cfa:	370c      	adds	r7, #12
 8107cfc:	46bd      	mov	sp, r7
 8107cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d02:	4770      	bx	lr

08107d04 <metal_io_phys>:
{
 8107d04:	b480      	push	{r7}
 8107d06:	b085      	sub	sp, #20
 8107d08:	af00      	add	r7, sp, #0
 8107d0a:	6078      	str	r0, [r7, #4]
 8107d0c:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8107d12:	2b1f      	cmp	r3, #31
 8107d14:	d805      	bhi.n	8107d22 <metal_io_phys+0x1e>
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	68db      	ldr	r3, [r3, #12]
 8107d1a:	683a      	ldr	r2, [r7, #0]
 8107d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8107d20:	e000      	b.n	8107d24 <metal_io_phys+0x20>
 8107d22:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8107d24:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8107d2a:	2b00      	cmp	r3, #0
 8107d2c:	d010      	beq.n	8107d50 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	689b      	ldr	r3, [r3, #8]
 8107d32:	683a      	ldr	r2, [r7, #0]
 8107d34:	429a      	cmp	r2, r3
 8107d36:	d80b      	bhi.n	8107d50 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	685a      	ldr	r2, [r3, #4]
 8107d3c:	68fb      	ldr	r3, [r7, #12]
 8107d3e:	009b      	lsls	r3, r3, #2
 8107d40:	4413      	add	r3, r2
 8107d42:	681a      	ldr	r2, [r3, #0]
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	6919      	ldr	r1, [r3, #16]
 8107d48:	683b      	ldr	r3, [r7, #0]
 8107d4a:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8107d4c:	4413      	add	r3, r2
 8107d4e:	e001      	b.n	8107d54 <metal_io_phys+0x50>
 8107d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8107d54:	4618      	mov	r0, r3
 8107d56:	3714      	adds	r7, #20
 8107d58:	46bd      	mov	sp, r7
 8107d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d5e:	4770      	bx	lr

08107d60 <metal_io_phys_to_offset>:
{
 8107d60:	b580      	push	{r7, lr}
 8107d62:	b084      	sub	sp, #16
 8107d64:	af00      	add	r7, sp, #0
 8107d66:	6078      	str	r0, [r7, #4]
 8107d68:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8107d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107d72:	d105      	bne.n	8107d80 <metal_io_phys_to_offset+0x20>
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	685b      	ldr	r3, [r3, #4]
 8107d78:	681b      	ldr	r3, [r3, #0]
 8107d7a:	683a      	ldr	r2, [r7, #0]
 8107d7c:	1ad3      	subs	r3, r2, r3
 8107d7e:	e003      	b.n	8107d88 <metal_io_phys_to_offset+0x28>
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	691a      	ldr	r2, [r3, #16]
 8107d84:	683b      	ldr	r3, [r7, #0]
 8107d86:	4013      	ands	r3, r2
	unsigned long offset =
 8107d88:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8107d8a:	68f9      	ldr	r1, [r7, #12]
 8107d8c:	6878      	ldr	r0, [r7, #4]
 8107d8e:	f7ff ffb9 	bl	8107d04 <metal_io_phys>
 8107d92:	4602      	mov	r2, r0
 8107d94:	683b      	ldr	r3, [r7, #0]
 8107d96:	4293      	cmp	r3, r2
 8107d98:	d101      	bne.n	8107d9e <metal_io_phys_to_offset+0x3e>
			return offset;
 8107d9a:	68fb      	ldr	r3, [r7, #12]
 8107d9c:	e00c      	b.n	8107db8 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	691a      	ldr	r2, [r3, #16]
 8107da2:	68fb      	ldr	r3, [r7, #12]
 8107da4:	4413      	add	r3, r2
 8107da6:	3301      	adds	r3, #1
 8107da8:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8107daa:	687b      	ldr	r3, [r7, #4]
 8107dac:	689b      	ldr	r3, [r3, #8]
 8107dae:	68fa      	ldr	r2, [r7, #12]
 8107db0:	429a      	cmp	r2, r3
 8107db2:	d3ea      	bcc.n	8107d8a <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8107db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8107db8:	4618      	mov	r0, r3
 8107dba:	3710      	adds	r7, #16
 8107dbc:	46bd      	mov	sp, r7
 8107dbe:	bd80      	pop	{r7, pc}

08107dc0 <metal_io_phys_to_virt>:
{
 8107dc0:	b580      	push	{r7, lr}
 8107dc2:	b082      	sub	sp, #8
 8107dc4:	af00      	add	r7, sp, #0
 8107dc6:	6078      	str	r0, [r7, #4]
 8107dc8:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8107dca:	6839      	ldr	r1, [r7, #0]
 8107dcc:	6878      	ldr	r0, [r7, #4]
 8107dce:	f7ff ffc7 	bl	8107d60 <metal_io_phys_to_offset>
 8107dd2:	4603      	mov	r3, r0
 8107dd4:	4619      	mov	r1, r3
 8107dd6:	6878      	ldr	r0, [r7, #4]
 8107dd8:	f7ff ff79 	bl	8107cce <metal_io_virt>
 8107ddc:	4603      	mov	r3, r0
}
 8107dde:	4618      	mov	r0, r3
 8107de0:	3708      	adds	r7, #8
 8107de2:	46bd      	mov	sp, r7
 8107de4:	bd80      	pop	{r7, pc}

08107de6 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8107de6:	b580      	push	{r7, lr}
 8107de8:	b084      	sub	sp, #16
 8107dea:	af00      	add	r7, sp, #0
 8107dec:	6078      	str	r0, [r7, #4]
 8107dee:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107df4:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8107df6:	6839      	ldr	r1, [r7, #0]
 8107df8:	68f8      	ldr	r0, [r7, #12]
 8107dfa:	f7ff ffe1 	bl	8107dc0 <metal_io_phys_to_virt>
 8107dfe:	4603      	mov	r3, r0
}
 8107e00:	4618      	mov	r0, r3
 8107e02:	3710      	adds	r7, #16
 8107e04:	46bd      	mov	sp, r7
 8107e06:	bd80      	pop	{r7, pc}

08107e08 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8107e08:	b580      	push	{r7, lr}
 8107e0a:	b086      	sub	sp, #24
 8107e0c:	af00      	add	r7, sp, #0
 8107e0e:	60f8      	str	r0, [r7, #12]
 8107e10:	607a      	str	r2, [r7, #4]
 8107e12:	603b      	str	r3, [r7, #0]
 8107e14:	460b      	mov	r3, r1
 8107e16:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8107e18:	2300      	movs	r3, #0
 8107e1a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8107e1c:	697b      	ldr	r3, [r7, #20]
 8107e1e:	2b00      	cmp	r3, #0
 8107e20:	d121      	bne.n	8107e66 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8107e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e24:	68fa      	ldr	r2, [r7, #12]
 8107e26:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8107e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e2a:	687a      	ldr	r2, [r7, #4]
 8107e2c:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8107e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e30:	897a      	ldrh	r2, [r7, #10]
 8107e32:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8107e34:	683b      	ldr	r3, [r7, #0]
 8107e36:	891a      	ldrh	r2, [r3, #8]
 8107e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e3a:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8107e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e3e:	895a      	ldrh	r2, [r3, #10]
 8107e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e42:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8107e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e46:	6a3a      	ldr	r2, [r7, #32]
 8107e48:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8107e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107e4e:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8107e50:	683b      	ldr	r3, [r7, #0]
 8107e52:	6819      	ldr	r1, [r3, #0]
 8107e54:	683b      	ldr	r3, [r7, #0]
 8107e56:	685b      	ldr	r3, [r3, #4]
 8107e58:	461a      	mov	r2, r3
 8107e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107e5c:	f000 f8fb 	bl	8108056 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8107e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107e62:	f000 f885 	bl	8107f70 <virtqueue_disable_cb>
	}

	return (status);
 8107e66:	697b      	ldr	r3, [r7, #20]
}
 8107e68:	4618      	mov	r0, r3
 8107e6a:	3718      	adds	r7, #24
 8107e6c:	46bd      	mov	sp, r7
 8107e6e:	bd80      	pop	{r7, pc}

08107e70 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8107e70:	b580      	push	{r7, lr}
 8107e72:	b086      	sub	sp, #24
 8107e74:	af00      	add	r7, sp, #0
 8107e76:	60f8      	str	r0, [r7, #12]
 8107e78:	60b9      	str	r1, [r7, #8]
 8107e7a:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8107e7c:	2300      	movs	r3, #0
 8107e7e:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8107e80:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8107e88:	68fb      	ldr	r3, [r7, #12]
 8107e8a:	6a1b      	ldr	r3, [r3, #32]
 8107e8c:	885b      	ldrh	r3, [r3, #2]
 8107e8e:	429a      	cmp	r2, r3
 8107e90:	d101      	bne.n	8107e96 <virtqueue_get_available_buffer+0x26>
		return NULL;
 8107e92:	2300      	movs	r3, #0
 8107e94:	e02e      	b.n	8107ef4 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8107e96:	68fb      	ldr	r3, [r7, #12]
 8107e98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8107e9a:	1c5a      	adds	r2, r3, #1
 8107e9c:	b291      	uxth	r1, r2
 8107e9e:	68fa      	ldr	r2, [r7, #12]
 8107ea0:	8691      	strh	r1, [r2, #52]	; 0x34
 8107ea2:	b21a      	sxth	r2, r3
 8107ea4:	68fb      	ldr	r3, [r7, #12]
 8107ea6:	895b      	ldrh	r3, [r3, #10]
 8107ea8:	3b01      	subs	r3, #1
 8107eaa:	b29b      	uxth	r3, r3
 8107eac:	b21b      	sxth	r3, r3
 8107eae:	4013      	ands	r3, r2
 8107eb0:	b21b      	sxth	r3, r3
 8107eb2:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8107eb4:	68fb      	ldr	r3, [r7, #12]
 8107eb6:	6a1a      	ldr	r2, [r3, #32]
 8107eb8:	8afb      	ldrh	r3, [r7, #22]
 8107eba:	005b      	lsls	r3, r3, #1
 8107ebc:	4413      	add	r3, r2
 8107ebe:	889a      	ldrh	r2, [r3, #4]
 8107ec0:	68bb      	ldr	r3, [r7, #8]
 8107ec2:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8107ec4:	68fb      	ldr	r3, [r7, #12]
 8107ec6:	69da      	ldr	r2, [r3, #28]
 8107ec8:	68bb      	ldr	r3, [r7, #8]
 8107eca:	881b      	ldrh	r3, [r3, #0]
 8107ecc:	011b      	lsls	r3, r3, #4
 8107ece:	4413      	add	r3, r2
 8107ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ed4:	4613      	mov	r3, r2
 8107ed6:	4619      	mov	r1, r3
 8107ed8:	68f8      	ldr	r0, [r7, #12]
 8107eda:	f7ff ff84 	bl	8107de6 <virtqueue_phys_to_virt>
 8107ede:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8107ee0:	68fb      	ldr	r3, [r7, #12]
 8107ee2:	69da      	ldr	r2, [r3, #28]
 8107ee4:	68bb      	ldr	r3, [r7, #8]
 8107ee6:	881b      	ldrh	r3, [r3, #0]
 8107ee8:	011b      	lsls	r3, r3, #4
 8107eea:	4413      	add	r3, r2
 8107eec:	689a      	ldr	r2, [r3, #8]
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8107ef2:	693b      	ldr	r3, [r7, #16]
}
 8107ef4:	4618      	mov	r0, r3
 8107ef6:	3718      	adds	r7, #24
 8107ef8:	46bd      	mov	sp, r7
 8107efa:	bd80      	pop	{r7, pc}

08107efc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8107efc:	b480      	push	{r7}
 8107efe:	b087      	sub	sp, #28
 8107f00:	af00      	add	r7, sp, #0
 8107f02:	60f8      	str	r0, [r7, #12]
 8107f04:	460b      	mov	r3, r1
 8107f06:	607a      	str	r2, [r7, #4]
 8107f08:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8107f0a:	2300      	movs	r3, #0
 8107f0c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8107f0e:	68fb      	ldr	r3, [r7, #12]
 8107f10:	895b      	ldrh	r3, [r3, #10]
 8107f12:	897a      	ldrh	r2, [r7, #10]
 8107f14:	429a      	cmp	r2, r3
 8107f16:	d901      	bls.n	8107f1c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8107f18:	4b14      	ldr	r3, [pc, #80]	; (8107f6c <virtqueue_add_consumed_buffer+0x70>)
 8107f1a:	e021      	b.n	8107f60 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8107f1c:	68fb      	ldr	r3, [r7, #12]
 8107f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f20:	885b      	ldrh	r3, [r3, #2]
 8107f22:	b21a      	sxth	r2, r3
 8107f24:	68fb      	ldr	r3, [r7, #12]
 8107f26:	895b      	ldrh	r3, [r3, #10]
 8107f28:	3b01      	subs	r3, #1
 8107f2a:	b29b      	uxth	r3, r3
 8107f2c:	b21b      	sxth	r3, r3
 8107f2e:	4013      	ands	r3, r2
 8107f30:	b21b      	sxth	r3, r3
 8107f32:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8107f34:	68fb      	ldr	r3, [r7, #12]
 8107f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107f38:	8a7b      	ldrh	r3, [r7, #18]
 8107f3a:	00db      	lsls	r3, r3, #3
 8107f3c:	4413      	add	r3, r2
 8107f3e:	3304      	adds	r3, #4
 8107f40:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8107f42:	897a      	ldrh	r2, [r7, #10]
 8107f44:	697b      	ldr	r3, [r7, #20]
 8107f46:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8107f48:	697b      	ldr	r3, [r7, #20]
 8107f4a:	687a      	ldr	r2, [r7, #4]
 8107f4c:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8107f4e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8107f52:	68fb      	ldr	r3, [r7, #12]
 8107f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f56:	885a      	ldrh	r2, [r3, #2]
 8107f58:	3201      	adds	r2, #1
 8107f5a:	b292      	uxth	r2, r2
 8107f5c:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8107f5e:	2300      	movs	r3, #0
}
 8107f60:	4618      	mov	r0, r3
 8107f62:	371c      	adds	r7, #28
 8107f64:	46bd      	mov	sp, r7
 8107f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f6a:	4770      	bx	lr
 8107f6c:	fffff441 	.word	0xfffff441

08107f70 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8107f70:	b480      	push	{r7}
 8107f72:	b083      	sub	sp, #12
 8107f74:	af00      	add	r7, sp, #0
 8107f76:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	68db      	ldr	r3, [r3, #12]
 8107f7c:	f003 0302 	and.w	r3, r3, #2
 8107f80:	2b00      	cmp	r3, #0
 8107f82:	d010      	beq.n	8107fa6 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	895b      	ldrh	r3, [r3, #10]
 8107f8c:	1ad3      	subs	r3, r2, r3
 8107f8e:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	6a1a      	ldr	r2, [r3, #32]
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8107f98:	3901      	subs	r1, #1
 8107f9a:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8107f9c:	005b      	lsls	r3, r3, #1
 8107f9e:	4413      	add	r3, r2
 8107fa0:	460a      	mov	r2, r1
 8107fa2:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8107fa4:	e008      	b.n	8107fb8 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	6a1b      	ldr	r3, [r3, #32]
 8107faa:	881a      	ldrh	r2, [r3, #0]
 8107fac:	687b      	ldr	r3, [r7, #4]
 8107fae:	6a1b      	ldr	r3, [r3, #32]
 8107fb0:	f042 0201 	orr.w	r2, r2, #1
 8107fb4:	b292      	uxth	r2, r2
 8107fb6:	801a      	strh	r2, [r3, #0]
}
 8107fb8:	bf00      	nop
 8107fba:	370c      	adds	r7, #12
 8107fbc:	46bd      	mov	sp, r7
 8107fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fc2:	4770      	bx	lr

08107fc4 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8107fc4:	b580      	push	{r7, lr}
 8107fc6:	b082      	sub	sp, #8
 8107fc8:	af00      	add	r7, sp, #0
 8107fca:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8107fcc:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8107fd0:	6878      	ldr	r0, [r7, #4]
 8107fd2:	f000 f885 	bl	81080e0 <vq_ring_must_notify_host>
 8107fd6:	4603      	mov	r3, r0
 8107fd8:	2b00      	cmp	r3, #0
 8107fda:	d002      	beq.n	8107fe2 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8107fdc:	6878      	ldr	r0, [r7, #4]
 8107fde:	f000 f8b5 	bl	810814c <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	2200      	movs	r2, #0
 8107fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8107fe8:	bf00      	nop
 8107fea:	3708      	adds	r7, #8
 8107fec:	46bd      	mov	sp, r7
 8107fee:	bd80      	pop	{r7, pc}

08107ff0 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8107ff0:	b480      	push	{r7}
 8107ff2:	b085      	sub	sp, #20
 8107ff4:	af00      	add	r7, sp, #0
 8107ff6:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8107ff8:	2300      	movs	r3, #0
 8107ffa:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8107ffc:	2300      	movs	r3, #0
 8107ffe:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8108000:	2300      	movs	r3, #0
 8108002:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	6a1b      	ldr	r3, [r3, #32]
 810800c:	885b      	ldrh	r3, [r3, #2]
 810800e:	429a      	cmp	r2, r3
 8108010:	d101      	bne.n	8108016 <virtqueue_get_desc_size+0x26>
		return 0;
 8108012:	2300      	movs	r3, #0
 8108014:	e019      	b.n	810804a <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8108016:	687b      	ldr	r3, [r7, #4]
 8108018:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 810801a:	b21a      	sxth	r2, r3
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	895b      	ldrh	r3, [r3, #10]
 8108020:	3b01      	subs	r3, #1
 8108022:	b29b      	uxth	r3, r3
 8108024:	b21b      	sxth	r3, r3
 8108026:	4013      	ands	r3, r2
 8108028:	b21b      	sxth	r3, r3
 810802a:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	6a1a      	ldr	r2, [r3, #32]
 8108030:	89fb      	ldrh	r3, [r7, #14]
 8108032:	005b      	lsls	r3, r3, #1
 8108034:	4413      	add	r3, r2
 8108036:	889b      	ldrh	r3, [r3, #4]
 8108038:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	69da      	ldr	r2, [r3, #28]
 810803e:	89bb      	ldrh	r3, [r7, #12]
 8108040:	011b      	lsls	r3, r3, #4
 8108042:	4413      	add	r3, r2
 8108044:	689b      	ldr	r3, [r3, #8]
 8108046:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8108048:	68bb      	ldr	r3, [r7, #8]
}
 810804a:	4618      	mov	r0, r3
 810804c:	3714      	adds	r7, #20
 810804e:	46bd      	mov	sp, r7
 8108050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108054:	4770      	bx	lr

08108056 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8108056:	b580      	push	{r7, lr}
 8108058:	b088      	sub	sp, #32
 810805a:	af00      	add	r7, sp, #0
 810805c:	60f8      	str	r0, [r7, #12]
 810805e:	60b9      	str	r1, [r7, #8]
 8108060:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8108062:	68fb      	ldr	r3, [r7, #12]
 8108064:	895b      	ldrh	r3, [r3, #10]
 8108066:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8108068:	68fb      	ldr	r3, [r7, #12]
 810806a:	3318      	adds	r3, #24
 810806c:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 810806e:	69b9      	ldr	r1, [r7, #24]
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	68ba      	ldr	r2, [r7, #8]
 8108074:	6978      	ldr	r0, [r7, #20]
 8108076:	f7ff fde3 	bl	8107c40 <vring_init>

	for (i = 0; i < size - 1; i++)
 810807a:	2300      	movs	r3, #0
 810807c:	61fb      	str	r3, [r7, #28]
 810807e:	e00c      	b.n	810809a <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8108080:	69fb      	ldr	r3, [r7, #28]
 8108082:	b29a      	uxth	r2, r3
 8108084:	697b      	ldr	r3, [r7, #20]
 8108086:	6859      	ldr	r1, [r3, #4]
 8108088:	69fb      	ldr	r3, [r7, #28]
 810808a:	011b      	lsls	r3, r3, #4
 810808c:	440b      	add	r3, r1
 810808e:	3201      	adds	r2, #1
 8108090:	b292      	uxth	r2, r2
 8108092:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8108094:	69fb      	ldr	r3, [r7, #28]
 8108096:	3301      	adds	r3, #1
 8108098:	61fb      	str	r3, [r7, #28]
 810809a:	69bb      	ldr	r3, [r7, #24]
 810809c:	3b01      	subs	r3, #1
 810809e:	69fa      	ldr	r2, [r7, #28]
 81080a0:	429a      	cmp	r2, r3
 81080a2:	dbed      	blt.n	8108080 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 81080a4:	697b      	ldr	r3, [r7, #20]
 81080a6:	685a      	ldr	r2, [r3, #4]
 81080a8:	69fb      	ldr	r3, [r7, #28]
 81080aa:	011b      	lsls	r3, r3, #4
 81080ac:	4413      	add	r3, r2
 81080ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 81080b2:	81da      	strh	r2, [r3, #14]
}
 81080b4:	bf00      	nop
 81080b6:	3720      	adds	r7, #32
 81080b8:	46bd      	mov	sp, r7
 81080ba:	bd80      	pop	{r7, pc}

081080bc <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 81080bc:	b580      	push	{r7, lr}
 81080be:	b082      	sub	sp, #8
 81080c0:	af00      	add	r7, sp, #0
 81080c2:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 81080c4:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	691b      	ldr	r3, [r3, #16]
 81080cc:	2b00      	cmp	r3, #0
 81080ce:	d003      	beq.n	81080d8 <virtqueue_notification+0x1c>
		vq->callback(vq);
 81080d0:	687b      	ldr	r3, [r7, #4]
 81080d2:	691b      	ldr	r3, [r3, #16]
 81080d4:	6878      	ldr	r0, [r7, #4]
 81080d6:	4798      	blx	r3
}
 81080d8:	bf00      	nop
 81080da:	3708      	adds	r7, #8
 81080dc:	46bd      	mov	sp, r7
 81080de:	bd80      	pop	{r7, pc}

081080e0 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 81080e0:	b580      	push	{r7, lr}
 81080e2:	b084      	sub	sp, #16
 81080e4:	af00      	add	r7, sp, #0
 81080e6:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 81080e8:	687b      	ldr	r3, [r7, #4]
 81080ea:	68db      	ldr	r3, [r3, #12]
 81080ec:	f003 0302 	and.w	r3, r3, #2
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d01d      	beq.n	8108130 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	6a1b      	ldr	r3, [r3, #32]
 81080f8:	885b      	ldrh	r3, [r3, #2]
 81080fa:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108100:	89fa      	ldrh	r2, [r7, #14]
 8108102:	1ad3      	subs	r3, r2, r3
 8108104:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810810a:	687b      	ldr	r3, [r7, #4]
 810810c:	699b      	ldr	r3, [r3, #24]
 810810e:	00db      	lsls	r3, r3, #3
 8108110:	4413      	add	r3, r2
 8108112:	685b      	ldr	r3, [r3, #4]
 8108114:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8108116:	89ba      	ldrh	r2, [r7, #12]
 8108118:	89f9      	ldrh	r1, [r7, #14]
 810811a:	897b      	ldrh	r3, [r7, #10]
 810811c:	4618      	mov	r0, r3
 810811e:	f7ff fdb8 	bl	8107c92 <vring_need_event>
 8108122:	4603      	mov	r3, r0
 8108124:	2b00      	cmp	r3, #0
 8108126:	bf14      	ite	ne
 8108128:	2301      	movne	r3, #1
 810812a:	2300      	moveq	r3, #0
 810812c:	b2db      	uxtb	r3, r3
 810812e:	e009      	b.n	8108144 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108134:	881b      	ldrh	r3, [r3, #0]
 8108136:	f003 0301 	and.w	r3, r3, #1
 810813a:	2b00      	cmp	r3, #0
 810813c:	bf0c      	ite	eq
 810813e:	2301      	moveq	r3, #1
 8108140:	2300      	movne	r3, #0
 8108142:	b2db      	uxtb	r3, r3
}
 8108144:	4618      	mov	r0, r3
 8108146:	3710      	adds	r7, #16
 8108148:	46bd      	mov	sp, r7
 810814a:	bd80      	pop	{r7, pc}

0810814c <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 810814c:	b580      	push	{r7, lr}
 810814e:	b082      	sub	sp, #8
 8108150:	af00      	add	r7, sp, #0
 8108152:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8108154:	687b      	ldr	r3, [r7, #4]
 8108156:	695b      	ldr	r3, [r3, #20]
 8108158:	2b00      	cmp	r3, #0
 810815a:	d003      	beq.n	8108164 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	695b      	ldr	r3, [r3, #20]
 8108160:	6878      	ldr	r0, [r7, #4]
 8108162:	4798      	blx	r3
}
 8108164:	bf00      	nop
 8108166:	3708      	adds	r7, #8
 8108168:	46bd      	mov	sp, r7
 810816a:	bd80      	pop	{r7, pc}

0810816c <OneOverSqrt>:

#include "main.h"


float OneOverSqrt(float x)
{
 810816c:	b580      	push	{r7, lr}
 810816e:	b082      	sub	sp, #8
 8108170:	af00      	add	r7, sp, #0
 8108172:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (float)sqrt(x);
 8108176:	6878      	ldr	r0, [r7, #4]
 8108178:	f7f8 fa7e 	bl	8100678 <__aeabi_f2d>
 810817c:	4602      	mov	r2, r0
 810817e:	460b      	mov	r3, r1
 8108180:	ec43 2b10 	vmov	d0, r2, r3
 8108184:	f001 fc7c 	bl	8109a80 <sqrt>
 8108188:	ec53 2b10 	vmov	r2, r3, d0
 810818c:	4610      	mov	r0, r2
 810818e:	4619      	mov	r1, r3
 8108190:	f7f8 fdc2 	bl	8100d18 <__aeabi_d2f>
 8108194:	ee06 0a90 	vmov	s13, r0
 8108198:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810819c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81081a0:	eef0 7a47 	vmov.f32	s15, s14
}
 81081a4:	eeb0 0a67 	vmov.f32	s0, s15
 81081a8:	3708      	adds	r7, #8
 81081aa:	46bd      	mov	sp, r7
 81081ac:	bd80      	pop	{r7, pc}
	...

081081b0 <CalculateAngles>:

void CalculateAngles(tAHRSDATA *inputAHRS)
{
 81081b0:	b5b0      	push	{r4, r5, r7, lr}
 81081b2:	b08c      	sub	sp, #48	; 0x30
 81081b4:	af00      	add	r7, sp, #0
 81081b6:	6078      	str	r0, [r7, #4]
	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 81081b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 81081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 81081be:	f04f 0300 	mov.w	r3, #0
 81081c2:	62bb      	str	r3, [r7, #40]	; 0x28
 81081c4:	f04f 0300 	mov.w	r3, #0
 81081c8:	627b      	str	r3, [r7, #36]	; 0x24
 81081ca:	f04f 0300 	mov.w	r3, #0
 81081ce:	623b      	str	r3, [r7, #32]
    double AHRSIMU_RAD2DEG = 180 / PI;
 81081d0:	a38e      	add	r3, pc, #568	; (adr r3, 810840c <CalculateAngles+0x25c>)
 81081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float Roll;        /*!< Roll angle value. This parameter is in units of degrees */
    float Pitch;       /*!< Pitch angle value. This parameter is in units of degrees */
    float Yaw;         /*!< Yaw angle value. This parameter is in units of degrees */
    float Inclination = 3.5; /*!< Inclination in units of degrees */
 81081da:	4b89      	ldr	r3, [pc, #548]	; (8108400 <CalculateAngles+0x250>)
 81081dc:	617b      	str	r3, [r7, #20]

    q0 = inputAHRS->q0;
 81081de:	687b      	ldr	r3, [r7, #4]
 81081e0:	695b      	ldr	r3, [r3, #20]
 81081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    q1 = inputAHRS->q1;
 81081e4:	687b      	ldr	r3, [r7, #4]
 81081e6:	699b      	ldr	r3, [r3, #24]
 81081e8:	62bb      	str	r3, [r7, #40]	; 0x28
    q2 = inputAHRS->q2;
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	69db      	ldr	r3, [r3, #28]
 81081ee:	627b      	str	r3, [r7, #36]	; 0x24
    q3 = inputAHRS->q3;
 81081f0:	687b      	ldr	r3, [r7, #4]
 81081f2:	6a1b      	ldr	r3, [r3, #32]
 81081f4:	623b      	str	r3, [r7, #32]

    Roll = atan2(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2);
 81081f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 81081fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 81081fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108202:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8108206:	edd7 7a08 	vldr	s15, [r7, #32]
 810820a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810820e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108212:	ee17 0a90 	vmov	r0, s15
 8108216:	f7f8 fa2f 	bl	8100678 <__aeabi_f2d>
 810821a:	4604      	mov	r4, r0
 810821c:	460d      	mov	r5, r1
 810821e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8108222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810822a:	ee37 7a67 	vsub.f32	s14, s14, s15
 810822e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8108232:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108236:	ee77 7a67 	vsub.f32	s15, s14, s15
 810823a:	ee17 0a90 	vmov	r0, s15
 810823e:	f7f8 fa1b 	bl	8100678 <__aeabi_f2d>
 8108242:	4602      	mov	r2, r0
 8108244:	460b      	mov	r3, r1
 8108246:	ec43 2b11 	vmov	d1, r2, r3
 810824a:	ec45 4b10 	vmov	d0, r4, r5
 810824e:	f001 fc15 	bl	8109a7c <atan2>
 8108252:	ec53 2b10 	vmov	r2, r3, d0
 8108256:	4610      	mov	r0, r2
 8108258:	4619      	mov	r1, r3
 810825a:	f7f8 fd5d 	bl	8100d18 <__aeabi_d2f>
 810825e:	4603      	mov	r3, r0
 8108260:	613b      	str	r3, [r7, #16]
    Pitch = asin(-2.0f * (q1 * q3 - q0 * q2));
 8108262:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8108266:	edd7 7a08 	vldr	s15, [r7, #32]
 810826a:	ee27 7a27 	vmul.f32	s14, s14, s15
 810826e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8108272:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8108276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810827a:	ee77 7a67 	vsub.f32	s15, s14, s15
 810827e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8108282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8108286:	ee17 0a90 	vmov	r0, s15
 810828a:	f7f8 f9f5 	bl	8100678 <__aeabi_f2d>
 810828e:	4602      	mov	r2, r0
 8108290:	460b      	mov	r3, r1
 8108292:	ec43 2b10 	vmov	d0, r2, r3
 8108296:	f001 fbb7 	bl	8109a08 <asin>
 810829a:	ec53 2b10 	vmov	r2, r3, d0
 810829e:	4610      	mov	r0, r2
 81082a0:	4619      	mov	r1, r3
 81082a2:	f7f8 fd39 	bl	8100d18 <__aeabi_d2f>
 81082a6:	4603      	mov	r3, r0
 81082a8:	60fb      	str	r3, [r7, #12]
    Yaw = atan2(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3);
 81082aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 81082ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 81082b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 81082b6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 81082ba:	edd7 7a08 	vldr	s15, [r7, #32]
 81082be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81082c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81082c6:	ee17 0a90 	vmov	r0, s15
 81082ca:	f7f8 f9d5 	bl	8100678 <__aeabi_f2d>
 81082ce:	4604      	mov	r4, r0
 81082d0:	460d      	mov	r5, r1
 81082d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 81082d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81082da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81082de:	ee37 7a67 	vsub.f32	s14, s14, s15
 81082e2:	edd7 7a08 	vldr	s15, [r7, #32]
 81082e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81082ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 81082ee:	ee17 0a90 	vmov	r0, s15
 81082f2:	f7f8 f9c1 	bl	8100678 <__aeabi_f2d>
 81082f6:	4602      	mov	r2, r0
 81082f8:	460b      	mov	r3, r1
 81082fa:	ec43 2b11 	vmov	d1, r2, r3
 81082fe:	ec45 4b10 	vmov	d0, r4, r5
 8108302:	f001 fbbb 	bl	8109a7c <atan2>
 8108306:	ec53 2b10 	vmov	r2, r3, d0
 810830a:	4610      	mov	r0, r2
 810830c:	4619      	mov	r1, r3
 810830e:	f7f8 fd03 	bl	8100d18 <__aeabi_d2f>
 8108312:	4603      	mov	r3, r0
 8108314:	60bb      	str	r3, [r7, #8]

    /* Calculate degrees and remove inclination */
    Roll *= AHRSIMU_RAD2DEG;
 8108316:	6938      	ldr	r0, [r7, #16]
 8108318:	f7f8 f9ae 	bl	8100678 <__aeabi_f2d>
 810831c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8108320:	f7f8 fa02 	bl	8100728 <__aeabi_dmul>
 8108324:	4602      	mov	r2, r0
 8108326:	460b      	mov	r3, r1
 8108328:	4610      	mov	r0, r2
 810832a:	4619      	mov	r1, r3
 810832c:	f7f8 fcf4 	bl	8100d18 <__aeabi_d2f>
 8108330:	4603      	mov	r3, r0
 8108332:	613b      	str	r3, [r7, #16]
    Pitch *= AHRSIMU_RAD2DEG;
 8108334:	68f8      	ldr	r0, [r7, #12]
 8108336:	f7f8 f99f 	bl	8100678 <__aeabi_f2d>
 810833a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810833e:	f7f8 f9f3 	bl	8100728 <__aeabi_dmul>
 8108342:	4602      	mov	r2, r0
 8108344:	460b      	mov	r3, r1
 8108346:	4610      	mov	r0, r2
 8108348:	4619      	mov	r1, r3
 810834a:	f7f8 fce5 	bl	8100d18 <__aeabi_d2f>
 810834e:	4603      	mov	r3, r0
 8108350:	60fb      	str	r3, [r7, #12]
    Yaw = Yaw * AHRSIMU_RAD2DEG - Inclination;
 8108352:	68b8      	ldr	r0, [r7, #8]
 8108354:	f7f8 f990 	bl	8100678 <__aeabi_f2d>
 8108358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810835c:	f7f8 f9e4 	bl	8100728 <__aeabi_dmul>
 8108360:	4602      	mov	r2, r0
 8108362:	460b      	mov	r3, r1
 8108364:	4614      	mov	r4, r2
 8108366:	461d      	mov	r5, r3
 8108368:	6978      	ldr	r0, [r7, #20]
 810836a:	f7f8 f985 	bl	8100678 <__aeabi_f2d>
 810836e:	4602      	mov	r2, r0
 8108370:	460b      	mov	r3, r1
 8108372:	4620      	mov	r0, r4
 8108374:	4629      	mov	r1, r5
 8108376:	f7f8 f81f 	bl	81003b8 <__aeabi_dsub>
 810837a:	4602      	mov	r2, r0
 810837c:	460b      	mov	r3, r1
 810837e:	4610      	mov	r0, r2
 8108380:	4619      	mov	r1, r3
 8108382:	f7f8 fcc9 	bl	8100d18 <__aeabi_d2f>
 8108386:	4603      	mov	r3, r0
 8108388:	60bb      	str	r3, [r7, #8]

    inputAHRS->Roll = Roll;
 810838a:	687b      	ldr	r3, [r7, #4]
 810838c:	693a      	ldr	r2, [r7, #16]
 810838e:	601a      	str	r2, [r3, #0]
    inputAHRS->Pitch = Pitch;
 8108390:	687b      	ldr	r3, [r7, #4]
 8108392:	68fa      	ldr	r2, [r7, #12]
 8108394:	605a      	str	r2, [r3, #4]
    inputAHRS->Yaw = Yaw;
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	68ba      	ldr	r2, [r7, #8]
 810839a:	609a      	str	r2, [r3, #8]

    /* Check values because of inclination */
    if (Yaw < -180)
 810839c:	edd7 7a02 	vldr	s15, [r7, #8]
 81083a0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8108404 <CalculateAngles+0x254>
 81083a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 81083a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81083ac:	d50c      	bpl.n	81083c8 <CalculateAngles+0x218>
    {
        Yaw = 180.0f - (-180.0f - Yaw);
 81083ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8108404 <CalculateAngles+0x254>
 81083b2:	edd7 7a02 	vldr	s15, [r7, #8]
 81083b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81083ba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8108408 <CalculateAngles+0x258>
 81083be:	ee77 7a67 	vsub.f32	s15, s14, s15
 81083c2:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    else if (Yaw > 180)
    {
        Yaw = -180.0f - (180.0f - Yaw);
    }
}
 81083c6:	e015      	b.n	81083f4 <CalculateAngles+0x244>
    else if (Yaw > 180)
 81083c8:	edd7 7a02 	vldr	s15, [r7, #8]
 81083cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8108408 <CalculateAngles+0x258>
 81083d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 81083d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81083d8:	dc00      	bgt.n	81083dc <CalculateAngles+0x22c>
}
 81083da:	e00b      	b.n	81083f4 <CalculateAngles+0x244>
        Yaw = -180.0f - (180.0f - Yaw);
 81083dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8108408 <CalculateAngles+0x258>
 81083e0:	edd7 7a02 	vldr	s15, [r7, #8]
 81083e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 81083e8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8108404 <CalculateAngles+0x254>
 81083ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 81083f0:	edc7 7a02 	vstr	s15, [r7, #8]
}
 81083f4:	bf00      	nop
 81083f6:	3730      	adds	r7, #48	; 0x30
 81083f8:	46bd      	mov	sp, r7
 81083fa:	bdb0      	pop	{r4, r5, r7, pc}
 81083fc:	f3af 8000 	nop.w
 8108400:	40600000 	.word	0x40600000
 8108404:	c3340000 	.word	0xc3340000
 8108408:	43340000 	.word	0x43340000
 810840c:	1a63c1f8 	.word	0x1a63c1f8
 8108410:	404ca5dc 	.word	0x404ca5dc

08108414 <UpdateAHRS>:

void UpdateAHRS(tAHRSDATA *inputAHRS, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8108414:	b580      	push	{r7, lr}
 8108416:	b0b4      	sub	sp, #208	; 0xd0
 8108418:	af00      	add	r7, sp, #0
 810841a:	6278      	str	r0, [r7, #36]	; 0x24
 810841c:	ed87 0a08 	vstr	s0, [r7, #32]
 8108420:	edc7 0a07 	vstr	s1, [r7, #28]
 8108424:	ed87 1a06 	vstr	s2, [r7, #24]
 8108428:	edc7 1a05 	vstr	s3, [r7, #20]
 810842c:	ed87 2a04 	vstr	s4, [r7, #16]
 8108430:	edc7 2a03 	vstr	s5, [r7, #12]
 8108434:	ed87 3a02 	vstr	s6, [r7, #8]
 8108438:	edc7 3a01 	vstr	s7, [r7, #4]
 810843c:	ed87 4a00 	vstr	s8, [r7]
	float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;					// quaternion of sensor frame relative to auxiliary frame
 8108440:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8108444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8108448:	f04f 0300 	mov.w	r3, #0
 810844c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8108450:	f04f 0300 	mov.w	r3, #0
 8108454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8108458:	f04f 0300 	mov.w	r3, #0
 810845c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float sampleRate = 1/20.0;
 8108460:	4b5c      	ldr	r3, [pc, #368]	; (81085d4 <UpdateAHRS+0x1c0>)
 8108462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float recipNorm;
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float hx, hy;
    float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
    float beta = 0.3;
 8108466:	4b5c      	ldr	r3, [pc, #368]	; (81085d8 <UpdateAHRS+0x1c4>)
 8108468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    q0 = inputAHRS->q0;
 810846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810846e:	695b      	ldr	r3, [r3, #20]
 8108470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    q1 = inputAHRS->q1;
 8108474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108476:	699b      	ldr	r3, [r3, #24]
 8108478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    q2 = inputAHRS->q2;
 810847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810847e:	69db      	ldr	r3, [r3, #28]
 8108480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    q3 = inputAHRS->q3;
 8108484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108486:	6a1b      	ldr	r3, [r3, #32]
 8108488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    sampleRate = inputAHRS->sampleRate;
 810848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation) */
    if (( mx != 0.0f) || (my != 0.0f) || (mz != 0.0f))
 8108494:	edd7 7a02 	vldr	s15, [r7, #8]
 8108498:	eef5 7a40 	vcmp.f32	s15, #0.0
 810849c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81084a0:	d10e      	bne.n	81084c0 <UpdateAHRS+0xac>
 81084a2:	edd7 7a01 	vldr	s15, [r7, #4]
 81084a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 81084aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81084ae:	d107      	bne.n	81084c0 <UpdateAHRS+0xac>
 81084b0:	edd7 7a00 	vldr	s15, [r7]
 81084b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 81084b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81084bc:	f000 864c 	beq.w	8109158 <UpdateAHRS+0xd44>
    {
        /* Rate of change of quaternion from gyroscope */
        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 81084c0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81084c4:	eeb1 7a67 	vneg.f32	s14, s15
 81084c8:	edd7 7a08 	vldr	s15, [r7, #32]
 81084cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 81084d0:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 81084d4:	edd7 7a07 	vldr	s15, [r7, #28]
 81084d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81084dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 81084e0:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 81084e4:	edd7 7a06 	vldr	s15, [r7, #24]
 81084e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81084ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 81084f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 81084f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81084f8:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 81084fc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108500:	edd7 7a08 	vldr	s15, [r7, #32]
 8108504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108508:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 810850c:	edd7 7a06 	vldr	s15, [r7, #24]
 8108510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108518:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 810851c:	edd7 7a07 	vldr	s15, [r7, #28]
 8108520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108528:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810852c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8108530:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8108534:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108538:	edd7 7a07 	vldr	s15, [r7, #28]
 810853c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108540:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8108544:	edd7 7a06 	vldr	s15, [r7, #24]
 8108548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810854c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108550:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8108554:	edd7 7a08 	vldr	s15, [r7, #32]
 8108558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810855c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8108564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8108568:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 810856c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8108570:	edd7 7a06 	vldr	s15, [r7, #24]
 8108574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108578:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 810857c:	edd7 7a07 	vldr	s15, [r7, #28]
 8108580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108588:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 810858c:	edd7 7a08 	vldr	s15, [r7, #32]
 8108590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108598:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810859c:	ee67 7a87 	vmul.f32	s15, s15, s14
 81085a0:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

        /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
        if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 81085a4:	edd7 7a05 	vldr	s15, [r7, #20]
 81085a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 81085ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81085b0:	d114      	bne.n	81085dc <UpdateAHRS+0x1c8>
 81085b2:	edd7 7a04 	vldr	s15, [r7, #16]
 81085b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 81085ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81085be:	d10d      	bne.n	81085dc <UpdateAHRS+0x1c8>
 81085c0:	edd7 7a03 	vldr	s15, [r7, #12]
 81085c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 81085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81085cc:	f000 8548 	beq.w	8109060 <UpdateAHRS+0xc4c>
 81085d0:	e004      	b.n	81085dc <UpdateAHRS+0x1c8>
 81085d2:	bf00      	nop
 81085d4:	3d4ccccd 	.word	0x3d4ccccd
 81085d8:	3e99999a 	.word	0x3e99999a
        {

            /* Normalise accelerometer measurement */
            recipNorm = OneOverSqrt(ax * ax + ay * ay + az * az);
 81085dc:	edd7 7a05 	vldr	s15, [r7, #20]
 81085e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81085e4:	edd7 7a04 	vldr	s15, [r7, #16]
 81085e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81085ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 81085f0:	edd7 7a03 	vldr	s15, [r7, #12]
 81085f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81085f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81085fc:	eeb0 0a67 	vmov.f32	s0, s15
 8108600:	f7ff fdb4 	bl	810816c <OneOverSqrt>
 8108604:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            ax *= recipNorm;
 8108608:	ed97 7a05 	vldr	s14, [r7, #20]
 810860c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108614:	edc7 7a05 	vstr	s15, [r7, #20]
            ay *= recipNorm;
 8108618:	ed97 7a04 	vldr	s14, [r7, #16]
 810861c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108624:	edc7 7a04 	vstr	s15, [r7, #16]
            az *= recipNorm;
 8108628:	ed97 7a03 	vldr	s14, [r7, #12]
 810862c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108634:	edc7 7a03 	vstr	s15, [r7, #12]

            /* Normalise magnetometer measurement */
            recipNorm = OneOverSqrt(mx * mx + my * my + mz * mz);
 8108638:	edd7 7a02 	vldr	s15, [r7, #8]
 810863c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8108640:	edd7 7a01 	vldr	s15, [r7, #4]
 8108644:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108648:	ee37 7a27 	vadd.f32	s14, s14, s15
 810864c:	edd7 7a00 	vldr	s15, [r7]
 8108650:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108658:	eeb0 0a67 	vmov.f32	s0, s15
 810865c:	f7ff fd86 	bl	810816c <OneOverSqrt>
 8108660:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            mx *= recipNorm;
 8108664:	ed97 7a02 	vldr	s14, [r7, #8]
 8108668:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 810866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108670:	edc7 7a02 	vstr	s15, [r7, #8]
            my *= recipNorm;
 8108674:	ed97 7a01 	vldr	s14, [r7, #4]
 8108678:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 810867c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108680:	edc7 7a01 	vstr	s15, [r7, #4]
            mz *= recipNorm;
 8108684:	ed97 7a00 	vldr	s14, [r7]
 8108688:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 810868c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108690:	edc7 7a00 	vstr	s15, [r7]

            /* Auxiliary variables to avoid repeated arithmetic */
            _2q0mx = 2.0f * q0 * mx;
 8108694:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108698:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810869c:	ed97 7a02 	vldr	s14, [r7, #8]
 81086a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086a4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            _2q0my = 2.0f * q0 * my;
 81086a8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81086ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81086b0:	ed97 7a01 	vldr	s14, [r7, #4]
 81086b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086b8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            _2q0mz = 2.0f * q0 * mz;
 81086bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81086c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81086c4:	ed97 7a00 	vldr	s14, [r7]
 81086c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086cc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            _2q1mx = 2.0f * q1 * mx;
 81086d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81086d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81086d8:	ed97 7a02 	vldr	s14, [r7, #8]
 81086dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086e0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            _2q0 = 2.0f * q0;
 81086e4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81086e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81086ec:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            _2q1 = 2.0f * q1;
 81086f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81086f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81086f8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            _2q2 = 2.0f * q2;
 81086fc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108700:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108704:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            _2q3 = 2.0f * q3;
 8108708:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 810870c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108710:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            _2q0q2 = 2.0f * q0 * q2;
 8108714:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810871c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8108720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108724:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            _2q2q3 = 2.0f * q2 * q3;
 8108728:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 810872c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108730:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8108734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108738:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            q0q0 = q0 * q0;
 810873c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108740:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108744:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            q0q1 = q0 * q1;
 8108748:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 810874c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108754:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            q0q2 = q0 * q2;
 8108758:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 810875c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108764:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            q0q3 = q0 * q3;
 8108768:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 810876c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108774:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            q1q1 = q1 * q1;
 8108778:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 810877c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108780:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            q1q2 = q1 * q2;
 8108784:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108788:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 810878c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108790:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            q1q3 = q1 * q3;
 8108794:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8108798:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 810879c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087a0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
            q2q2 = q2 * q2;
 81087a4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81087a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81087ac:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            q2q3 = q2 * q3;
 81087b0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 81087b4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81087b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087bc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            q3q3 = q3 * q3;
 81087c0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81087c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81087c8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

            /* Reference direction of Earth's magnetic field */
            hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 81087cc:	ed97 7a02 	vldr	s14, [r7, #8]
 81087d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 81087d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 81087d8:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 81087dc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81087e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81087e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81087e8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 81087ec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81087f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81087f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 81087f8:	edd7 6a02 	vldr	s13, [r7, #8]
 81087fc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108808:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 810880c:	edd7 7a01 	vldr	s15, [r7, #4]
 8108810:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108814:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810881c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108820:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8108824:	edd7 7a00 	vldr	s15, [r7]
 8108828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 810882c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108838:	edd7 6a02 	vldr	s13, [r7, #8]
 810883c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108848:	edd7 6a02 	vldr	s13, [r7, #8]
 810884c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108858:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 810885c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8108860:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108868:	edd7 6a01 	vldr	s13, [r7, #4]
 810886c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8108870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108878:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 810887c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108888:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 810888c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108898:	edd7 6a01 	vldr	s13, [r7, #4]
 810889c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 81088a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81088a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 81088a8:	edd7 6a01 	vldr	s13, [r7, #4]
 81088ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81088b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81088b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 81088b8:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 81088bc:	edd7 7a00 	vldr	s15, [r7]
 81088c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81088c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81088c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81088cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 81088d0:	edd7 6a01 	vldr	s13, [r7, #4]
 81088d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 81088d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81088dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 81088e0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            _2bx = sqrt(hx * hx + hy * hy);
 81088e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 81088e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81088ec:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 81088f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81088f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81088f8:	ee17 0a90 	vmov	r0, s15
 81088fc:	f7f7 febc 	bl	8100678 <__aeabi_f2d>
 8108900:	4602      	mov	r2, r0
 8108902:	460b      	mov	r3, r1
 8108904:	ec43 2b10 	vmov	d0, r2, r3
 8108908:	f001 f8ba 	bl	8109a80 <sqrt>
 810890c:	ec53 2b10 	vmov	r2, r3, d0
 8108910:	4610      	mov	r0, r2
 8108912:	4619      	mov	r1, r3
 8108914:	f7f8 fa00 	bl	8100d18 <__aeabi_d2f>
 8108918:	4603      	mov	r3, r0
 810891a:	64bb      	str	r3, [r7, #72]	; 0x48
            _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 810891c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8108920:	eeb1 7a67 	vneg.f32	s14, s15
 8108924:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108928:	ee27 7a27 	vmul.f32	s14, s14, s15
 810892c:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8108930:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108938:	ee37 7a27 	vadd.f32	s14, s14, s15
 810893c:	edd7 6a00 	vldr	s13, [r7]
 8108940:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8108944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108948:	ee37 7a27 	vadd.f32	s14, s14, s15
 810894c:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8108950:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108958:	ee37 7a27 	vadd.f32	s14, s14, s15
 810895c:	edd7 6a00 	vldr	s13, [r7]
 8108960:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108968:	ee37 7a67 	vsub.f32	s14, s14, s15
 810896c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8108970:	edd7 7a01 	vldr	s15, [r7, #4]
 8108974:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108978:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 810897c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108984:	edd7 6a00 	vldr	s13, [r7]
 8108988:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 810898c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108994:	edd7 6a00 	vldr	s13, [r7]
 8108998:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 810899c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81089a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 81089a4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            _4bx = 2.0f * _2bx;
 81089a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 81089ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81089b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            _4bz = 2.0f * _2bz;
 81089b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 81089b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81089bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            /* Gradient decent algorithm corrective step */
            s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 81089c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 81089c4:	eeb1 7a67 	vneg.f32	s14, s15
 81089c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 81089cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 81089d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 81089d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 81089d8:	edd7 7a05 	vldr	s15, [r7, #20]
 81089dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81089e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81089e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 81089e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 81089ec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 81089f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 81089f4:	edd7 7a04 	vldr	s15, [r7, #16]
 81089f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 81089fc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8108a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108a08:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8108a0c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108a10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108a14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8108a18:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108a1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108a20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108a24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108a28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108a2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108a30:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8108a34:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8108a38:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108a3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108a40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108a44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8108a4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108a58:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108a5c:	eef1 6a67 	vneg.f32	s13, s15
 8108a60:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108a64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108a68:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108a6c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108a70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108a74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108a78:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108a7c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108a80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108a84:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108a88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108a8c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108a90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8108a94:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108a98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108a9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108aa0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8108aa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108ab4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108ab8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108abc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108ac0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8108ac4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108ac8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108acc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108ad0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108ad4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108ad8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108adc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108ae0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108ae4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108ae8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108aec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108af4:	edd7 7a00 	vldr	s15, [r7]
 8108af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108b04:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8108b08:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108b0c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8108b10:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8108b14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8108b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108b20:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8108b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108b28:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8108b2c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108b30:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8108b34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108b38:	edd7 7a04 	vldr	s15, [r7, #16]
 8108b3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108b40:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8108b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108b4c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108b50:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8108b54:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8108b58:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108b5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108b60:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8108b64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108b68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108b6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108b70:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8108b78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108b84:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8108b88:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108b90:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8108b94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108b98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108b9c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108ba0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108ba4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108ba8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108bac:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8108bb0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8108bb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108bb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108bbc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108bc0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8108bc8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108bd4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108bd8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108be0:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108be4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108be8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108bec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108bf0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108bf4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108bf8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108bfc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108c00:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108c04:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108c08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8108c0c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108c10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108c14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108c18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108c1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8108c20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108c2c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108c30:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108c34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108c38:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8108c3c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108c40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108c44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108c48:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8108c4c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108c50:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108c54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108c58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108c5c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108c60:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108c64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108c68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108c6c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108c70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108c74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108c78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108c7c:	edd7 7a00 	vldr	s15, [r7]
 8108c80:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108c8c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8108c90:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8108c94:	eeb1 7a67 	vneg.f32	s14, s15
 8108c98:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108c9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108ca0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8108ca4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108ca8:	edd7 7a05 	vldr	s15, [r7, #20]
 8108cac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8108cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108cb4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8108cb8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108cbc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8108cc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108cc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8108cc8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108ccc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8108cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108cd8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108cdc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8108ce0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8108ce4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108ce8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108cec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8108cf0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108cf4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108cf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108cfc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8108d04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108d10:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8108d14:	eef1 6a67 	vneg.f32	s13, s15
 8108d18:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108d1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108d20:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108d24:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108d28:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108d2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108d30:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8108d34:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108d38:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108d3c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108d40:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108d44:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108d48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108d4c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8108d50:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8108d54:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108d58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108d5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108d60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8108d68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108d74:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108d78:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108d7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108d80:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108d84:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108d88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108d8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108d90:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108d94:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108d98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108d9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108da0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108da4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108da8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8108dac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108db0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108db4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108db8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8108dc0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108dcc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108dd0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108dd8:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8108ddc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108de0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108de4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108de8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8108dec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108df0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108df4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108df8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108dfc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108e00:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108e04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108e08:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108e0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108e10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108e14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108e18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108e1c:	edd7 7a00 	vldr	s15, [r7]
 8108e20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108e2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8108e30:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108e34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8108e38:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8108e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108e40:	edd7 7a05 	vldr	s15, [r7, #20]
 8108e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8108e48:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8108e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8108e50:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8108e54:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8108e58:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8108e5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108e60:	edd7 7a04 	vldr	s15, [r7, #16]
 8108e64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8108e68:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8108e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108e74:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8108e78:	eef1 6a67 	vneg.f32	s13, s15
 8108e7c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8108e80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108e84:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108e88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108e8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108e90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108e94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8108e98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108e9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108ea0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8108ea4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108ea8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108eac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108eb0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8108eb4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8108eb8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108ebc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108ec0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108ec4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8108ecc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108ed8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108edc:	eef1 6a67 	vneg.f32	s13, s15
 8108ee0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8108ee4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108ee8:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8108eec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8108ef0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8108ef4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8108ef8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8108efc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8108f00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8108f04:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108f08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108f0c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8108f10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8108f14:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8108f18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108f1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108f20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108f24:	edd7 7a01 	vldr	s15, [r7, #4]
 8108f28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108f34:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8108f38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8108f3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8108f40:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8108f44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8108f48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108f4c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8108f50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8108f54:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8108f58:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8108f5c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108f60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8108f64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108f68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8108f6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8108f70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8108f74:	edd7 7a00 	vldr	s15, [r7]
 8108f78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8108f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8108f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108f84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* normalise step magnitude */
            recipNorm = OneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8108f88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8108f8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8108f90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8108f94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108f98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108f9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8108fa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8108fa8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8108fac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8108fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8108fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8108fb8:	f7ff f8d8 	bl	810816c <OneOverSqrt>
 8108fbc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
            s0 *= recipNorm;
 8108fc0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8108fc4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108fcc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            s1 *= recipNorm;
 8108fd0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8108fd4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108fdc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            s2 *= recipNorm;
 8108fe0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8108fe4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108fec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            s3 *= recipNorm;
 8108ff0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8108ff4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8108ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ffc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            /* Apply feedback step */
            qDot1 -= beta * s0;
 8109000:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8109004:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8109008:	ee67 7a27 	vmul.f32	s15, s14, s15
 810900c:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8109010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8109014:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
            qDot2 -= beta * s1;
 8109018:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 810901c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8109020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109024:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8109028:	ee77 7a67 	vsub.f32	s15, s14, s15
 810902c:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
            qDot3 -= beta * s2;
 8109030:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8109034:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8109038:	ee67 7a27 	vmul.f32	s15, s14, s15
 810903c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8109040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8109044:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
            qDot4 -= beta * s3;
 8109048:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 810904c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8109050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109054:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8109058:	ee77 7a67 	vsub.f32	s15, s14, s15
 810905c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
        }

        /* Integrate rate of change of quaternion to yield quaternion */
        q0 += qDot1 * sampleRate;
 8109060:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8109064:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8109068:	ee67 7a27 	vmul.f32	s15, s14, s15
 810906c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8109070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8109074:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
        q1 += qDot2 * sampleRate;
 8109078:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 810907c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8109080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109084:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8109088:	ee77 7a27 	vadd.f32	s15, s14, s15
 810908c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
        q2 += qDot3 * sampleRate;
 8109090:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8109094:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8109098:	ee67 7a27 	vmul.f32	s15, s14, s15
 810909c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 81090a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 81090a4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        q3 += qDot4 * sampleRate;
 81090a8:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 81090ac:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 81090b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81090b4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 81090b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81090bc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

        /* Normalise quaternion */
        recipNorm = OneOverSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 81090c0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 81090c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 81090c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 81090cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81090d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81090d4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 81090d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81090dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 81090e0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 81090e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 81090e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81090ec:	eeb0 0a67 	vmov.f32	s0, s15
 81090f0:	f7ff f83c 	bl	810816c <OneOverSqrt>
 81090f4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
        q0 *= recipNorm;
 81090f8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 81090fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8109100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109104:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
        q1 *= recipNorm;
 8109108:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 810910c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8109110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109114:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
        q2 *= recipNorm;
 8109118:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 810911c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8109120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109124:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
        q3 *= recipNorm;
 8109128:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 810912c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8109130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109134:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

        inputAHRS->q0 = q0;
 8109138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810913a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 810913e:	615a      	str	r2, [r3, #20]
        inputAHRS->q1 = q1;
 8109140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8109146:	619a      	str	r2, [r3, #24]
        inputAHRS->q2 = q2;
 8109148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810914a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 810914e:	61da      	str	r2, [r3, #28]
        inputAHRS->q3 = q3;
 8109150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8109156:	621a      	str	r2, [r3, #32]
        /* Update IMU algorithm */
        // UpdateIMU();
    }

    /* Calculate new angles */
    CalculateAngles(inputAHRS);
 8109158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810915a:	f7ff f829 	bl	81081b0 <CalculateAngles>
}
 810915e:	bf00      	nop
 8109160:	37d0      	adds	r7, #208	; 0xd0
 8109162:	46bd      	mov	sp, r7
 8109164:	bd80      	pop	{r7, pc}
 8109166:	bf00      	nop

08109168 <initAHRS>:

void initAHRS(tAHRSDATA *imuAHRS)
{
 8109168:	b480      	push	{r7}
 810916a:	b083      	sub	sp, #12
 810916c:	af00      	add	r7, sp, #0
 810916e:	6078      	str	r0, [r7, #4]
	imuAHRS->q0 = 1;
 8109170:	687b      	ldr	r3, [r7, #4]
 8109172:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8109176:	615a      	str	r2, [r3, #20]
	imuAHRS->q1 = 0;
 8109178:	687b      	ldr	r3, [r7, #4]
 810917a:	f04f 0200 	mov.w	r2, #0
 810917e:	619a      	str	r2, [r3, #24]
	imuAHRS->q2 = 0;
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	f04f 0200 	mov.w	r2, #0
 8109186:	61da      	str	r2, [r3, #28]
	imuAHRS->q3 = 0;
 8109188:	687b      	ldr	r3, [r7, #4]
 810918a:	f04f 0200 	mov.w	r2, #0
 810918e:	621a      	str	r2, [r3, #32]
	imuAHRS->sampleRate = 1/20.0;
 8109190:	687b      	ldr	r3, [r7, #4]
 8109192:	4a04      	ldr	r2, [pc, #16]	; (81091a4 <initAHRS+0x3c>)
 8109194:	625a      	str	r2, [r3, #36]	; 0x24
}
 8109196:	bf00      	nop
 8109198:	370c      	adds	r7, #12
 810919a:	46bd      	mov	sp, r7
 810919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091a0:	4770      	bx	lr
 81091a2:	bf00      	nop
 81091a4:	3d4ccccd 	.word	0x3d4ccccd

081091a8 <runAHRSCycle>:

void runAHRSCycle(void)
{
 81091a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 81091aa:	b09b      	sub	sp, #108	; 0x6c
 81091ac:	af14      	add	r7, sp, #80	; 0x50
	if (HAL_GetTick() - lastChasisIMUMeasurement > 50)
 81091ae:	f7f8 fd6d 	bl	8101c8c <HAL_GetTick>
 81091b2:	4602      	mov	r2, r0
 81091b4:	4bba      	ldr	r3, [pc, #744]	; (81094a0 <runAHRSCycle+0x2f8>)
 81091b6:	681b      	ldr	r3, [r3, #0]
 81091b8:	1ad3      	subs	r3, r2, r3
 81091ba:	2b32      	cmp	r3, #50	; 0x32
 81091bc:	f240 815a 	bls.w	8109474 <runAHRSCycle+0x2cc>
	{
		int16_t AccData[3], GyroData[3], MagData[3];
		MPU9250_GetData(chasisIMU, AccData, MagData, GyroData);
 81091c0:	4eb8      	ldr	r6, [pc, #736]	; (81094a4 <runAHRSCycle+0x2fc>)
 81091c2:	f107 0308 	add.w	r3, r7, #8
 81091c6:	9312      	str	r3, [sp, #72]	; 0x48
 81091c8:	463b      	mov	r3, r7
 81091ca:	9311      	str	r3, [sp, #68]	; 0x44
 81091cc:	f107 0310 	add.w	r3, r7, #16
 81091d0:	9310      	str	r3, [sp, #64]	; 0x40
 81091d2:	466d      	mov	r5, sp
 81091d4:	f106 0410 	add.w	r4, r6, #16
 81091d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81091da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81091dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81091de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81091e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81091e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81091e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 81091e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 81091ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 81091f0:	f7fc fdd2 	bl	8105d98 <MPU9250_GetData>
		chasisIMUAHRS.AccData[0] = 9.80665 * AccData[0] / 16384.0;
 81091f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 81091f8:	4618      	mov	r0, r3
 81091fa:	f7f7 fa2b 	bl	8100654 <__aeabi_i2d>
 81091fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8109480 <runAHRSCycle+0x2d8>)
 8109200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109204:	f7f7 fa90 	bl	8100728 <__aeabi_dmul>
 8109208:	4602      	mov	r2, r0
 810920a:	460b      	mov	r3, r1
 810920c:	4610      	mov	r0, r2
 810920e:	4619      	mov	r1, r3
 8109210:	f04f 0200 	mov.w	r2, #0
 8109214:	4ba4      	ldr	r3, [pc, #656]	; (81094a8 <runAHRSCycle+0x300>)
 8109216:	f7f7 fbb1 	bl	810097c <__aeabi_ddiv>
 810921a:	4602      	mov	r2, r0
 810921c:	460b      	mov	r3, r1
 810921e:	4610      	mov	r0, r2
 8109220:	4619      	mov	r1, r3
 8109222:	f7f7 fd79 	bl	8100d18 <__aeabi_d2f>
 8109226:	4603      	mov	r3, r0
 8109228:	4aa0      	ldr	r2, [pc, #640]	; (81094ac <runAHRSCycle+0x304>)
 810922a:	6293      	str	r3, [r2, #40]	; 0x28
		chasisIMUAHRS.AccData[1] = 9.80665 * AccData[1] / 16384.0;
 810922c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8109230:	4618      	mov	r0, r3
 8109232:	f7f7 fa0f 	bl	8100654 <__aeabi_i2d>
 8109236:	a392      	add	r3, pc, #584	; (adr r3, 8109480 <runAHRSCycle+0x2d8>)
 8109238:	e9d3 2300 	ldrd	r2, r3, [r3]
 810923c:	f7f7 fa74 	bl	8100728 <__aeabi_dmul>
 8109240:	4602      	mov	r2, r0
 8109242:	460b      	mov	r3, r1
 8109244:	4610      	mov	r0, r2
 8109246:	4619      	mov	r1, r3
 8109248:	f04f 0200 	mov.w	r2, #0
 810924c:	4b96      	ldr	r3, [pc, #600]	; (81094a8 <runAHRSCycle+0x300>)
 810924e:	f7f7 fb95 	bl	810097c <__aeabi_ddiv>
 8109252:	4602      	mov	r2, r0
 8109254:	460b      	mov	r3, r1
 8109256:	4610      	mov	r0, r2
 8109258:	4619      	mov	r1, r3
 810925a:	f7f7 fd5d 	bl	8100d18 <__aeabi_d2f>
 810925e:	4603      	mov	r3, r0
 8109260:	4a92      	ldr	r2, [pc, #584]	; (81094ac <runAHRSCycle+0x304>)
 8109262:	62d3      	str	r3, [r2, #44]	; 0x2c
		chasisIMUAHRS.AccData[2] = 9.80665 * AccData[2] / 16384.0;
 8109264:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8109268:	4618      	mov	r0, r3
 810926a:	f7f7 f9f3 	bl	8100654 <__aeabi_i2d>
 810926e:	a384      	add	r3, pc, #528	; (adr r3, 8109480 <runAHRSCycle+0x2d8>)
 8109270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109274:	f7f7 fa58 	bl	8100728 <__aeabi_dmul>
 8109278:	4602      	mov	r2, r0
 810927a:	460b      	mov	r3, r1
 810927c:	4610      	mov	r0, r2
 810927e:	4619      	mov	r1, r3
 8109280:	f04f 0200 	mov.w	r2, #0
 8109284:	4b88      	ldr	r3, [pc, #544]	; (81094a8 <runAHRSCycle+0x300>)
 8109286:	f7f7 fb79 	bl	810097c <__aeabi_ddiv>
 810928a:	4602      	mov	r2, r0
 810928c:	460b      	mov	r3, r1
 810928e:	4610      	mov	r0, r2
 8109290:	4619      	mov	r1, r3
 8109292:	f7f7 fd41 	bl	8100d18 <__aeabi_d2f>
 8109296:	4603      	mov	r3, r0
 8109298:	4a84      	ldr	r2, [pc, #528]	; (81094ac <runAHRSCycle+0x304>)
 810929a:	6313      	str	r3, [r2, #48]	; 0x30

		chasisIMUAHRS.GyroData[0] = GyroData[0] / 131.0; // Degrees / Sec
 810929c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81092a0:	4618      	mov	r0, r3
 81092a2:	f7f7 f9d7 	bl	8100654 <__aeabi_i2d>
 81092a6:	a378      	add	r3, pc, #480	; (adr r3, 8109488 <runAHRSCycle+0x2e0>)
 81092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81092ac:	f7f7 fb66 	bl	810097c <__aeabi_ddiv>
 81092b0:	4602      	mov	r2, r0
 81092b2:	460b      	mov	r3, r1
 81092b4:	4610      	mov	r0, r2
 81092b6:	4619      	mov	r1, r3
 81092b8:	f7f7 fd2e 	bl	8100d18 <__aeabi_d2f>
 81092bc:	4603      	mov	r3, r0
 81092be:	4a7b      	ldr	r2, [pc, #492]	; (81094ac <runAHRSCycle+0x304>)
 81092c0:	6353      	str	r3, [r2, #52]	; 0x34
		chasisIMUAHRS.GyroData[1] = GyroData[1] / 131.0;
 81092c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 81092c6:	4618      	mov	r0, r3
 81092c8:	f7f7 f9c4 	bl	8100654 <__aeabi_i2d>
 81092cc:	a36e      	add	r3, pc, #440	; (adr r3, 8109488 <runAHRSCycle+0x2e0>)
 81092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81092d2:	f7f7 fb53 	bl	810097c <__aeabi_ddiv>
 81092d6:	4602      	mov	r2, r0
 81092d8:	460b      	mov	r3, r1
 81092da:	4610      	mov	r0, r2
 81092dc:	4619      	mov	r1, r3
 81092de:	f7f7 fd1b 	bl	8100d18 <__aeabi_d2f>
 81092e2:	4603      	mov	r3, r0
 81092e4:	4a71      	ldr	r2, [pc, #452]	; (81094ac <runAHRSCycle+0x304>)
 81092e6:	6393      	str	r3, [r2, #56]	; 0x38
		chasisIMUAHRS.GyroData[2] = GyroData[2] / 131.0;
 81092e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 81092ec:	4618      	mov	r0, r3
 81092ee:	f7f7 f9b1 	bl	8100654 <__aeabi_i2d>
 81092f2:	a365      	add	r3, pc, #404	; (adr r3, 8109488 <runAHRSCycle+0x2e0>)
 81092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81092f8:	f7f7 fb40 	bl	810097c <__aeabi_ddiv>
 81092fc:	4602      	mov	r2, r0
 81092fe:	460b      	mov	r3, r1
 8109300:	4610      	mov	r0, r2
 8109302:	4619      	mov	r1, r3
 8109304:	f7f7 fd08 	bl	8100d18 <__aeabi_d2f>
 8109308:	4603      	mov	r3, r0
 810930a:	4a68      	ldr	r2, [pc, #416]	; (81094ac <runAHRSCycle+0x304>)
 810930c:	63d3      	str	r3, [r2, #60]	; 0x3c

		chasisIMUAHRS.MagData[0] = MagData[0] * 0.6;
 810930e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8109312:	4618      	mov	r0, r3
 8109314:	f7f7 f99e 	bl	8100654 <__aeabi_i2d>
 8109318:	a35d      	add	r3, pc, #372	; (adr r3, 8109490 <runAHRSCycle+0x2e8>)
 810931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810931e:	f7f7 fa03 	bl	8100728 <__aeabi_dmul>
 8109322:	4602      	mov	r2, r0
 8109324:	460b      	mov	r3, r1
 8109326:	4610      	mov	r0, r2
 8109328:	4619      	mov	r1, r3
 810932a:	f7f7 fcf5 	bl	8100d18 <__aeabi_d2f>
 810932e:	4603      	mov	r3, r0
 8109330:	4a5e      	ldr	r2, [pc, #376]	; (81094ac <runAHRSCycle+0x304>)
 8109332:	6413      	str	r3, [r2, #64]	; 0x40
		chasisIMUAHRS.MagData[1] = MagData[1] * 0.6;
 8109334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8109338:	4618      	mov	r0, r3
 810933a:	f7f7 f98b 	bl	8100654 <__aeabi_i2d>
 810933e:	a354      	add	r3, pc, #336	; (adr r3, 8109490 <runAHRSCycle+0x2e8>)
 8109340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109344:	f7f7 f9f0 	bl	8100728 <__aeabi_dmul>
 8109348:	4602      	mov	r2, r0
 810934a:	460b      	mov	r3, r1
 810934c:	4610      	mov	r0, r2
 810934e:	4619      	mov	r1, r3
 8109350:	f7f7 fce2 	bl	8100d18 <__aeabi_d2f>
 8109354:	4603      	mov	r3, r0
 8109356:	4a55      	ldr	r2, [pc, #340]	; (81094ac <runAHRSCycle+0x304>)
 8109358:	6453      	str	r3, [r2, #68]	; 0x44
		chasisIMUAHRS.MagData[2] = MagData[2] * 0.6;
 810935a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 810935e:	4618      	mov	r0, r3
 8109360:	f7f7 f978 	bl	8100654 <__aeabi_i2d>
 8109364:	a34a      	add	r3, pc, #296	; (adr r3, 8109490 <runAHRSCycle+0x2e8>)
 8109366:	e9d3 2300 	ldrd	r2, r3, [r3]
 810936a:	f7f7 f9dd 	bl	8100728 <__aeabi_dmul>
 810936e:	4602      	mov	r2, r0
 8109370:	460b      	mov	r3, r1
 8109372:	4610      	mov	r0, r2
 8109374:	4619      	mov	r1, r3
 8109376:	f7f7 fccf 	bl	8100d18 <__aeabi_d2f>
 810937a:	4603      	mov	r3, r0
 810937c:	4a4b      	ldr	r2, [pc, #300]	; (81094ac <runAHRSCycle+0x304>)
 810937e:	6493      	str	r3, [r2, #72]	; 0x48

		UpdateAHRS(&chasisIMUAHRS,
				chasisIMUAHRS.GyroData[0] * AHRSIMU_DEG2RAD, chasisIMUAHRS.GyroData[1] * AHRSIMU_DEG2RAD,
 8109380:	4b4a      	ldr	r3, [pc, #296]	; (81094ac <runAHRSCycle+0x304>)
 8109382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109384:	4618      	mov	r0, r3
 8109386:	f7f7 f977 	bl	8100678 <__aeabi_f2d>
 810938a:	a343      	add	r3, pc, #268	; (adr r3, 8109498 <runAHRSCycle+0x2f0>)
 810938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109390:	f7f7 f9ca 	bl	8100728 <__aeabi_dmul>
 8109394:	4602      	mov	r2, r0
 8109396:	460b      	mov	r3, r1
 8109398:	4610      	mov	r0, r2
 810939a:	4619      	mov	r1, r3
 810939c:	f04f 0200 	mov.w	r2, #0
 81093a0:	4b43      	ldr	r3, [pc, #268]	; (81094b0 <runAHRSCycle+0x308>)
 81093a2:	f7f7 faeb 	bl	810097c <__aeabi_ddiv>
 81093a6:	4602      	mov	r2, r0
 81093a8:	460b      	mov	r3, r1
		UpdateAHRS(&chasisIMUAHRS,
 81093aa:	4610      	mov	r0, r2
 81093ac:	4619      	mov	r1, r3
 81093ae:	f7f7 fcb3 	bl	8100d18 <__aeabi_d2f>
 81093b2:	4604      	mov	r4, r0
				chasisIMUAHRS.GyroData[0] * AHRSIMU_DEG2RAD, chasisIMUAHRS.GyroData[1] * AHRSIMU_DEG2RAD,
 81093b4:	4b3d      	ldr	r3, [pc, #244]	; (81094ac <runAHRSCycle+0x304>)
 81093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093b8:	4618      	mov	r0, r3
 81093ba:	f7f7 f95d 	bl	8100678 <__aeabi_f2d>
 81093be:	a336      	add	r3, pc, #216	; (adr r3, 8109498 <runAHRSCycle+0x2f0>)
 81093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093c4:	f7f7 f9b0 	bl	8100728 <__aeabi_dmul>
 81093c8:	4602      	mov	r2, r0
 81093ca:	460b      	mov	r3, r1
 81093cc:	4610      	mov	r0, r2
 81093ce:	4619      	mov	r1, r3
 81093d0:	f04f 0200 	mov.w	r2, #0
 81093d4:	4b36      	ldr	r3, [pc, #216]	; (81094b0 <runAHRSCycle+0x308>)
 81093d6:	f7f7 fad1 	bl	810097c <__aeabi_ddiv>
 81093da:	4602      	mov	r2, r0
 81093dc:	460b      	mov	r3, r1
		UpdateAHRS(&chasisIMUAHRS,
 81093de:	4610      	mov	r0, r2
 81093e0:	4619      	mov	r1, r3
 81093e2:	f7f7 fc99 	bl	8100d18 <__aeabi_d2f>
 81093e6:	4605      	mov	r5, r0
				chasisIMUAHRS.GyroData[2] * AHRSIMU_DEG2RAD,
 81093e8:	4b30      	ldr	r3, [pc, #192]	; (81094ac <runAHRSCycle+0x304>)
 81093ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81093ec:	4618      	mov	r0, r3
 81093ee:	f7f7 f943 	bl	8100678 <__aeabi_f2d>
 81093f2:	a329      	add	r3, pc, #164	; (adr r3, 8109498 <runAHRSCycle+0x2f0>)
 81093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093f8:	f7f7 f996 	bl	8100728 <__aeabi_dmul>
 81093fc:	4602      	mov	r2, r0
 81093fe:	460b      	mov	r3, r1
 8109400:	4610      	mov	r0, r2
 8109402:	4619      	mov	r1, r3
 8109404:	f04f 0200 	mov.w	r2, #0
 8109408:	4b29      	ldr	r3, [pc, #164]	; (81094b0 <runAHRSCycle+0x308>)
 810940a:	f7f7 fab7 	bl	810097c <__aeabi_ddiv>
 810940e:	4602      	mov	r2, r0
 8109410:	460b      	mov	r3, r1
		UpdateAHRS(&chasisIMUAHRS,
 8109412:	4610      	mov	r0, r2
 8109414:	4619      	mov	r1, r3
 8109416:	f7f7 fc7f 	bl	8100d18 <__aeabi_d2f>
 810941a:	4602      	mov	r2, r0
 810941c:	4b23      	ldr	r3, [pc, #140]	; (81094ac <runAHRSCycle+0x304>)
 810941e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8109422:	4b22      	ldr	r3, [pc, #136]	; (81094ac <runAHRSCycle+0x304>)
 8109424:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8109428:	4b20      	ldr	r3, [pc, #128]	; (81094ac <runAHRSCycle+0x304>)
 810942a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 810942e:	4b1f      	ldr	r3, [pc, #124]	; (81094ac <runAHRSCycle+0x304>)
 8109430:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8109434:	4b1d      	ldr	r3, [pc, #116]	; (81094ac <runAHRSCycle+0x304>)
 8109436:	edd3 5a11 	vldr	s11, [r3, #68]	; 0x44
 810943a:	4b1c      	ldr	r3, [pc, #112]	; (81094ac <runAHRSCycle+0x304>)
 810943c:	ed93 5a12 	vldr	s10, [r3, #72]	; 0x48
 8109440:	eeb0 4a45 	vmov.f32	s8, s10
 8109444:	eef0 3a65 	vmov.f32	s7, s11
 8109448:	eeb0 3a46 	vmov.f32	s6, s12
 810944c:	eef0 2a66 	vmov.f32	s5, s13
 8109450:	eeb0 2a47 	vmov.f32	s4, s14
 8109454:	eef0 1a67 	vmov.f32	s3, s15
 8109458:	ee01 2a10 	vmov	s2, r2
 810945c:	ee00 5a90 	vmov	s1, r5
 8109460:	ee00 4a10 	vmov	s0, r4
 8109464:	4811      	ldr	r0, [pc, #68]	; (81094ac <runAHRSCycle+0x304>)
 8109466:	f7fe ffd5 	bl	8108414 <UpdateAHRS>
				chasisIMUAHRS.AccData[0], chasisIMUAHRS.AccData[1], chasisIMUAHRS.AccData[2],
				chasisIMUAHRS.MagData[0], chasisIMUAHRS.MagData[1], chasisIMUAHRS.MagData[2]);
		lastChasisIMUMeasurement = HAL_GetTick();
 810946a:	f7f8 fc0f 	bl	8101c8c <HAL_GetTick>
 810946e:	4603      	mov	r3, r0
 8109470:	4a0b      	ldr	r2, [pc, #44]	; (81094a0 <runAHRSCycle+0x2f8>)
 8109472:	6013      	str	r3, [r2, #0]
	}
}
 8109474:	bf00      	nop
 8109476:	371c      	adds	r7, #28
 8109478:	46bd      	mov	sp, r7
 810947a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810947c:	f3af 8000 	nop.w
 8109480:	3a92a305 	.word	0x3a92a305
 8109484:	40239d01 	.word	0x40239d01
 8109488:	00000000 	.word	0x00000000
 810948c:	40606000 	.word	0x40606000
 8109490:	33333333 	.word	0x33333333
 8109494:	3fe33333 	.word	0x3fe33333
 8109498:	54442d18 	.word	0x54442d18
 810949c:	400921fb 	.word	0x400921fb
 81094a0:	100002b0 	.word	0x100002b0
 81094a4:	1000041c 	.word	0x1000041c
 81094a8:	40d00000 	.word	0x40d00000
 81094ac:	100004b0 	.word	0x100004b0
 81094b0:	40668000 	.word	0x40668000

081094b4 <_Z41__static_initialization_and_destruction_0ii>:

void updatePIDs(void)
{
	pitchPID.updateCycle(chasisIMUAHRS.Pitch);
	rollPID.updateCycle(chasisIMUAHRS.Roll);
}
 81094b4:	b580      	push	{r7, lr}
 81094b6:	b082      	sub	sp, #8
 81094b8:	af00      	add	r7, sp, #0
 81094ba:	6078      	str	r0, [r7, #4]
 81094bc:	6039      	str	r1, [r7, #0]
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	2b01      	cmp	r3, #1
 81094c2:	d11a      	bne.n	81094fa <_Z41__static_initialization_and_destruction_0ii+0x46>
 81094c4:	683b      	ldr	r3, [r7, #0]
 81094c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81094ca:	4293      	cmp	r3, r2
 81094cc:	d115      	bne.n	81094fa <_Z41__static_initialization_and_destruction_0ii+0x46>
PIDController pitchPID(0, 0.5, 0, 0);
 81094ce:	eddf 1a14 	vldr	s3, [pc, #80]	; 8109520 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 81094d2:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8109520 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 81094d6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 81094da:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8109520 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 81094de:	4811      	ldr	r0, [pc, #68]	; (8109524 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 81094e0:	f7f7 fca0 	bl	8100e24 <_ZN13PIDControllerC1Effff>
PIDController rollPID(0, 0.5, 0, 0);
 81094e4:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8109520 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 81094e8:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8109520 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 81094ec:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 81094f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8109520 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 81094f4:	480c      	ldr	r0, [pc, #48]	; (8109528 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 81094f6:	f7f7 fc95 	bl	8100e24 <_ZN13PIDControllerC1Effff>
 81094fa:	687b      	ldr	r3, [r7, #4]
 81094fc:	2b00      	cmp	r3, #0
 81094fe:	d10a      	bne.n	8109516 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8109500:	683b      	ldr	r3, [r7, #0]
 8109502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8109506:	4293      	cmp	r3, r2
 8109508:	d105      	bne.n	8109516 <_Z41__static_initialization_and_destruction_0ii+0x62>
 810950a:	4807      	ldr	r0, [pc, #28]	; (8109528 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 810950c:	f7f7 fcae 	bl	8100e6c <_ZN13PIDControllerD1Ev>
PIDController pitchPID(0, 0.5, 0, 0);
 8109510:	4804      	ldr	r0, [pc, #16]	; (8109524 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8109512:	f7f7 fcab 	bl	8100e6c <_ZN13PIDControllerD1Ev>
}
 8109516:	bf00      	nop
 8109518:	3708      	adds	r7, #8
 810951a:	46bd      	mov	sp, r7
 810951c:	bd80      	pop	{r7, pc}
 810951e:	bf00      	nop
 8109520:	00000000 	.word	0x00000000
 8109524:	100002d8 	.word	0x100002d8
 8109528:	10000300 	.word	0x10000300

0810952c <_GLOBAL__sub_I_pitchPID>:
 810952c:	b580      	push	{r7, lr}
 810952e:	af00      	add	r7, sp, #0
 8109530:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8109534:	2001      	movs	r0, #1
 8109536:	f7ff ffbd 	bl	81094b4 <_Z41__static_initialization_and_destruction_0ii>
 810953a:	bd80      	pop	{r7, pc}

0810953c <_GLOBAL__sub_D_pitchPID>:
 810953c:	b580      	push	{r7, lr}
 810953e:	af00      	add	r7, sp, #0
 8109540:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8109544:	2000      	movs	r0, #0
 8109546:	f7ff ffb5 	bl	81094b4 <_Z41__static_initialization_and_destruction_0ii>
 810954a:	bd80      	pop	{r7, pc}

0810954c <initMPU>:

#include "main.h"
#include "i2c.h"

uint8_t initMPU(tMPU9250 mpuToInit)
{
 810954c:	b084      	sub	sp, #16
 810954e:	b5b0      	push	{r4, r5, r7, lr}
 8109550:	b092      	sub	sp, #72	; 0x48
 8109552:	af10      	add	r7, sp, #64	; 0x40
 8109554:	f107 0418 	add.w	r4, r7, #24
 8109558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	MemAddress = 0x24;
//	_buffer[0] = 0x0D;
//	HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, _buffer, 1, HAL_MAX_DELAY);
//	HAL_I2C_Mem_Read(&hi2c2, DevAddress, 0x75, 1, _buffer, 1, HAL_MAX_DELAY);
	uint8_t ret = 0;
 810955c:	2300      	movs	r3, #0
 810955e:	71fb      	strb	r3, [r7, #7]
	ret = MPU9250_Init(mpuToInit);
 8109560:	466d      	mov	r5, sp
 8109562:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8109566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8109568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810956a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810956c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810956e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8109570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8109572:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8109576:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 810957a:	f107 0318 	add.w	r3, r7, #24
 810957e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8109580:	f7fc f9cc 	bl	810591c <MPU9250_Init>
 8109584:	4603      	mov	r3, r0
 8109586:	71fb      	strb	r3, [r7, #7]
	return ret;
 8109588:	79fb      	ldrb	r3, [r7, #7]
}
 810958a:	4618      	mov	r0, r3
 810958c:	3708      	adds	r7, #8
 810958e:	46bd      	mov	sp, r7
 8109590:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8109594:	b004      	add	sp, #16
 8109596:	4770      	bx	lr

08109598 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8109598:	b580      	push	{r7, lr}
 810959a:	b082      	sub	sp, #8
 810959c:	af00      	add	r7, sp, #0
 810959e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 81095a0:	4b04      	ldr	r3, [pc, #16]	; (81095b4 <HAL_HSEM_FreeCallback+0x1c>)
 81095a2:	2201      	movs	r2, #1
 81095a4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81095a6:	2001      	movs	r0, #1
 81095a8:	f7f8 fece 	bl	8102348 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 81095ac:	bf00      	nop
 81095ae:	3708      	adds	r7, #8
 81095b0:	46bd      	mov	sp, r7
 81095b2:	bd80      	pop	{r7, pc}
 81095b4:	10000328 	.word	0x10000328

081095b8 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 81095b8:	b580      	push	{r7, lr}
 81095ba:	b082      	sub	sp, #8
 81095bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 81095be:	4b0f      	ldr	r3, [pc, #60]	; (81095fc <MAILBOX_Init+0x44>)
 81095c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81095c4:	4a0d      	ldr	r2, [pc, #52]	; (81095fc <MAILBOX_Init+0x44>)
 81095c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81095ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81095ce:	4b0b      	ldr	r3, [pc, #44]	; (81095fc <MAILBOX_Init+0x44>)
 81095d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81095d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81095d8:	607b      	str	r3, [r7, #4]
 81095da:	687b      	ldr	r3, [r7, #4]
    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  /* Enable CM4 receive irq */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 1);
 81095dc:	2201      	movs	r2, #1
 81095de:	2100      	movs	r1, #0
 81095e0:	207e      	movs	r0, #126	; 0x7e
 81095e2:	f7f8 fc7c 	bl	8101ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81095e6:	207e      	movs	r0, #126	; 0x7e
 81095e8:	f7f8 fc93 	bl	8101f12 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81095ec:	2001      	movs	r0, #1
 81095ee:	f7f8 feab 	bl	8102348 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 81095f2:	2300      	movs	r3, #0
}
 81095f4:	4618      	mov	r0, r3
 81095f6:	3708      	adds	r7, #8
 81095f8:	46bd      	mov	sp, r7
 81095fa:	bd80      	pop	{r7, pc}
 81095fc:	58024400 	.word	0x58024400

08109600 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8109600:	b580      	push	{r7, lr}
 8109602:	b082      	sub	sp, #8
 8109604:	af00      	add	r7, sp, #0
 8109606:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8109608:	4b09      	ldr	r3, [pc, #36]	; (8109630 <MAILBOX_Poll+0x30>)
 810960a:	681b      	ldr	r3, [r3, #0]
 810960c:	2b01      	cmp	r3, #1
 810960e:	d108      	bne.n	8109622 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8109610:	2101      	movs	r1, #1
 8109612:	6878      	ldr	r0, [r7, #4]
 8109614:	f7fd fb09 	bl	8106c2a <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8109618:	4b05      	ldr	r3, [pc, #20]	; (8109630 <MAILBOX_Poll+0x30>)
 810961a:	2200      	movs	r2, #0
 810961c:	601a      	str	r2, [r3, #0]
    return 0;
 810961e:	2300      	movs	r3, #0
 8109620:	e001      	b.n	8109626 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8109622:	f06f 030a 	mvn.w	r3, #10
}
 8109626:	4618      	mov	r0, r3
 8109628:	3708      	adds	r7, #8
 810962a:	46bd      	mov	sp, r7
 810962c:	bd80      	pop	{r7, pc}
 810962e:	bf00      	nop
 8109630:	10000328 	.word	0x10000328

08109634 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8109634:	b580      	push	{r7, lr}
 8109636:	b082      	sub	sp, #8
 8109638:	af00      	add	r7, sp, #0
 810963a:	6078      	str	r0, [r7, #4]
 810963c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 810963e:	2001      	movs	r0, #1
 8109640:	f7f8 fe54 	bl	81022ec <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8109644:	2100      	movs	r1, #0
 8109646:	2001      	movs	r0, #1
 8109648:	f7f8 fe6a 	bl	8102320 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 810964c:	2300      	movs	r3, #0
}
 810964e:	4618      	mov	r0, r3
 8109650:	3708      	adds	r7, #8
 8109652:	46bd      	mov	sp, r7
 8109654:	bd80      	pop	{r7, pc}

08109656 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8109656:	b480      	push	{r7}
 8109658:	b083      	sub	sp, #12
 810965a:	af00      	add	r7, sp, #0
 810965c:	6078      	str	r0, [r7, #4]
 810965e:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8109664:	683a      	ldr	r2, [r7, #0]
 8109666:	429a      	cmp	r2, r3
 8109668:	d209      	bcs.n	810967e <metal_device_io_region+0x28>
 810966a:	683a      	ldr	r2, [r7, #0]
 810966c:	4613      	mov	r3, r2
 810966e:	005b      	lsls	r3, r3, #1
 8109670:	4413      	add	r3, r2
 8109672:	011b      	lsls	r3, r3, #4
 8109674:	3308      	adds	r3, #8
 8109676:	687a      	ldr	r2, [r7, #4]
 8109678:	4413      	add	r3, r2
 810967a:	3304      	adds	r3, #4
 810967c:	e000      	b.n	8109680 <metal_device_io_region+0x2a>
 810967e:	2300      	movs	r3, #0
}
 8109680:	4618      	mov	r0, r3
 8109682:	370c      	adds	r7, #12
 8109684:	46bd      	mov	sp, r7
 8109686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810968a:	4770      	bx	lr

0810968c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 810968c:	b590      	push	{r4, r7, lr}
 810968e:	b08d      	sub	sp, #52	; 0x34
 8109690:	af04      	add	r7, sp, #16
 8109692:	6078      	str	r0, [r7, #4]
  int status = 0;
 8109694:	2300      	movs	r3, #0
 8109696:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8109698:	2300      	movs	r3, #0
 810969a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 810969c:	4a41      	ldr	r2, [pc, #260]	; (81097a4 <OPENAMP_shmem_init+0x118>)
 810969e:	f107 0310 	add.w	r3, r7, #16
 81096a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 81096a6:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 81096aa:	2300      	movs	r3, #0
 81096ac:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 81096ae:	2300      	movs	r3, #0
 81096b0:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 81096b2:	f107 0310 	add.w	r3, r7, #16
 81096b6:	4618      	mov	r0, r3
 81096b8:	f7fc fece 	bl	8106458 <metal_init>

  status = metal_register_generic_device(&shm_device);
 81096bc:	483a      	ldr	r0, [pc, #232]	; (81097a8 <OPENAMP_shmem_init+0x11c>)
 81096be:	f7fc fd73 	bl	81061a8 <metal_register_generic_device>
 81096c2:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 81096c4:	69fb      	ldr	r3, [r7, #28]
 81096c6:	2b00      	cmp	r3, #0
 81096c8:	d001      	beq.n	81096ce <OPENAMP_shmem_init+0x42>
    return status;
 81096ca:	69fb      	ldr	r3, [r7, #28]
 81096cc:	e066      	b.n	810979c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 81096ce:	f107 0318 	add.w	r3, r7, #24
 81096d2:	461a      	mov	r2, r3
 81096d4:	4935      	ldr	r1, [pc, #212]	; (81097ac <OPENAMP_shmem_init+0x120>)
 81096d6:	4836      	ldr	r0, [pc, #216]	; (81097b0 <OPENAMP_shmem_init+0x124>)
 81096d8:	f7fc fd28 	bl	810612c <metal_device_open>
 81096dc:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 81096de:	69fb      	ldr	r3, [r7, #28]
 81096e0:	2b00      	cmp	r3, #0
 81096e2:	d001      	beq.n	81096e8 <OPENAMP_shmem_init+0x5c>
    return status;
 81096e4:	69fb      	ldr	r3, [r7, #28]
 81096e6:	e059      	b.n	810979c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 81096e8:	4a32      	ldr	r2, [pc, #200]	; (81097b4 <OPENAMP_shmem_init+0x128>)
 81096ea:	4b33      	ldr	r3, [pc, #204]	; (81097b8 <OPENAMP_shmem_init+0x12c>)
 81096ec:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 81096ee:	69bb      	ldr	r3, [r7, #24]
 81096f0:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 81096f4:	4a31      	ldr	r2, [pc, #196]	; (81097bc <OPENAMP_shmem_init+0x130>)
 81096f6:	4b2f      	ldr	r3, [pc, #188]	; (81097b4 <OPENAMP_shmem_init+0x128>)
 81096f8:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 81096fa:	461a      	mov	r2, r3
 81096fc:	2300      	movs	r3, #0
 81096fe:	9302      	str	r3, [sp, #8]
 8109700:	2300      	movs	r3, #0
 8109702:	9301      	str	r3, [sp, #4]
 8109704:	f04f 33ff 	mov.w	r3, #4294967295
 8109708:	9300      	str	r3, [sp, #0]
 810970a:	4613      	mov	r3, r2
 810970c:	4a2a      	ldr	r2, [pc, #168]	; (81097b8 <OPENAMP_shmem_init+0x12c>)
 810970e:	4929      	ldr	r1, [pc, #164]	; (81097b4 <OPENAMP_shmem_init+0x128>)
 8109710:	f7fc feef 	bl	81064f2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8109714:	69bb      	ldr	r3, [r7, #24]
 8109716:	2100      	movs	r1, #0
 8109718:	4618      	mov	r0, r3
 810971a:	f7ff ff9c 	bl	8109656 <metal_device_io_region>
 810971e:	4603      	mov	r3, r0
 8109720:	4a27      	ldr	r2, [pc, #156]	; (81097c0 <OPENAMP_shmem_init+0x134>)
 8109722:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8109724:	4b26      	ldr	r3, [pc, #152]	; (81097c0 <OPENAMP_shmem_init+0x134>)
 8109726:	681b      	ldr	r3, [r3, #0]
 8109728:	2b00      	cmp	r3, #0
 810972a:	d102      	bne.n	8109732 <OPENAMP_shmem_init+0xa6>
    return -1;
 810972c:	f04f 33ff 	mov.w	r3, #4294967295
 8109730:	e034      	b.n	810979c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8109732:	f107 0208 	add.w	r2, r7, #8
 8109736:	f107 030c 	add.w	r3, r7, #12
 810973a:	4619      	mov	r1, r3
 810973c:	6878      	ldr	r0, [r7, #4]
 810973e:	f000 f905 	bl	810994c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8109742:	68fb      	ldr	r3, [r7, #12]
 8109744:	4a1f      	ldr	r2, [pc, #124]	; (81097c4 <OPENAMP_shmem_init+0x138>)
 8109746:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8109748:	4b1e      	ldr	r3, [pc, #120]	; (81097c4 <OPENAMP_shmem_init+0x138>)
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	2b00      	cmp	r3, #0
 810974e:	d102      	bne.n	8109756 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8109750:	f04f 33ff 	mov.w	r3, #4294967295
 8109754:	e022      	b.n	810979c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8109756:	69bb      	ldr	r3, [r7, #24]
 8109758:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 810975c:	4b19      	ldr	r3, [pc, #100]	; (81097c4 <OPENAMP_shmem_init+0x138>)
 810975e:	6819      	ldr	r1, [r3, #0]
 8109760:	4b18      	ldr	r3, [pc, #96]	; (81097c4 <OPENAMP_shmem_init+0x138>)
 8109762:	681a      	ldr	r2, [r3, #0]
 8109764:	68bb      	ldr	r3, [r7, #8]
 8109766:	461c      	mov	r4, r3
 8109768:	2300      	movs	r3, #0
 810976a:	9302      	str	r3, [sp, #8]
 810976c:	2300      	movs	r3, #0
 810976e:	9301      	str	r3, [sp, #4]
 8109770:	f04f 33ff 	mov.w	r3, #4294967295
 8109774:	9300      	str	r3, [sp, #0]
 8109776:	4623      	mov	r3, r4
 8109778:	f7fc febb 	bl	81064f2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 810977c:	69bb      	ldr	r3, [r7, #24]
 810977e:	2101      	movs	r1, #1
 8109780:	4618      	mov	r0, r3
 8109782:	f7ff ff68 	bl	8109656 <metal_device_io_region>
 8109786:	4603      	mov	r3, r0
 8109788:	4a0f      	ldr	r2, [pc, #60]	; (81097c8 <OPENAMP_shmem_init+0x13c>)
 810978a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 810978c:	4b0e      	ldr	r3, [pc, #56]	; (81097c8 <OPENAMP_shmem_init+0x13c>)
 810978e:	681b      	ldr	r3, [r3, #0]
 8109790:	2b00      	cmp	r3, #0
 8109792:	d102      	bne.n	810979a <OPENAMP_shmem_init+0x10e>
    return -1;
 8109794:	f04f 33ff 	mov.w	r3, #4294967295
 8109798:	e000      	b.n	810979c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810979a:	2300      	movs	r3, #0
}
 810979c:	4618      	mov	r0, r3
 810979e:	3724      	adds	r7, #36	; 0x24
 81097a0:	46bd      	mov	sp, r7
 81097a2:	bd90      	pop	{r4, r7, pc}
 81097a4:	0810f048 	.word	0x0810f048
 81097a8:	1000003c 	.word	0x1000003c
 81097ac:	0810f034 	.word	0x0810f034
 81097b0:	0810f040 	.word	0x0810f040
 81097b4:	38000400 	.word	0x38000400
 81097b8:	100003bc 	.word	0x100003bc
 81097bc:	38010000 	.word	0x38010000
 81097c0:	1000032c 	.word	0x1000032c
 81097c4:	10000334 	.word	0x10000334
 81097c8:	10000330 	.word	0x10000330

081097cc <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 81097cc:	b590      	push	{r4, r7, lr}
 81097ce:	b08b      	sub	sp, #44	; 0x2c
 81097d0:	af04      	add	r7, sp, #16
 81097d2:	6078      	str	r0, [r7, #4]
 81097d4:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 81097d6:	2300      	movs	r3, #0
 81097d8:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 81097da:	2300      	movs	r3, #0
 81097dc:	613b      	str	r3, [r7, #16]
  int status = 0;
 81097de:	2300      	movs	r3, #0
 81097e0:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 81097e2:	f7ff fee9 	bl	81095b8 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 81097e6:	6878      	ldr	r0, [r7, #4]
 81097e8:	f7ff ff50 	bl	810968c <OPENAMP_shmem_init>
 81097ec:	60f8      	str	r0, [r7, #12]
  if(status)
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	2b00      	cmp	r3, #0
 81097f2:	d001      	beq.n	81097f8 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 81097f4:	68fb      	ldr	r3, [r7, #12]
 81097f6:	e06a      	b.n	81098ce <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 81097f8:	6878      	ldr	r0, [r7, #4]
 81097fa:	4b37      	ldr	r3, [pc, #220]	; (81098d8 <MX_OPENAMP_Init+0x10c>)
 81097fc:	681b      	ldr	r3, [r3, #0]
 81097fe:	f103 0218 	add.w	r2, r3, #24
 8109802:	4b36      	ldr	r3, [pc, #216]	; (81098dc <MX_OPENAMP_Init+0x110>)
 8109804:	681b      	ldr	r3, [r3, #0]
 8109806:	2100      	movs	r1, #0
 8109808:	9102      	str	r1, [sp, #8]
 810980a:	4935      	ldr	r1, [pc, #212]	; (81098e0 <MX_OPENAMP_Init+0x114>)
 810980c:	9101      	str	r1, [sp, #4]
 810980e:	2100      	movs	r1, #0
 8109810:	9100      	str	r1, [sp, #0]
 8109812:	21ff      	movs	r1, #255	; 0xff
 8109814:	f7fd f92a 	bl	8106a6c <rproc_virtio_create_vdev>
 8109818:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 810981a:	693b      	ldr	r3, [r7, #16]
 810981c:	2b00      	cmp	r3, #0
 810981e:	d102      	bne.n	8109826 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8109820:	f04f 33ff 	mov.w	r3, #4294967295
 8109824:	e053      	b.n	81098ce <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8109826:	6938      	ldr	r0, [r7, #16]
 8109828:	f7fd fa3b 	bl	8106ca2 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 810982c:	4b2a      	ldr	r3, [pc, #168]	; (81098d8 <MX_OPENAMP_Init+0x10c>)
 810982e:	681b      	ldr	r3, [r3, #0]
 8109830:	3334      	adds	r3, #52	; 0x34
 8109832:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8109834:	697b      	ldr	r3, [r7, #20]
 8109836:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8109838:	697b      	ldr	r3, [r7, #20]
 810983a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810983c:	461c      	mov	r4, r3
 810983e:	4b29      	ldr	r3, [pc, #164]	; (81098e4 <MX_OPENAMP_Init+0x118>)
 8109840:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8109842:	697a      	ldr	r2, [r7, #20]
 8109844:	6892      	ldr	r2, [r2, #8]
 8109846:	6979      	ldr	r1, [r7, #20]
 8109848:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810984a:	9102      	str	r1, [sp, #8]
 810984c:	9201      	str	r2, [sp, #4]
 810984e:	9300      	str	r3, [sp, #0]
 8109850:	4623      	mov	r3, r4
 8109852:	4602      	mov	r2, r0
 8109854:	2100      	movs	r1, #0
 8109856:	6938      	ldr	r0, [r7, #16]
 8109858:	f7fd f9b6 	bl	8106bc8 <rproc_virtio_init_vring>
 810985c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810985e:	68fb      	ldr	r3, [r7, #12]
 8109860:	2b00      	cmp	r3, #0
 8109862:	d001      	beq.n	8109868 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8109864:	68fb      	ldr	r3, [r7, #12]
 8109866:	e032      	b.n	81098ce <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8109868:	4b1b      	ldr	r3, [pc, #108]	; (81098d8 <MX_OPENAMP_Init+0x10c>)
 810986a:	681b      	ldr	r3, [r3, #0]
 810986c:	3348      	adds	r3, #72	; 0x48
 810986e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8109870:	697b      	ldr	r3, [r7, #20]
 8109872:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8109874:	697b      	ldr	r3, [r7, #20]
 8109876:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8109878:	461c      	mov	r4, r3
 810987a:	4b1a      	ldr	r3, [pc, #104]	; (81098e4 <MX_OPENAMP_Init+0x118>)
 810987c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810987e:	697a      	ldr	r2, [r7, #20]
 8109880:	6892      	ldr	r2, [r2, #8]
 8109882:	6979      	ldr	r1, [r7, #20]
 8109884:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8109886:	9102      	str	r1, [sp, #8]
 8109888:	9201      	str	r2, [sp, #4]
 810988a:	9300      	str	r3, [sp, #0]
 810988c:	4623      	mov	r3, r4
 810988e:	4602      	mov	r2, r0
 8109890:	2101      	movs	r1, #1
 8109892:	6938      	ldr	r0, [r7, #16]
 8109894:	f7fd f998 	bl	8106bc8 <rproc_virtio_init_vring>
 8109898:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810989a:	68fb      	ldr	r3, [r7, #12]
 810989c:	2b00      	cmp	r3, #0
 810989e:	d001      	beq.n	81098a4 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 81098a0:	68fb      	ldr	r3, [r7, #12]
 81098a2:	e014      	b.n	81098ce <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81098a4:	4b10      	ldr	r3, [pc, #64]	; (81098e8 <MX_OPENAMP_Init+0x11c>)
 81098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81098aa:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 81098ac:	4a0f      	ldr	r2, [pc, #60]	; (81098ec <MX_OPENAMP_Init+0x120>)
 81098ae:	4b0e      	ldr	r3, [pc, #56]	; (81098e8 <MX_OPENAMP_Init+0x11c>)
 81098b0:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81098b2:	461a      	mov	r2, r3
 81098b4:	480e      	ldr	r0, [pc, #56]	; (81098f0 <MX_OPENAMP_Init+0x124>)
 81098b6:	f7fd fe43 	bl	8107540 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 81098ba:	4b0a      	ldr	r3, [pc, #40]	; (81098e4 <MX_OPENAMP_Init+0x118>)
 81098bc:	681b      	ldr	r3, [r3, #0]
 81098be:	4a0c      	ldr	r2, [pc, #48]	; (81098f0 <MX_OPENAMP_Init+0x124>)
 81098c0:	9200      	str	r2, [sp, #0]
 81098c2:	683a      	ldr	r2, [r7, #0]
 81098c4:	6939      	ldr	r1, [r7, #16]
 81098c6:	480b      	ldr	r0, [pc, #44]	; (81098f4 <MX_OPENAMP_Init+0x128>)
 81098c8:	f7fe f8ae 	bl	8107a28 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 81098cc:	2300      	movs	r3, #0
}
 81098ce:	4618      	mov	r0, r3
 81098d0:	371c      	adds	r7, #28
 81098d2:	46bd      	mov	sp, r7
 81098d4:	bd90      	pop	{r4, r7, pc}
 81098d6:	bf00      	nop
 81098d8:	10000334 	.word	0x10000334
 81098dc:	10000330 	.word	0x10000330
 81098e0:	08109635 	.word	0x08109635
 81098e4:	1000032c 	.word	0x1000032c
 81098e8:	38000400 	.word	0x38000400
 81098ec:	38010000 	.word	0x38010000
 81098f0:	10000338 	.word	0x10000338
 81098f4:	10000344 	.word	0x10000344

081098f8 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 81098f8:	b580      	push	{r7, lr}
 81098fa:	b08a      	sub	sp, #40	; 0x28
 81098fc:	af04      	add	r7, sp, #16
 81098fe:	60f8      	str	r0, [r7, #12]
 8109900:	60b9      	str	r1, [r7, #8]
 8109902:	607a      	str	r2, [r7, #4]
 8109904:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8109906:	2300      	movs	r3, #0
 8109908:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 810990a:	6a3b      	ldr	r3, [r7, #32]
 810990c:	9302      	str	r3, [sp, #8]
 810990e:	683b      	ldr	r3, [r7, #0]
 8109910:	9301      	str	r3, [sp, #4]
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	9300      	str	r3, [sp, #0]
 8109916:	f04f 33ff 	mov.w	r3, #4294967295
 810991a:	68ba      	ldr	r2, [r7, #8]
 810991c:	4904      	ldr	r1, [pc, #16]	; (8109930 <OPENAMP_create_endpoint+0x38>)
 810991e:	68f8      	ldr	r0, [r7, #12]
 8109920:	f7fd fc4c 	bl	81071bc <rpmsg_create_ept>
 8109924:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8109926:	697b      	ldr	r3, [r7, #20]
}
 8109928:	4618      	mov	r0, r3
 810992a:	3718      	adds	r7, #24
 810992c:	46bd      	mov	sp, r7
 810992e:	bd80      	pop	{r7, pc}
 8109930:	10000344 	.word	0x10000344

08109934 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8109934:	b580      	push	{r7, lr}
 8109936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8109938:	4b03      	ldr	r3, [pc, #12]	; (8109948 <OPENAMP_check_for_message+0x14>)
 810993a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810993c:	4618      	mov	r0, r3
 810993e:	f7ff fe5f 	bl	8109600 <MAILBOX_Poll>
}
 8109942:	bf00      	nop
 8109944:	bd80      	pop	{r7, pc}
 8109946:	bf00      	nop
 8109948:	10000344 	.word	0x10000344

0810994c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 810994c:	b480      	push	{r7}
 810994e:	b085      	sub	sp, #20
 8109950:	af00      	add	r7, sp, #0
 8109952:	60f8      	str	r0, [r7, #12]
 8109954:	60b9      	str	r1, [r7, #8]
 8109956:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8109958:	bf00      	nop
 810995a:	4b08      	ldr	r3, [pc, #32]	; (810997c <resource_table_init+0x30>)
 810995c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810995e:	4a08      	ldr	r2, [pc, #32]	; (8109980 <resource_table_init+0x34>)
 8109960:	4293      	cmp	r3, r2
 8109962:	d1fa      	bne.n	810995a <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	228c      	movs	r2, #140	; 0x8c
 8109968:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 810996a:	68bb      	ldr	r3, [r7, #8]
 810996c:	4a03      	ldr	r2, [pc, #12]	; (810997c <resource_table_init+0x30>)
 810996e:	601a      	str	r2, [r3, #0]
}
 8109970:	bf00      	nop
 8109972:	3714      	adds	r7, #20
 8109974:	46bd      	mov	sp, r7
 8109976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810997a:	4770      	bx	lr
 810997c:	38000000 	.word	0x38000000
 8109980:	38000400 	.word	0x38000400

08109984 <initServo>:

tSERVO chasisServo;
tSERVO lidarServo;

void initServo(tSERVO *servoToInit, TIM_HandleTypeDef htimToInit, uint32_t ChannelToInit, TIM_TypeDef *TIMToInit)
{
 8109984:	b084      	sub	sp, #16
 8109986:	b580      	push	{r7, lr}
 8109988:	b082      	sub	sp, #8
 810998a:	af00      	add	r7, sp, #0
 810998c:	6078      	str	r0, [r7, #4]
 810998e:	f107 0014 	add.w	r0, r7, #20
 8109992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	servoToInit->htim = htimToInit;
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	4618      	mov	r0, r3
 810999a:	f107 0314 	add.w	r3, r7, #20
 810999e:	224c      	movs	r2, #76	; 0x4c
 81099a0:	4619      	mov	r1, r3
 81099a2:	f000 fe53 	bl	810a64c <memcpy>
	servoToInit->ChannelID = ChannelToInit;
 81099a6:	687b      	ldr	r3, [r7, #4]
 81099a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81099aa:	64da      	str	r2, [r3, #76]	; 0x4c
	servoToInit->TIM = TIMToInit;
 81099ac:	687b      	ldr	r3, [r7, #4]
 81099ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81099b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 81099b2:	bf00      	nop
 81099b4:	3708      	adds	r7, #8
 81099b6:	46bd      	mov	sp, r7
 81099b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81099bc:	b004      	add	sp, #16
 81099be:	4770      	bx	lr

081099c0 <startPWM>:

void startPWM(tSERVO servoToStart, uint32_t pwmValue)
{
 81099c0:	b084      	sub	sp, #16
 81099c2:	b580      	push	{r7, lr}
 81099c4:	af00      	add	r7, sp, #0
 81099c6:	f107 0c08 	add.w	ip, r7, #8
 81099ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (servoToStart.ChannelID == 0)
 81099ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81099d0:	2b00      	cmp	r3, #0
 81099d2:	d103      	bne.n	81099dc <startPWM+0x1c>
	{
		servoToStart.TIM->CCR1 = pwmValue;
 81099d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81099d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81099d8:	635a      	str	r2, [r3, #52]	; 0x34
 81099da:	e005      	b.n	81099e8 <startPWM+0x28>
	}
	else if (servoToStart.ChannelID == 1)
 81099dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81099de:	2b01      	cmp	r3, #1
 81099e0:	d102      	bne.n	81099e8 <startPWM+0x28>
	{
		servoToStart.TIM->CCR2 = pwmValue;
 81099e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81099e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81099e6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	HAL_TIM_PWM_Start(&servoToStart.htim, servoToStart.ChannelID);
 81099e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81099ea:	4619      	mov	r1, r3
 81099ec:	f107 0008 	add.w	r0, r7, #8
 81099f0:	f7fa fe7c 	bl	81046ec <HAL_TIM_PWM_Start>
}
 81099f4:	bf00      	nop
 81099f6:	46bd      	mov	sp, r7
 81099f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81099fc:	b004      	add	sp, #16
 81099fe:	4770      	bx	lr

08109a00 <_ZdlPvj>:
 8109a00:	f000 b800 	b.w	8109a04 <_ZdlPv>

08109a04 <_ZdlPv>:
 8109a04:	f000 be1a 	b.w	810a63c <free>

08109a08 <asin>:
 8109a08:	b538      	push	{r3, r4, r5, lr}
 8109a0a:	ed2d 8b02 	vpush	{d8}
 8109a0e:	ec55 4b10 	vmov	r4, r5, d0
 8109a12:	f000 f869 	bl	8109ae8 <__ieee754_asin>
 8109a16:	4b16      	ldr	r3, [pc, #88]	; (8109a70 <asin+0x68>)
 8109a18:	eeb0 8a40 	vmov.f32	s16, s0
 8109a1c:	eef0 8a60 	vmov.f32	s17, s1
 8109a20:	f993 3000 	ldrsb.w	r3, [r3]
 8109a24:	3301      	adds	r3, #1
 8109a26:	d01c      	beq.n	8109a62 <asin+0x5a>
 8109a28:	4622      	mov	r2, r4
 8109a2a:	462b      	mov	r3, r5
 8109a2c:	4620      	mov	r0, r4
 8109a2e:	4629      	mov	r1, r5
 8109a30:	f7f7 f914 	bl	8100c5c <__aeabi_dcmpun>
 8109a34:	b9a8      	cbnz	r0, 8109a62 <asin+0x5a>
 8109a36:	ec45 4b10 	vmov	d0, r4, r5
 8109a3a:	f000 fd89 	bl	810a550 <fabs>
 8109a3e:	4b0d      	ldr	r3, [pc, #52]	; (8109a74 <asin+0x6c>)
 8109a40:	ec51 0b10 	vmov	r0, r1, d0
 8109a44:	2200      	movs	r2, #0
 8109a46:	f7f7 f8ff 	bl	8100c48 <__aeabi_dcmpgt>
 8109a4a:	b150      	cbz	r0, 8109a62 <asin+0x5a>
 8109a4c:	f000 fdb2 	bl	810a5b4 <__errno>
 8109a50:	ecbd 8b02 	vpop	{d8}
 8109a54:	2321      	movs	r3, #33	; 0x21
 8109a56:	6003      	str	r3, [r0, #0]
 8109a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109a5c:	4806      	ldr	r0, [pc, #24]	; (8109a78 <asin+0x70>)
 8109a5e:	f000 bd83 	b.w	810a568 <nan>
 8109a62:	eeb0 0a48 	vmov.f32	s0, s16
 8109a66:	eef0 0a68 	vmov.f32	s1, s17
 8109a6a:	ecbd 8b02 	vpop	{d8}
 8109a6e:	bd38      	pop	{r3, r4, r5, pc}
 8109a70:	100000b8 	.word	0x100000b8
 8109a74:	3ff00000 	.word	0x3ff00000
 8109a78:	0810f173 	.word	0x0810f173

08109a7c <atan2>:
 8109a7c:	f000 ba48 	b.w	8109f10 <__ieee754_atan2>

08109a80 <sqrt>:
 8109a80:	b538      	push	{r3, r4, r5, lr}
 8109a82:	ed2d 8b02 	vpush	{d8}
 8109a86:	ec55 4b10 	vmov	r4, r5, d0
 8109a8a:	f000 fb0b 	bl	810a0a4 <__ieee754_sqrt>
 8109a8e:	4b15      	ldr	r3, [pc, #84]	; (8109ae4 <sqrt+0x64>)
 8109a90:	eeb0 8a40 	vmov.f32	s16, s0
 8109a94:	eef0 8a60 	vmov.f32	s17, s1
 8109a98:	f993 3000 	ldrsb.w	r3, [r3]
 8109a9c:	3301      	adds	r3, #1
 8109a9e:	d019      	beq.n	8109ad4 <sqrt+0x54>
 8109aa0:	4622      	mov	r2, r4
 8109aa2:	462b      	mov	r3, r5
 8109aa4:	4620      	mov	r0, r4
 8109aa6:	4629      	mov	r1, r5
 8109aa8:	f7f7 f8d8 	bl	8100c5c <__aeabi_dcmpun>
 8109aac:	b990      	cbnz	r0, 8109ad4 <sqrt+0x54>
 8109aae:	2200      	movs	r2, #0
 8109ab0:	2300      	movs	r3, #0
 8109ab2:	4620      	mov	r0, r4
 8109ab4:	4629      	mov	r1, r5
 8109ab6:	f7f7 f8a9 	bl	8100c0c <__aeabi_dcmplt>
 8109aba:	b158      	cbz	r0, 8109ad4 <sqrt+0x54>
 8109abc:	f000 fd7a 	bl	810a5b4 <__errno>
 8109ac0:	2321      	movs	r3, #33	; 0x21
 8109ac2:	6003      	str	r3, [r0, #0]
 8109ac4:	2200      	movs	r2, #0
 8109ac6:	2300      	movs	r3, #0
 8109ac8:	4610      	mov	r0, r2
 8109aca:	4619      	mov	r1, r3
 8109acc:	f7f6 ff56 	bl	810097c <__aeabi_ddiv>
 8109ad0:	ec41 0b18 	vmov	d8, r0, r1
 8109ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8109ad8:	eef0 0a68 	vmov.f32	s1, s17
 8109adc:	ecbd 8b02 	vpop	{d8}
 8109ae0:	bd38      	pop	{r3, r4, r5, pc}
 8109ae2:	bf00      	nop
 8109ae4:	100000b8 	.word	0x100000b8

08109ae8 <__ieee754_asin>:
 8109ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109aec:	ed2d 8b04 	vpush	{d8-d9}
 8109af0:	ec55 4b10 	vmov	r4, r5, d0
 8109af4:	4bcc      	ldr	r3, [pc, #816]	; (8109e28 <__ieee754_asin+0x340>)
 8109af6:	b083      	sub	sp, #12
 8109af8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8109afc:	4598      	cmp	r8, r3
 8109afe:	9501      	str	r5, [sp, #4]
 8109b00:	dd35      	ble.n	8109b6e <__ieee754_asin+0x86>
 8109b02:	ee10 3a10 	vmov	r3, s0
 8109b06:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8109b0a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8109b0e:	ea58 0303 	orrs.w	r3, r8, r3
 8109b12:	d117      	bne.n	8109b44 <__ieee754_asin+0x5c>
 8109b14:	a3aa      	add	r3, pc, #680	; (adr r3, 8109dc0 <__ieee754_asin+0x2d8>)
 8109b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b1a:	ee10 0a10 	vmov	r0, s0
 8109b1e:	4629      	mov	r1, r5
 8109b20:	f7f6 fe02 	bl	8100728 <__aeabi_dmul>
 8109b24:	a3a8      	add	r3, pc, #672	; (adr r3, 8109dc8 <__ieee754_asin+0x2e0>)
 8109b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b2a:	4606      	mov	r6, r0
 8109b2c:	460f      	mov	r7, r1
 8109b2e:	4620      	mov	r0, r4
 8109b30:	4629      	mov	r1, r5
 8109b32:	f7f6 fdf9 	bl	8100728 <__aeabi_dmul>
 8109b36:	4602      	mov	r2, r0
 8109b38:	460b      	mov	r3, r1
 8109b3a:	4630      	mov	r0, r6
 8109b3c:	4639      	mov	r1, r7
 8109b3e:	f7f6 fc3d 	bl	81003bc <__adddf3>
 8109b42:	e00b      	b.n	8109b5c <__ieee754_asin+0x74>
 8109b44:	ee10 2a10 	vmov	r2, s0
 8109b48:	462b      	mov	r3, r5
 8109b4a:	ee10 0a10 	vmov	r0, s0
 8109b4e:	4629      	mov	r1, r5
 8109b50:	f7f6 fc32 	bl	81003b8 <__aeabi_dsub>
 8109b54:	4602      	mov	r2, r0
 8109b56:	460b      	mov	r3, r1
 8109b58:	f7f6 ff10 	bl	810097c <__aeabi_ddiv>
 8109b5c:	4604      	mov	r4, r0
 8109b5e:	460d      	mov	r5, r1
 8109b60:	ec45 4b10 	vmov	d0, r4, r5
 8109b64:	b003      	add	sp, #12
 8109b66:	ecbd 8b04 	vpop	{d8-d9}
 8109b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109b6e:	4baf      	ldr	r3, [pc, #700]	; (8109e2c <__ieee754_asin+0x344>)
 8109b70:	4598      	cmp	r8, r3
 8109b72:	dc11      	bgt.n	8109b98 <__ieee754_asin+0xb0>
 8109b74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8109b78:	f280 80ae 	bge.w	8109cd8 <__ieee754_asin+0x1f0>
 8109b7c:	a394      	add	r3, pc, #592	; (adr r3, 8109dd0 <__ieee754_asin+0x2e8>)
 8109b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b82:	ee10 0a10 	vmov	r0, s0
 8109b86:	4629      	mov	r1, r5
 8109b88:	f7f6 fc18 	bl	81003bc <__adddf3>
 8109b8c:	4ba8      	ldr	r3, [pc, #672]	; (8109e30 <__ieee754_asin+0x348>)
 8109b8e:	2200      	movs	r2, #0
 8109b90:	f7f7 f85a 	bl	8100c48 <__aeabi_dcmpgt>
 8109b94:	2800      	cmp	r0, #0
 8109b96:	d1e3      	bne.n	8109b60 <__ieee754_asin+0x78>
 8109b98:	ec45 4b10 	vmov	d0, r4, r5
 8109b9c:	f000 fcd8 	bl	810a550 <fabs>
 8109ba0:	49a3      	ldr	r1, [pc, #652]	; (8109e30 <__ieee754_asin+0x348>)
 8109ba2:	ec53 2b10 	vmov	r2, r3, d0
 8109ba6:	2000      	movs	r0, #0
 8109ba8:	f7f6 fc06 	bl	81003b8 <__aeabi_dsub>
 8109bac:	4ba1      	ldr	r3, [pc, #644]	; (8109e34 <__ieee754_asin+0x34c>)
 8109bae:	2200      	movs	r2, #0
 8109bb0:	f7f6 fdba 	bl	8100728 <__aeabi_dmul>
 8109bb4:	a388      	add	r3, pc, #544	; (adr r3, 8109dd8 <__ieee754_asin+0x2f0>)
 8109bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109bba:	4604      	mov	r4, r0
 8109bbc:	460d      	mov	r5, r1
 8109bbe:	f7f6 fdb3 	bl	8100728 <__aeabi_dmul>
 8109bc2:	a387      	add	r3, pc, #540	; (adr r3, 8109de0 <__ieee754_asin+0x2f8>)
 8109bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109bc8:	f7f6 fbf8 	bl	81003bc <__adddf3>
 8109bcc:	4622      	mov	r2, r4
 8109bce:	462b      	mov	r3, r5
 8109bd0:	f7f6 fdaa 	bl	8100728 <__aeabi_dmul>
 8109bd4:	a384      	add	r3, pc, #528	; (adr r3, 8109de8 <__ieee754_asin+0x300>)
 8109bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109bda:	f7f6 fbed 	bl	81003b8 <__aeabi_dsub>
 8109bde:	4622      	mov	r2, r4
 8109be0:	462b      	mov	r3, r5
 8109be2:	f7f6 fda1 	bl	8100728 <__aeabi_dmul>
 8109be6:	a382      	add	r3, pc, #520	; (adr r3, 8109df0 <__ieee754_asin+0x308>)
 8109be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109bec:	f7f6 fbe6 	bl	81003bc <__adddf3>
 8109bf0:	4622      	mov	r2, r4
 8109bf2:	462b      	mov	r3, r5
 8109bf4:	f7f6 fd98 	bl	8100728 <__aeabi_dmul>
 8109bf8:	a37f      	add	r3, pc, #508	; (adr r3, 8109df8 <__ieee754_asin+0x310>)
 8109bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109bfe:	f7f6 fbdb 	bl	81003b8 <__aeabi_dsub>
 8109c02:	4622      	mov	r2, r4
 8109c04:	462b      	mov	r3, r5
 8109c06:	f7f6 fd8f 	bl	8100728 <__aeabi_dmul>
 8109c0a:	a37d      	add	r3, pc, #500	; (adr r3, 8109e00 <__ieee754_asin+0x318>)
 8109c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c10:	f7f6 fbd4 	bl	81003bc <__adddf3>
 8109c14:	4622      	mov	r2, r4
 8109c16:	462b      	mov	r3, r5
 8109c18:	f7f6 fd86 	bl	8100728 <__aeabi_dmul>
 8109c1c:	a37a      	add	r3, pc, #488	; (adr r3, 8109e08 <__ieee754_asin+0x320>)
 8109c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c22:	ec41 0b18 	vmov	d8, r0, r1
 8109c26:	4620      	mov	r0, r4
 8109c28:	4629      	mov	r1, r5
 8109c2a:	f7f6 fd7d 	bl	8100728 <__aeabi_dmul>
 8109c2e:	a378      	add	r3, pc, #480	; (adr r3, 8109e10 <__ieee754_asin+0x328>)
 8109c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c34:	f7f6 fbc0 	bl	81003b8 <__aeabi_dsub>
 8109c38:	4622      	mov	r2, r4
 8109c3a:	462b      	mov	r3, r5
 8109c3c:	f7f6 fd74 	bl	8100728 <__aeabi_dmul>
 8109c40:	a375      	add	r3, pc, #468	; (adr r3, 8109e18 <__ieee754_asin+0x330>)
 8109c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c46:	f7f6 fbb9 	bl	81003bc <__adddf3>
 8109c4a:	4622      	mov	r2, r4
 8109c4c:	462b      	mov	r3, r5
 8109c4e:	f7f6 fd6b 	bl	8100728 <__aeabi_dmul>
 8109c52:	a373      	add	r3, pc, #460	; (adr r3, 8109e20 <__ieee754_asin+0x338>)
 8109c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c58:	f7f6 fbae 	bl	81003b8 <__aeabi_dsub>
 8109c5c:	4622      	mov	r2, r4
 8109c5e:	462b      	mov	r3, r5
 8109c60:	f7f6 fd62 	bl	8100728 <__aeabi_dmul>
 8109c64:	4b72      	ldr	r3, [pc, #456]	; (8109e30 <__ieee754_asin+0x348>)
 8109c66:	2200      	movs	r2, #0
 8109c68:	f7f6 fba8 	bl	81003bc <__adddf3>
 8109c6c:	ec45 4b10 	vmov	d0, r4, r5
 8109c70:	4606      	mov	r6, r0
 8109c72:	460f      	mov	r7, r1
 8109c74:	f000 fa16 	bl	810a0a4 <__ieee754_sqrt>
 8109c78:	4b6f      	ldr	r3, [pc, #444]	; (8109e38 <__ieee754_asin+0x350>)
 8109c7a:	4598      	cmp	r8, r3
 8109c7c:	ec5b ab10 	vmov	sl, fp, d0
 8109c80:	f340 80dc 	ble.w	8109e3c <__ieee754_asin+0x354>
 8109c84:	4632      	mov	r2, r6
 8109c86:	463b      	mov	r3, r7
 8109c88:	ec51 0b18 	vmov	r0, r1, d8
 8109c8c:	f7f6 fe76 	bl	810097c <__aeabi_ddiv>
 8109c90:	4652      	mov	r2, sl
 8109c92:	465b      	mov	r3, fp
 8109c94:	f7f6 fd48 	bl	8100728 <__aeabi_dmul>
 8109c98:	4652      	mov	r2, sl
 8109c9a:	465b      	mov	r3, fp
 8109c9c:	f7f6 fb8e 	bl	81003bc <__adddf3>
 8109ca0:	4602      	mov	r2, r0
 8109ca2:	460b      	mov	r3, r1
 8109ca4:	f7f6 fb8a 	bl	81003bc <__adddf3>
 8109ca8:	a347      	add	r3, pc, #284	; (adr r3, 8109dc8 <__ieee754_asin+0x2e0>)
 8109caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109cae:	f7f6 fb83 	bl	81003b8 <__aeabi_dsub>
 8109cb2:	4602      	mov	r2, r0
 8109cb4:	460b      	mov	r3, r1
 8109cb6:	a142      	add	r1, pc, #264	; (adr r1, 8109dc0 <__ieee754_asin+0x2d8>)
 8109cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109cbc:	f7f6 fb7c 	bl	81003b8 <__aeabi_dsub>
 8109cc0:	9b01      	ldr	r3, [sp, #4]
 8109cc2:	2b00      	cmp	r3, #0
 8109cc4:	bfdc      	itt	le
 8109cc6:	4602      	movle	r2, r0
 8109cc8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8109ccc:	4604      	mov	r4, r0
 8109cce:	460d      	mov	r5, r1
 8109cd0:	bfdc      	itt	le
 8109cd2:	4614      	movle	r4, r2
 8109cd4:	461d      	movle	r5, r3
 8109cd6:	e743      	b.n	8109b60 <__ieee754_asin+0x78>
 8109cd8:	ee10 2a10 	vmov	r2, s0
 8109cdc:	ee10 0a10 	vmov	r0, s0
 8109ce0:	462b      	mov	r3, r5
 8109ce2:	4629      	mov	r1, r5
 8109ce4:	f7f6 fd20 	bl	8100728 <__aeabi_dmul>
 8109ce8:	a33b      	add	r3, pc, #236	; (adr r3, 8109dd8 <__ieee754_asin+0x2f0>)
 8109cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109cee:	4606      	mov	r6, r0
 8109cf0:	460f      	mov	r7, r1
 8109cf2:	f7f6 fd19 	bl	8100728 <__aeabi_dmul>
 8109cf6:	a33a      	add	r3, pc, #232	; (adr r3, 8109de0 <__ieee754_asin+0x2f8>)
 8109cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109cfc:	f7f6 fb5e 	bl	81003bc <__adddf3>
 8109d00:	4632      	mov	r2, r6
 8109d02:	463b      	mov	r3, r7
 8109d04:	f7f6 fd10 	bl	8100728 <__aeabi_dmul>
 8109d08:	a337      	add	r3, pc, #220	; (adr r3, 8109de8 <__ieee754_asin+0x300>)
 8109d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d0e:	f7f6 fb53 	bl	81003b8 <__aeabi_dsub>
 8109d12:	4632      	mov	r2, r6
 8109d14:	463b      	mov	r3, r7
 8109d16:	f7f6 fd07 	bl	8100728 <__aeabi_dmul>
 8109d1a:	a335      	add	r3, pc, #212	; (adr r3, 8109df0 <__ieee754_asin+0x308>)
 8109d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d20:	f7f6 fb4c 	bl	81003bc <__adddf3>
 8109d24:	4632      	mov	r2, r6
 8109d26:	463b      	mov	r3, r7
 8109d28:	f7f6 fcfe 	bl	8100728 <__aeabi_dmul>
 8109d2c:	a332      	add	r3, pc, #200	; (adr r3, 8109df8 <__ieee754_asin+0x310>)
 8109d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d32:	f7f6 fb41 	bl	81003b8 <__aeabi_dsub>
 8109d36:	4632      	mov	r2, r6
 8109d38:	463b      	mov	r3, r7
 8109d3a:	f7f6 fcf5 	bl	8100728 <__aeabi_dmul>
 8109d3e:	a330      	add	r3, pc, #192	; (adr r3, 8109e00 <__ieee754_asin+0x318>)
 8109d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d44:	f7f6 fb3a 	bl	81003bc <__adddf3>
 8109d48:	4632      	mov	r2, r6
 8109d4a:	463b      	mov	r3, r7
 8109d4c:	f7f6 fcec 	bl	8100728 <__aeabi_dmul>
 8109d50:	a32d      	add	r3, pc, #180	; (adr r3, 8109e08 <__ieee754_asin+0x320>)
 8109d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d56:	4680      	mov	r8, r0
 8109d58:	4689      	mov	r9, r1
 8109d5a:	4630      	mov	r0, r6
 8109d5c:	4639      	mov	r1, r7
 8109d5e:	f7f6 fce3 	bl	8100728 <__aeabi_dmul>
 8109d62:	a32b      	add	r3, pc, #172	; (adr r3, 8109e10 <__ieee754_asin+0x328>)
 8109d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d68:	f7f6 fb26 	bl	81003b8 <__aeabi_dsub>
 8109d6c:	4632      	mov	r2, r6
 8109d6e:	463b      	mov	r3, r7
 8109d70:	f7f6 fcda 	bl	8100728 <__aeabi_dmul>
 8109d74:	a328      	add	r3, pc, #160	; (adr r3, 8109e18 <__ieee754_asin+0x330>)
 8109d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d7a:	f7f6 fb1f 	bl	81003bc <__adddf3>
 8109d7e:	4632      	mov	r2, r6
 8109d80:	463b      	mov	r3, r7
 8109d82:	f7f6 fcd1 	bl	8100728 <__aeabi_dmul>
 8109d86:	a326      	add	r3, pc, #152	; (adr r3, 8109e20 <__ieee754_asin+0x338>)
 8109d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d8c:	f7f6 fb14 	bl	81003b8 <__aeabi_dsub>
 8109d90:	4632      	mov	r2, r6
 8109d92:	463b      	mov	r3, r7
 8109d94:	f7f6 fcc8 	bl	8100728 <__aeabi_dmul>
 8109d98:	4b25      	ldr	r3, [pc, #148]	; (8109e30 <__ieee754_asin+0x348>)
 8109d9a:	2200      	movs	r2, #0
 8109d9c:	f7f6 fb0e 	bl	81003bc <__adddf3>
 8109da0:	4602      	mov	r2, r0
 8109da2:	460b      	mov	r3, r1
 8109da4:	4640      	mov	r0, r8
 8109da6:	4649      	mov	r1, r9
 8109da8:	f7f6 fde8 	bl	810097c <__aeabi_ddiv>
 8109dac:	4622      	mov	r2, r4
 8109dae:	462b      	mov	r3, r5
 8109db0:	f7f6 fcba 	bl	8100728 <__aeabi_dmul>
 8109db4:	4602      	mov	r2, r0
 8109db6:	460b      	mov	r3, r1
 8109db8:	4620      	mov	r0, r4
 8109dba:	4629      	mov	r1, r5
 8109dbc:	e6bf      	b.n	8109b3e <__ieee754_asin+0x56>
 8109dbe:	bf00      	nop
 8109dc0:	54442d18 	.word	0x54442d18
 8109dc4:	3ff921fb 	.word	0x3ff921fb
 8109dc8:	33145c07 	.word	0x33145c07
 8109dcc:	3c91a626 	.word	0x3c91a626
 8109dd0:	8800759c 	.word	0x8800759c
 8109dd4:	7e37e43c 	.word	0x7e37e43c
 8109dd8:	0dfdf709 	.word	0x0dfdf709
 8109ddc:	3f023de1 	.word	0x3f023de1
 8109de0:	7501b288 	.word	0x7501b288
 8109de4:	3f49efe0 	.word	0x3f49efe0
 8109de8:	b5688f3b 	.word	0xb5688f3b
 8109dec:	3fa48228 	.word	0x3fa48228
 8109df0:	0e884455 	.word	0x0e884455
 8109df4:	3fc9c155 	.word	0x3fc9c155
 8109df8:	03eb6f7d 	.word	0x03eb6f7d
 8109dfc:	3fd4d612 	.word	0x3fd4d612
 8109e00:	55555555 	.word	0x55555555
 8109e04:	3fc55555 	.word	0x3fc55555
 8109e08:	b12e9282 	.word	0xb12e9282
 8109e0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8109e10:	1b8d0159 	.word	0x1b8d0159
 8109e14:	3fe6066c 	.word	0x3fe6066c
 8109e18:	9c598ac8 	.word	0x9c598ac8
 8109e1c:	40002ae5 	.word	0x40002ae5
 8109e20:	1c8a2d4b 	.word	0x1c8a2d4b
 8109e24:	40033a27 	.word	0x40033a27
 8109e28:	3fefffff 	.word	0x3fefffff
 8109e2c:	3fdfffff 	.word	0x3fdfffff
 8109e30:	3ff00000 	.word	0x3ff00000
 8109e34:	3fe00000 	.word	0x3fe00000
 8109e38:	3fef3332 	.word	0x3fef3332
 8109e3c:	ee10 2a10 	vmov	r2, s0
 8109e40:	ee10 0a10 	vmov	r0, s0
 8109e44:	465b      	mov	r3, fp
 8109e46:	4659      	mov	r1, fp
 8109e48:	f7f6 fab8 	bl	81003bc <__adddf3>
 8109e4c:	4632      	mov	r2, r6
 8109e4e:	463b      	mov	r3, r7
 8109e50:	ec41 0b19 	vmov	d9, r0, r1
 8109e54:	ec51 0b18 	vmov	r0, r1, d8
 8109e58:	f7f6 fd90 	bl	810097c <__aeabi_ddiv>
 8109e5c:	4602      	mov	r2, r0
 8109e5e:	460b      	mov	r3, r1
 8109e60:	ec51 0b19 	vmov	r0, r1, d9
 8109e64:	f7f6 fc60 	bl	8100728 <__aeabi_dmul>
 8109e68:	f04f 0800 	mov.w	r8, #0
 8109e6c:	4606      	mov	r6, r0
 8109e6e:	460f      	mov	r7, r1
 8109e70:	4642      	mov	r2, r8
 8109e72:	465b      	mov	r3, fp
 8109e74:	4640      	mov	r0, r8
 8109e76:	4659      	mov	r1, fp
 8109e78:	f7f6 fc56 	bl	8100728 <__aeabi_dmul>
 8109e7c:	4602      	mov	r2, r0
 8109e7e:	460b      	mov	r3, r1
 8109e80:	4620      	mov	r0, r4
 8109e82:	4629      	mov	r1, r5
 8109e84:	f7f6 fa98 	bl	81003b8 <__aeabi_dsub>
 8109e88:	4642      	mov	r2, r8
 8109e8a:	4604      	mov	r4, r0
 8109e8c:	460d      	mov	r5, r1
 8109e8e:	465b      	mov	r3, fp
 8109e90:	4650      	mov	r0, sl
 8109e92:	4659      	mov	r1, fp
 8109e94:	f7f6 fa92 	bl	81003bc <__adddf3>
 8109e98:	4602      	mov	r2, r0
 8109e9a:	460b      	mov	r3, r1
 8109e9c:	4620      	mov	r0, r4
 8109e9e:	4629      	mov	r1, r5
 8109ea0:	f7f6 fd6c 	bl	810097c <__aeabi_ddiv>
 8109ea4:	4602      	mov	r2, r0
 8109ea6:	460b      	mov	r3, r1
 8109ea8:	f7f6 fa88 	bl	81003bc <__adddf3>
 8109eac:	4602      	mov	r2, r0
 8109eae:	460b      	mov	r3, r1
 8109eb0:	a113      	add	r1, pc, #76	; (adr r1, 8109f00 <__ieee754_asin+0x418>)
 8109eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109eb6:	f7f6 fa7f 	bl	81003b8 <__aeabi_dsub>
 8109eba:	4602      	mov	r2, r0
 8109ebc:	460b      	mov	r3, r1
 8109ebe:	4630      	mov	r0, r6
 8109ec0:	4639      	mov	r1, r7
 8109ec2:	f7f6 fa79 	bl	81003b8 <__aeabi_dsub>
 8109ec6:	4642      	mov	r2, r8
 8109ec8:	4604      	mov	r4, r0
 8109eca:	460d      	mov	r5, r1
 8109ecc:	465b      	mov	r3, fp
 8109ece:	4640      	mov	r0, r8
 8109ed0:	4659      	mov	r1, fp
 8109ed2:	f7f6 fa73 	bl	81003bc <__adddf3>
 8109ed6:	4602      	mov	r2, r0
 8109ed8:	460b      	mov	r3, r1
 8109eda:	a10b      	add	r1, pc, #44	; (adr r1, 8109f08 <__ieee754_asin+0x420>)
 8109edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109ee0:	f7f6 fa6a 	bl	81003b8 <__aeabi_dsub>
 8109ee4:	4602      	mov	r2, r0
 8109ee6:	460b      	mov	r3, r1
 8109ee8:	4620      	mov	r0, r4
 8109eea:	4629      	mov	r1, r5
 8109eec:	f7f6 fa64 	bl	81003b8 <__aeabi_dsub>
 8109ef0:	4602      	mov	r2, r0
 8109ef2:	460b      	mov	r3, r1
 8109ef4:	a104      	add	r1, pc, #16	; (adr r1, 8109f08 <__ieee754_asin+0x420>)
 8109ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109efa:	e6df      	b.n	8109cbc <__ieee754_asin+0x1d4>
 8109efc:	f3af 8000 	nop.w
 8109f00:	33145c07 	.word	0x33145c07
 8109f04:	3c91a626 	.word	0x3c91a626
 8109f08:	54442d18 	.word	0x54442d18
 8109f0c:	3fe921fb 	.word	0x3fe921fb

08109f10 <__ieee754_atan2>:
 8109f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109f14:	ec57 6b11 	vmov	r6, r7, d1
 8109f18:	4273      	negs	r3, r6
 8109f1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 810a0a0 <__ieee754_atan2+0x190>
 8109f1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8109f22:	4333      	orrs	r3, r6
 8109f24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8109f28:	4573      	cmp	r3, lr
 8109f2a:	ec51 0b10 	vmov	r0, r1, d0
 8109f2e:	ee11 8a10 	vmov	r8, s2
 8109f32:	d80a      	bhi.n	8109f4a <__ieee754_atan2+0x3a>
 8109f34:	4244      	negs	r4, r0
 8109f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8109f3a:	4304      	orrs	r4, r0
 8109f3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8109f40:	4574      	cmp	r4, lr
 8109f42:	ee10 9a10 	vmov	r9, s0
 8109f46:	468c      	mov	ip, r1
 8109f48:	d907      	bls.n	8109f5a <__ieee754_atan2+0x4a>
 8109f4a:	4632      	mov	r2, r6
 8109f4c:	463b      	mov	r3, r7
 8109f4e:	f7f6 fa35 	bl	81003bc <__adddf3>
 8109f52:	ec41 0b10 	vmov	d0, r0, r1
 8109f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109f5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8109f5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8109f62:	4334      	orrs	r4, r6
 8109f64:	d103      	bne.n	8109f6e <__ieee754_atan2+0x5e>
 8109f66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109f6a:	f000 b951 	b.w	810a210 <atan>
 8109f6e:	17bc      	asrs	r4, r7, #30
 8109f70:	f004 0402 	and.w	r4, r4, #2
 8109f74:	ea53 0909 	orrs.w	r9, r3, r9
 8109f78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8109f7c:	d107      	bne.n	8109f8e <__ieee754_atan2+0x7e>
 8109f7e:	2c02      	cmp	r4, #2
 8109f80:	d060      	beq.n	810a044 <__ieee754_atan2+0x134>
 8109f82:	2c03      	cmp	r4, #3
 8109f84:	d1e5      	bne.n	8109f52 <__ieee754_atan2+0x42>
 8109f86:	a142      	add	r1, pc, #264	; (adr r1, 810a090 <__ieee754_atan2+0x180>)
 8109f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f8c:	e7e1      	b.n	8109f52 <__ieee754_atan2+0x42>
 8109f8e:	ea52 0808 	orrs.w	r8, r2, r8
 8109f92:	d106      	bne.n	8109fa2 <__ieee754_atan2+0x92>
 8109f94:	f1bc 0f00 	cmp.w	ip, #0
 8109f98:	da5f      	bge.n	810a05a <__ieee754_atan2+0x14a>
 8109f9a:	a13f      	add	r1, pc, #252	; (adr r1, 810a098 <__ieee754_atan2+0x188>)
 8109f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109fa0:	e7d7      	b.n	8109f52 <__ieee754_atan2+0x42>
 8109fa2:	4572      	cmp	r2, lr
 8109fa4:	d10f      	bne.n	8109fc6 <__ieee754_atan2+0xb6>
 8109fa6:	4293      	cmp	r3, r2
 8109fa8:	f104 34ff 	add.w	r4, r4, #4294967295
 8109fac:	d107      	bne.n	8109fbe <__ieee754_atan2+0xae>
 8109fae:	2c02      	cmp	r4, #2
 8109fb0:	d84c      	bhi.n	810a04c <__ieee754_atan2+0x13c>
 8109fb2:	4b35      	ldr	r3, [pc, #212]	; (810a088 <__ieee754_atan2+0x178>)
 8109fb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8109fb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8109fbc:	e7c9      	b.n	8109f52 <__ieee754_atan2+0x42>
 8109fbe:	2c02      	cmp	r4, #2
 8109fc0:	d848      	bhi.n	810a054 <__ieee754_atan2+0x144>
 8109fc2:	4b32      	ldr	r3, [pc, #200]	; (810a08c <__ieee754_atan2+0x17c>)
 8109fc4:	e7f6      	b.n	8109fb4 <__ieee754_atan2+0xa4>
 8109fc6:	4573      	cmp	r3, lr
 8109fc8:	d0e4      	beq.n	8109f94 <__ieee754_atan2+0x84>
 8109fca:	1a9b      	subs	r3, r3, r2
 8109fcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8109fd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8109fd4:	da1e      	bge.n	810a014 <__ieee754_atan2+0x104>
 8109fd6:	2f00      	cmp	r7, #0
 8109fd8:	da01      	bge.n	8109fde <__ieee754_atan2+0xce>
 8109fda:	323c      	adds	r2, #60	; 0x3c
 8109fdc:	db1e      	blt.n	810a01c <__ieee754_atan2+0x10c>
 8109fde:	4632      	mov	r2, r6
 8109fe0:	463b      	mov	r3, r7
 8109fe2:	f7f6 fccb 	bl	810097c <__aeabi_ddiv>
 8109fe6:	ec41 0b10 	vmov	d0, r0, r1
 8109fea:	f000 fab1 	bl	810a550 <fabs>
 8109fee:	f000 f90f 	bl	810a210 <atan>
 8109ff2:	ec51 0b10 	vmov	r0, r1, d0
 8109ff6:	2c01      	cmp	r4, #1
 8109ff8:	d013      	beq.n	810a022 <__ieee754_atan2+0x112>
 8109ffa:	2c02      	cmp	r4, #2
 8109ffc:	d015      	beq.n	810a02a <__ieee754_atan2+0x11a>
 8109ffe:	2c00      	cmp	r4, #0
 810a000:	d0a7      	beq.n	8109f52 <__ieee754_atan2+0x42>
 810a002:	a319      	add	r3, pc, #100	; (adr r3, 810a068 <__ieee754_atan2+0x158>)
 810a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a008:	f7f6 f9d6 	bl	81003b8 <__aeabi_dsub>
 810a00c:	a318      	add	r3, pc, #96	; (adr r3, 810a070 <__ieee754_atan2+0x160>)
 810a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a012:	e014      	b.n	810a03e <__ieee754_atan2+0x12e>
 810a014:	a118      	add	r1, pc, #96	; (adr r1, 810a078 <__ieee754_atan2+0x168>)
 810a016:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a01a:	e7ec      	b.n	8109ff6 <__ieee754_atan2+0xe6>
 810a01c:	2000      	movs	r0, #0
 810a01e:	2100      	movs	r1, #0
 810a020:	e7e9      	b.n	8109ff6 <__ieee754_atan2+0xe6>
 810a022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a026:	4619      	mov	r1, r3
 810a028:	e793      	b.n	8109f52 <__ieee754_atan2+0x42>
 810a02a:	a30f      	add	r3, pc, #60	; (adr r3, 810a068 <__ieee754_atan2+0x158>)
 810a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a030:	f7f6 f9c2 	bl	81003b8 <__aeabi_dsub>
 810a034:	4602      	mov	r2, r0
 810a036:	460b      	mov	r3, r1
 810a038:	a10d      	add	r1, pc, #52	; (adr r1, 810a070 <__ieee754_atan2+0x160>)
 810a03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a03e:	f7f6 f9bb 	bl	81003b8 <__aeabi_dsub>
 810a042:	e786      	b.n	8109f52 <__ieee754_atan2+0x42>
 810a044:	a10a      	add	r1, pc, #40	; (adr r1, 810a070 <__ieee754_atan2+0x160>)
 810a046:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a04a:	e782      	b.n	8109f52 <__ieee754_atan2+0x42>
 810a04c:	a10c      	add	r1, pc, #48	; (adr r1, 810a080 <__ieee754_atan2+0x170>)
 810a04e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a052:	e77e      	b.n	8109f52 <__ieee754_atan2+0x42>
 810a054:	2000      	movs	r0, #0
 810a056:	2100      	movs	r1, #0
 810a058:	e77b      	b.n	8109f52 <__ieee754_atan2+0x42>
 810a05a:	a107      	add	r1, pc, #28	; (adr r1, 810a078 <__ieee754_atan2+0x168>)
 810a05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a060:	e777      	b.n	8109f52 <__ieee754_atan2+0x42>
 810a062:	bf00      	nop
 810a064:	f3af 8000 	nop.w
 810a068:	33145c07 	.word	0x33145c07
 810a06c:	3ca1a626 	.word	0x3ca1a626
 810a070:	54442d18 	.word	0x54442d18
 810a074:	400921fb 	.word	0x400921fb
 810a078:	54442d18 	.word	0x54442d18
 810a07c:	3ff921fb 	.word	0x3ff921fb
 810a080:	54442d18 	.word	0x54442d18
 810a084:	3fe921fb 	.word	0x3fe921fb
 810a088:	0810f0c8 	.word	0x0810f0c8
 810a08c:	0810f0e0 	.word	0x0810f0e0
 810a090:	54442d18 	.word	0x54442d18
 810a094:	c00921fb 	.word	0xc00921fb
 810a098:	54442d18 	.word	0x54442d18
 810a09c:	bff921fb 	.word	0xbff921fb
 810a0a0:	7ff00000 	.word	0x7ff00000

0810a0a4 <__ieee754_sqrt>:
 810a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a0a8:	ec55 4b10 	vmov	r4, r5, d0
 810a0ac:	4e56      	ldr	r6, [pc, #344]	; (810a208 <__ieee754_sqrt+0x164>)
 810a0ae:	43ae      	bics	r6, r5
 810a0b0:	ee10 0a10 	vmov	r0, s0
 810a0b4:	ee10 3a10 	vmov	r3, s0
 810a0b8:	4629      	mov	r1, r5
 810a0ba:	462a      	mov	r2, r5
 810a0bc:	d110      	bne.n	810a0e0 <__ieee754_sqrt+0x3c>
 810a0be:	ee10 2a10 	vmov	r2, s0
 810a0c2:	462b      	mov	r3, r5
 810a0c4:	f7f6 fb30 	bl	8100728 <__aeabi_dmul>
 810a0c8:	4602      	mov	r2, r0
 810a0ca:	460b      	mov	r3, r1
 810a0cc:	4620      	mov	r0, r4
 810a0ce:	4629      	mov	r1, r5
 810a0d0:	f7f6 f974 	bl	81003bc <__adddf3>
 810a0d4:	4604      	mov	r4, r0
 810a0d6:	460d      	mov	r5, r1
 810a0d8:	ec45 4b10 	vmov	d0, r4, r5
 810a0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a0e0:	2d00      	cmp	r5, #0
 810a0e2:	dc10      	bgt.n	810a106 <__ieee754_sqrt+0x62>
 810a0e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810a0e8:	4330      	orrs	r0, r6
 810a0ea:	d0f5      	beq.n	810a0d8 <__ieee754_sqrt+0x34>
 810a0ec:	b15d      	cbz	r5, 810a106 <__ieee754_sqrt+0x62>
 810a0ee:	ee10 2a10 	vmov	r2, s0
 810a0f2:	462b      	mov	r3, r5
 810a0f4:	ee10 0a10 	vmov	r0, s0
 810a0f8:	f7f6 f95e 	bl	81003b8 <__aeabi_dsub>
 810a0fc:	4602      	mov	r2, r0
 810a0fe:	460b      	mov	r3, r1
 810a100:	f7f6 fc3c 	bl	810097c <__aeabi_ddiv>
 810a104:	e7e6      	b.n	810a0d4 <__ieee754_sqrt+0x30>
 810a106:	1509      	asrs	r1, r1, #20
 810a108:	d076      	beq.n	810a1f8 <__ieee754_sqrt+0x154>
 810a10a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810a10e:	07ce      	lsls	r6, r1, #31
 810a110:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810a114:	bf5e      	ittt	pl
 810a116:	0fda      	lsrpl	r2, r3, #31
 810a118:	005b      	lslpl	r3, r3, #1
 810a11a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810a11e:	0fda      	lsrs	r2, r3, #31
 810a120:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810a124:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810a128:	2000      	movs	r0, #0
 810a12a:	106d      	asrs	r5, r5, #1
 810a12c:	005b      	lsls	r3, r3, #1
 810a12e:	f04f 0e16 	mov.w	lr, #22
 810a132:	4684      	mov	ip, r0
 810a134:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a138:	eb0c 0401 	add.w	r4, ip, r1
 810a13c:	4294      	cmp	r4, r2
 810a13e:	bfde      	ittt	le
 810a140:	1b12      	suble	r2, r2, r4
 810a142:	eb04 0c01 	addle.w	ip, r4, r1
 810a146:	1840      	addle	r0, r0, r1
 810a148:	0052      	lsls	r2, r2, #1
 810a14a:	f1be 0e01 	subs.w	lr, lr, #1
 810a14e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810a152:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810a156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810a15a:	d1ed      	bne.n	810a138 <__ieee754_sqrt+0x94>
 810a15c:	4671      	mov	r1, lr
 810a15e:	2720      	movs	r7, #32
 810a160:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810a164:	4562      	cmp	r2, ip
 810a166:	eb04 060e 	add.w	r6, r4, lr
 810a16a:	dc02      	bgt.n	810a172 <__ieee754_sqrt+0xce>
 810a16c:	d113      	bne.n	810a196 <__ieee754_sqrt+0xf2>
 810a16e:	429e      	cmp	r6, r3
 810a170:	d811      	bhi.n	810a196 <__ieee754_sqrt+0xf2>
 810a172:	2e00      	cmp	r6, #0
 810a174:	eb06 0e04 	add.w	lr, r6, r4
 810a178:	da43      	bge.n	810a202 <__ieee754_sqrt+0x15e>
 810a17a:	f1be 0f00 	cmp.w	lr, #0
 810a17e:	db40      	blt.n	810a202 <__ieee754_sqrt+0x15e>
 810a180:	f10c 0801 	add.w	r8, ip, #1
 810a184:	eba2 020c 	sub.w	r2, r2, ip
 810a188:	429e      	cmp	r6, r3
 810a18a:	bf88      	it	hi
 810a18c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810a190:	1b9b      	subs	r3, r3, r6
 810a192:	4421      	add	r1, r4
 810a194:	46c4      	mov	ip, r8
 810a196:	0052      	lsls	r2, r2, #1
 810a198:	3f01      	subs	r7, #1
 810a19a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810a19e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810a1a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810a1a6:	d1dd      	bne.n	810a164 <__ieee754_sqrt+0xc0>
 810a1a8:	4313      	orrs	r3, r2
 810a1aa:	d006      	beq.n	810a1ba <__ieee754_sqrt+0x116>
 810a1ac:	1c4c      	adds	r4, r1, #1
 810a1ae:	bf13      	iteet	ne
 810a1b0:	3101      	addne	r1, #1
 810a1b2:	3001      	addeq	r0, #1
 810a1b4:	4639      	moveq	r1, r7
 810a1b6:	f021 0101 	bicne.w	r1, r1, #1
 810a1ba:	1043      	asrs	r3, r0, #1
 810a1bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810a1c0:	0849      	lsrs	r1, r1, #1
 810a1c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810a1c6:	07c2      	lsls	r2, r0, #31
 810a1c8:	bf48      	it	mi
 810a1ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810a1ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810a1d2:	460c      	mov	r4, r1
 810a1d4:	463d      	mov	r5, r7
 810a1d6:	e77f      	b.n	810a0d8 <__ieee754_sqrt+0x34>
 810a1d8:	0ada      	lsrs	r2, r3, #11
 810a1da:	3815      	subs	r0, #21
 810a1dc:	055b      	lsls	r3, r3, #21
 810a1de:	2a00      	cmp	r2, #0
 810a1e0:	d0fa      	beq.n	810a1d8 <__ieee754_sqrt+0x134>
 810a1e2:	02d7      	lsls	r7, r2, #11
 810a1e4:	d50a      	bpl.n	810a1fc <__ieee754_sqrt+0x158>
 810a1e6:	f1c1 0420 	rsb	r4, r1, #32
 810a1ea:	fa23 f404 	lsr.w	r4, r3, r4
 810a1ee:	1e4d      	subs	r5, r1, #1
 810a1f0:	408b      	lsls	r3, r1
 810a1f2:	4322      	orrs	r2, r4
 810a1f4:	1b41      	subs	r1, r0, r5
 810a1f6:	e788      	b.n	810a10a <__ieee754_sqrt+0x66>
 810a1f8:	4608      	mov	r0, r1
 810a1fa:	e7f0      	b.n	810a1de <__ieee754_sqrt+0x13a>
 810a1fc:	0052      	lsls	r2, r2, #1
 810a1fe:	3101      	adds	r1, #1
 810a200:	e7ef      	b.n	810a1e2 <__ieee754_sqrt+0x13e>
 810a202:	46e0      	mov	r8, ip
 810a204:	e7be      	b.n	810a184 <__ieee754_sqrt+0xe0>
 810a206:	bf00      	nop
 810a208:	7ff00000 	.word	0x7ff00000
 810a20c:	00000000 	.word	0x00000000

0810a210 <atan>:
 810a210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a214:	ec55 4b10 	vmov	r4, r5, d0
 810a218:	4bc3      	ldr	r3, [pc, #780]	; (810a528 <atan+0x318>)
 810a21a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810a21e:	429e      	cmp	r6, r3
 810a220:	46ab      	mov	fp, r5
 810a222:	dd18      	ble.n	810a256 <atan+0x46>
 810a224:	4bc1      	ldr	r3, [pc, #772]	; (810a52c <atan+0x31c>)
 810a226:	429e      	cmp	r6, r3
 810a228:	dc01      	bgt.n	810a22e <atan+0x1e>
 810a22a:	d109      	bne.n	810a240 <atan+0x30>
 810a22c:	b144      	cbz	r4, 810a240 <atan+0x30>
 810a22e:	4622      	mov	r2, r4
 810a230:	462b      	mov	r3, r5
 810a232:	4620      	mov	r0, r4
 810a234:	4629      	mov	r1, r5
 810a236:	f7f6 f8c1 	bl	81003bc <__adddf3>
 810a23a:	4604      	mov	r4, r0
 810a23c:	460d      	mov	r5, r1
 810a23e:	e006      	b.n	810a24e <atan+0x3e>
 810a240:	f1bb 0f00 	cmp.w	fp, #0
 810a244:	f300 8131 	bgt.w	810a4aa <atan+0x29a>
 810a248:	a59b      	add	r5, pc, #620	; (adr r5, 810a4b8 <atan+0x2a8>)
 810a24a:	e9d5 4500 	ldrd	r4, r5, [r5]
 810a24e:	ec45 4b10 	vmov	d0, r4, r5
 810a252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a256:	4bb6      	ldr	r3, [pc, #728]	; (810a530 <atan+0x320>)
 810a258:	429e      	cmp	r6, r3
 810a25a:	dc14      	bgt.n	810a286 <atan+0x76>
 810a25c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 810a260:	429e      	cmp	r6, r3
 810a262:	dc0d      	bgt.n	810a280 <atan+0x70>
 810a264:	a396      	add	r3, pc, #600	; (adr r3, 810a4c0 <atan+0x2b0>)
 810a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a26a:	ee10 0a10 	vmov	r0, s0
 810a26e:	4629      	mov	r1, r5
 810a270:	f7f6 f8a4 	bl	81003bc <__adddf3>
 810a274:	4baf      	ldr	r3, [pc, #700]	; (810a534 <atan+0x324>)
 810a276:	2200      	movs	r2, #0
 810a278:	f7f6 fce6 	bl	8100c48 <__aeabi_dcmpgt>
 810a27c:	2800      	cmp	r0, #0
 810a27e:	d1e6      	bne.n	810a24e <atan+0x3e>
 810a280:	f04f 3aff 	mov.w	sl, #4294967295
 810a284:	e02b      	b.n	810a2de <atan+0xce>
 810a286:	f000 f963 	bl	810a550 <fabs>
 810a28a:	4bab      	ldr	r3, [pc, #684]	; (810a538 <atan+0x328>)
 810a28c:	429e      	cmp	r6, r3
 810a28e:	ec55 4b10 	vmov	r4, r5, d0
 810a292:	f300 80bf 	bgt.w	810a414 <atan+0x204>
 810a296:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 810a29a:	429e      	cmp	r6, r3
 810a29c:	f300 80a0 	bgt.w	810a3e0 <atan+0x1d0>
 810a2a0:	ee10 2a10 	vmov	r2, s0
 810a2a4:	ee10 0a10 	vmov	r0, s0
 810a2a8:	462b      	mov	r3, r5
 810a2aa:	4629      	mov	r1, r5
 810a2ac:	f7f6 f886 	bl	81003bc <__adddf3>
 810a2b0:	4ba0      	ldr	r3, [pc, #640]	; (810a534 <atan+0x324>)
 810a2b2:	2200      	movs	r2, #0
 810a2b4:	f7f6 f880 	bl	81003b8 <__aeabi_dsub>
 810a2b8:	2200      	movs	r2, #0
 810a2ba:	4606      	mov	r6, r0
 810a2bc:	460f      	mov	r7, r1
 810a2be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a2c2:	4620      	mov	r0, r4
 810a2c4:	4629      	mov	r1, r5
 810a2c6:	f7f6 f879 	bl	81003bc <__adddf3>
 810a2ca:	4602      	mov	r2, r0
 810a2cc:	460b      	mov	r3, r1
 810a2ce:	4630      	mov	r0, r6
 810a2d0:	4639      	mov	r1, r7
 810a2d2:	f7f6 fb53 	bl	810097c <__aeabi_ddiv>
 810a2d6:	f04f 0a00 	mov.w	sl, #0
 810a2da:	4604      	mov	r4, r0
 810a2dc:	460d      	mov	r5, r1
 810a2de:	4622      	mov	r2, r4
 810a2e0:	462b      	mov	r3, r5
 810a2e2:	4620      	mov	r0, r4
 810a2e4:	4629      	mov	r1, r5
 810a2e6:	f7f6 fa1f 	bl	8100728 <__aeabi_dmul>
 810a2ea:	4602      	mov	r2, r0
 810a2ec:	460b      	mov	r3, r1
 810a2ee:	4680      	mov	r8, r0
 810a2f0:	4689      	mov	r9, r1
 810a2f2:	f7f6 fa19 	bl	8100728 <__aeabi_dmul>
 810a2f6:	a374      	add	r3, pc, #464	; (adr r3, 810a4c8 <atan+0x2b8>)
 810a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2fc:	4606      	mov	r6, r0
 810a2fe:	460f      	mov	r7, r1
 810a300:	f7f6 fa12 	bl	8100728 <__aeabi_dmul>
 810a304:	a372      	add	r3, pc, #456	; (adr r3, 810a4d0 <atan+0x2c0>)
 810a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a30a:	f7f6 f857 	bl	81003bc <__adddf3>
 810a30e:	4632      	mov	r2, r6
 810a310:	463b      	mov	r3, r7
 810a312:	f7f6 fa09 	bl	8100728 <__aeabi_dmul>
 810a316:	a370      	add	r3, pc, #448	; (adr r3, 810a4d8 <atan+0x2c8>)
 810a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a31c:	f7f6 f84e 	bl	81003bc <__adddf3>
 810a320:	4632      	mov	r2, r6
 810a322:	463b      	mov	r3, r7
 810a324:	f7f6 fa00 	bl	8100728 <__aeabi_dmul>
 810a328:	a36d      	add	r3, pc, #436	; (adr r3, 810a4e0 <atan+0x2d0>)
 810a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a32e:	f7f6 f845 	bl	81003bc <__adddf3>
 810a332:	4632      	mov	r2, r6
 810a334:	463b      	mov	r3, r7
 810a336:	f7f6 f9f7 	bl	8100728 <__aeabi_dmul>
 810a33a:	a36b      	add	r3, pc, #428	; (adr r3, 810a4e8 <atan+0x2d8>)
 810a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a340:	f7f6 f83c 	bl	81003bc <__adddf3>
 810a344:	4632      	mov	r2, r6
 810a346:	463b      	mov	r3, r7
 810a348:	f7f6 f9ee 	bl	8100728 <__aeabi_dmul>
 810a34c:	a368      	add	r3, pc, #416	; (adr r3, 810a4f0 <atan+0x2e0>)
 810a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a352:	f7f6 f833 	bl	81003bc <__adddf3>
 810a356:	4642      	mov	r2, r8
 810a358:	464b      	mov	r3, r9
 810a35a:	f7f6 f9e5 	bl	8100728 <__aeabi_dmul>
 810a35e:	a366      	add	r3, pc, #408	; (adr r3, 810a4f8 <atan+0x2e8>)
 810a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a364:	4680      	mov	r8, r0
 810a366:	4689      	mov	r9, r1
 810a368:	4630      	mov	r0, r6
 810a36a:	4639      	mov	r1, r7
 810a36c:	f7f6 f9dc 	bl	8100728 <__aeabi_dmul>
 810a370:	a363      	add	r3, pc, #396	; (adr r3, 810a500 <atan+0x2f0>)
 810a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a376:	f7f6 f81f 	bl	81003b8 <__aeabi_dsub>
 810a37a:	4632      	mov	r2, r6
 810a37c:	463b      	mov	r3, r7
 810a37e:	f7f6 f9d3 	bl	8100728 <__aeabi_dmul>
 810a382:	a361      	add	r3, pc, #388	; (adr r3, 810a508 <atan+0x2f8>)
 810a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a388:	f7f6 f816 	bl	81003b8 <__aeabi_dsub>
 810a38c:	4632      	mov	r2, r6
 810a38e:	463b      	mov	r3, r7
 810a390:	f7f6 f9ca 	bl	8100728 <__aeabi_dmul>
 810a394:	a35e      	add	r3, pc, #376	; (adr r3, 810a510 <atan+0x300>)
 810a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a39a:	f7f6 f80d 	bl	81003b8 <__aeabi_dsub>
 810a39e:	4632      	mov	r2, r6
 810a3a0:	463b      	mov	r3, r7
 810a3a2:	f7f6 f9c1 	bl	8100728 <__aeabi_dmul>
 810a3a6:	a35c      	add	r3, pc, #368	; (adr r3, 810a518 <atan+0x308>)
 810a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3ac:	f7f6 f804 	bl	81003b8 <__aeabi_dsub>
 810a3b0:	4632      	mov	r2, r6
 810a3b2:	463b      	mov	r3, r7
 810a3b4:	f7f6 f9b8 	bl	8100728 <__aeabi_dmul>
 810a3b8:	4602      	mov	r2, r0
 810a3ba:	460b      	mov	r3, r1
 810a3bc:	4640      	mov	r0, r8
 810a3be:	4649      	mov	r1, r9
 810a3c0:	f7f5 fffc 	bl	81003bc <__adddf3>
 810a3c4:	4622      	mov	r2, r4
 810a3c6:	462b      	mov	r3, r5
 810a3c8:	f7f6 f9ae 	bl	8100728 <__aeabi_dmul>
 810a3cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 810a3d0:	4602      	mov	r2, r0
 810a3d2:	460b      	mov	r3, r1
 810a3d4:	d14b      	bne.n	810a46e <atan+0x25e>
 810a3d6:	4620      	mov	r0, r4
 810a3d8:	4629      	mov	r1, r5
 810a3da:	f7f5 ffed 	bl	81003b8 <__aeabi_dsub>
 810a3de:	e72c      	b.n	810a23a <atan+0x2a>
 810a3e0:	ee10 0a10 	vmov	r0, s0
 810a3e4:	4b53      	ldr	r3, [pc, #332]	; (810a534 <atan+0x324>)
 810a3e6:	2200      	movs	r2, #0
 810a3e8:	4629      	mov	r1, r5
 810a3ea:	f7f5 ffe5 	bl	81003b8 <__aeabi_dsub>
 810a3ee:	4b51      	ldr	r3, [pc, #324]	; (810a534 <atan+0x324>)
 810a3f0:	4606      	mov	r6, r0
 810a3f2:	460f      	mov	r7, r1
 810a3f4:	2200      	movs	r2, #0
 810a3f6:	4620      	mov	r0, r4
 810a3f8:	4629      	mov	r1, r5
 810a3fa:	f7f5 ffdf 	bl	81003bc <__adddf3>
 810a3fe:	4602      	mov	r2, r0
 810a400:	460b      	mov	r3, r1
 810a402:	4630      	mov	r0, r6
 810a404:	4639      	mov	r1, r7
 810a406:	f7f6 fab9 	bl	810097c <__aeabi_ddiv>
 810a40a:	f04f 0a01 	mov.w	sl, #1
 810a40e:	4604      	mov	r4, r0
 810a410:	460d      	mov	r5, r1
 810a412:	e764      	b.n	810a2de <atan+0xce>
 810a414:	4b49      	ldr	r3, [pc, #292]	; (810a53c <atan+0x32c>)
 810a416:	429e      	cmp	r6, r3
 810a418:	da1d      	bge.n	810a456 <atan+0x246>
 810a41a:	ee10 0a10 	vmov	r0, s0
 810a41e:	4b48      	ldr	r3, [pc, #288]	; (810a540 <atan+0x330>)
 810a420:	2200      	movs	r2, #0
 810a422:	4629      	mov	r1, r5
 810a424:	f7f5 ffc8 	bl	81003b8 <__aeabi_dsub>
 810a428:	4b45      	ldr	r3, [pc, #276]	; (810a540 <atan+0x330>)
 810a42a:	4606      	mov	r6, r0
 810a42c:	460f      	mov	r7, r1
 810a42e:	2200      	movs	r2, #0
 810a430:	4620      	mov	r0, r4
 810a432:	4629      	mov	r1, r5
 810a434:	f7f6 f978 	bl	8100728 <__aeabi_dmul>
 810a438:	4b3e      	ldr	r3, [pc, #248]	; (810a534 <atan+0x324>)
 810a43a:	2200      	movs	r2, #0
 810a43c:	f7f5 ffbe 	bl	81003bc <__adddf3>
 810a440:	4602      	mov	r2, r0
 810a442:	460b      	mov	r3, r1
 810a444:	4630      	mov	r0, r6
 810a446:	4639      	mov	r1, r7
 810a448:	f7f6 fa98 	bl	810097c <__aeabi_ddiv>
 810a44c:	f04f 0a02 	mov.w	sl, #2
 810a450:	4604      	mov	r4, r0
 810a452:	460d      	mov	r5, r1
 810a454:	e743      	b.n	810a2de <atan+0xce>
 810a456:	462b      	mov	r3, r5
 810a458:	ee10 2a10 	vmov	r2, s0
 810a45c:	4939      	ldr	r1, [pc, #228]	; (810a544 <atan+0x334>)
 810a45e:	2000      	movs	r0, #0
 810a460:	f7f6 fa8c 	bl	810097c <__aeabi_ddiv>
 810a464:	f04f 0a03 	mov.w	sl, #3
 810a468:	4604      	mov	r4, r0
 810a46a:	460d      	mov	r5, r1
 810a46c:	e737      	b.n	810a2de <atan+0xce>
 810a46e:	4b36      	ldr	r3, [pc, #216]	; (810a548 <atan+0x338>)
 810a470:	4e36      	ldr	r6, [pc, #216]	; (810a54c <atan+0x33c>)
 810a472:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 810a476:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 810a47a:	e9da 2300 	ldrd	r2, r3, [sl]
 810a47e:	f7f5 ff9b 	bl	81003b8 <__aeabi_dsub>
 810a482:	4622      	mov	r2, r4
 810a484:	462b      	mov	r3, r5
 810a486:	f7f5 ff97 	bl	81003b8 <__aeabi_dsub>
 810a48a:	4602      	mov	r2, r0
 810a48c:	460b      	mov	r3, r1
 810a48e:	e9d6 0100 	ldrd	r0, r1, [r6]
 810a492:	f7f5 ff91 	bl	81003b8 <__aeabi_dsub>
 810a496:	f1bb 0f00 	cmp.w	fp, #0
 810a49a:	4604      	mov	r4, r0
 810a49c:	460d      	mov	r5, r1
 810a49e:	f6bf aed6 	bge.w	810a24e <atan+0x3e>
 810a4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a4a6:	461d      	mov	r5, r3
 810a4a8:	e6d1      	b.n	810a24e <atan+0x3e>
 810a4aa:	a51d      	add	r5, pc, #116	; (adr r5, 810a520 <atan+0x310>)
 810a4ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 810a4b0:	e6cd      	b.n	810a24e <atan+0x3e>
 810a4b2:	bf00      	nop
 810a4b4:	f3af 8000 	nop.w
 810a4b8:	54442d18 	.word	0x54442d18
 810a4bc:	bff921fb 	.word	0xbff921fb
 810a4c0:	8800759c 	.word	0x8800759c
 810a4c4:	7e37e43c 	.word	0x7e37e43c
 810a4c8:	e322da11 	.word	0xe322da11
 810a4cc:	3f90ad3a 	.word	0x3f90ad3a
 810a4d0:	24760deb 	.word	0x24760deb
 810a4d4:	3fa97b4b 	.word	0x3fa97b4b
 810a4d8:	a0d03d51 	.word	0xa0d03d51
 810a4dc:	3fb10d66 	.word	0x3fb10d66
 810a4e0:	c54c206e 	.word	0xc54c206e
 810a4e4:	3fb745cd 	.word	0x3fb745cd
 810a4e8:	920083ff 	.word	0x920083ff
 810a4ec:	3fc24924 	.word	0x3fc24924
 810a4f0:	5555550d 	.word	0x5555550d
 810a4f4:	3fd55555 	.word	0x3fd55555
 810a4f8:	2c6a6c2f 	.word	0x2c6a6c2f
 810a4fc:	bfa2b444 	.word	0xbfa2b444
 810a500:	52defd9a 	.word	0x52defd9a
 810a504:	3fadde2d 	.word	0x3fadde2d
 810a508:	af749a6d 	.word	0xaf749a6d
 810a50c:	3fb3b0f2 	.word	0x3fb3b0f2
 810a510:	fe231671 	.word	0xfe231671
 810a514:	3fbc71c6 	.word	0x3fbc71c6
 810a518:	9998ebc4 	.word	0x9998ebc4
 810a51c:	3fc99999 	.word	0x3fc99999
 810a520:	54442d18 	.word	0x54442d18
 810a524:	3ff921fb 	.word	0x3ff921fb
 810a528:	440fffff 	.word	0x440fffff
 810a52c:	7ff00000 	.word	0x7ff00000
 810a530:	3fdbffff 	.word	0x3fdbffff
 810a534:	3ff00000 	.word	0x3ff00000
 810a538:	3ff2ffff 	.word	0x3ff2ffff
 810a53c:	40038000 	.word	0x40038000
 810a540:	3ff80000 	.word	0x3ff80000
 810a544:	bff00000 	.word	0xbff00000
 810a548:	0810f118 	.word	0x0810f118
 810a54c:	0810f0f8 	.word	0x0810f0f8

0810a550 <fabs>:
 810a550:	ec51 0b10 	vmov	r0, r1, d0
 810a554:	ee10 2a10 	vmov	r2, s0
 810a558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810a55c:	ec43 2b10 	vmov	d0, r2, r3
 810a560:	4770      	bx	lr
 810a562:	0000      	movs	r0, r0
 810a564:	0000      	movs	r0, r0
	...

0810a568 <nan>:
 810a568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810a570 <nan+0x8>
 810a56c:	4770      	bx	lr
 810a56e:	bf00      	nop
 810a570:	00000000 	.word	0x00000000
 810a574:	7ff80000 	.word	0x7ff80000

0810a578 <__assert_func>:
 810a578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a57a:	4614      	mov	r4, r2
 810a57c:	461a      	mov	r2, r3
 810a57e:	4b09      	ldr	r3, [pc, #36]	; (810a5a4 <__assert_func+0x2c>)
 810a580:	681b      	ldr	r3, [r3, #0]
 810a582:	4605      	mov	r5, r0
 810a584:	68d8      	ldr	r0, [r3, #12]
 810a586:	b14c      	cbz	r4, 810a59c <__assert_func+0x24>
 810a588:	4b07      	ldr	r3, [pc, #28]	; (810a5a8 <__assert_func+0x30>)
 810a58a:	9100      	str	r1, [sp, #0]
 810a58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a590:	4906      	ldr	r1, [pc, #24]	; (810a5ac <__assert_func+0x34>)
 810a592:	462b      	mov	r3, r5
 810a594:	f000 f814 	bl	810a5c0 <fiprintf>
 810a598:	f002 f8bc 	bl	810c714 <abort>
 810a59c:	4b04      	ldr	r3, [pc, #16]	; (810a5b0 <__assert_func+0x38>)
 810a59e:	461c      	mov	r4, r3
 810a5a0:	e7f3      	b.n	810a58a <__assert_func+0x12>
 810a5a2:	bf00      	nop
 810a5a4:	100000bc 	.word	0x100000bc
 810a5a8:	0810f138 	.word	0x0810f138
 810a5ac:	0810f145 	.word	0x0810f145
 810a5b0:	0810f173 	.word	0x0810f173

0810a5b4 <__errno>:
 810a5b4:	4b01      	ldr	r3, [pc, #4]	; (810a5bc <__errno+0x8>)
 810a5b6:	6818      	ldr	r0, [r3, #0]
 810a5b8:	4770      	bx	lr
 810a5ba:	bf00      	nop
 810a5bc:	100000bc 	.word	0x100000bc

0810a5c0 <fiprintf>:
 810a5c0:	b40e      	push	{r1, r2, r3}
 810a5c2:	b503      	push	{r0, r1, lr}
 810a5c4:	4601      	mov	r1, r0
 810a5c6:	ab03      	add	r3, sp, #12
 810a5c8:	4805      	ldr	r0, [pc, #20]	; (810a5e0 <fiprintf+0x20>)
 810a5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 810a5ce:	6800      	ldr	r0, [r0, #0]
 810a5d0:	9301      	str	r3, [sp, #4]
 810a5d2:	f000 f925 	bl	810a820 <_vfiprintf_r>
 810a5d6:	b002      	add	sp, #8
 810a5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 810a5dc:	b003      	add	sp, #12
 810a5de:	4770      	bx	lr
 810a5e0:	100000bc 	.word	0x100000bc

0810a5e4 <__libc_init_array>:
 810a5e4:	b570      	push	{r4, r5, r6, lr}
 810a5e6:	4d0d      	ldr	r5, [pc, #52]	; (810a61c <__libc_init_array+0x38>)
 810a5e8:	4c0d      	ldr	r4, [pc, #52]	; (810a620 <__libc_init_array+0x3c>)
 810a5ea:	1b64      	subs	r4, r4, r5
 810a5ec:	10a4      	asrs	r4, r4, #2
 810a5ee:	2600      	movs	r6, #0
 810a5f0:	42a6      	cmp	r6, r4
 810a5f2:	d109      	bne.n	810a608 <__libc_init_array+0x24>
 810a5f4:	4d0b      	ldr	r5, [pc, #44]	; (810a624 <__libc_init_array+0x40>)
 810a5f6:	4c0c      	ldr	r4, [pc, #48]	; (810a628 <__libc_init_array+0x44>)
 810a5f8:	f004 fc24 	bl	810ee44 <_init>
 810a5fc:	1b64      	subs	r4, r4, r5
 810a5fe:	10a4      	asrs	r4, r4, #2
 810a600:	2600      	movs	r6, #0
 810a602:	42a6      	cmp	r6, r4
 810a604:	d105      	bne.n	810a612 <__libc_init_array+0x2e>
 810a606:	bd70      	pop	{r4, r5, r6, pc}
 810a608:	f855 3b04 	ldr.w	r3, [r5], #4
 810a60c:	4798      	blx	r3
 810a60e:	3601      	adds	r6, #1
 810a610:	e7ee      	b.n	810a5f0 <__libc_init_array+0xc>
 810a612:	f855 3b04 	ldr.w	r3, [r5], #4
 810a616:	4798      	blx	r3
 810a618:	3601      	adds	r6, #1
 810a61a:	e7f2      	b.n	810a602 <__libc_init_array+0x1e>
 810a61c:	0810f5ec 	.word	0x0810f5ec
 810a620:	0810f5ec 	.word	0x0810f5ec
 810a624:	0810f5ec 	.word	0x0810f5ec
 810a628:	0810f5f4 	.word	0x0810f5f4

0810a62c <malloc>:
 810a62c:	4b02      	ldr	r3, [pc, #8]	; (810a638 <malloc+0xc>)
 810a62e:	4601      	mov	r1, r0
 810a630:	6818      	ldr	r0, [r3, #0]
 810a632:	f000 b871 	b.w	810a718 <_malloc_r>
 810a636:	bf00      	nop
 810a638:	100000bc 	.word	0x100000bc

0810a63c <free>:
 810a63c:	4b02      	ldr	r3, [pc, #8]	; (810a648 <free+0xc>)
 810a63e:	4601      	mov	r1, r0
 810a640:	6818      	ldr	r0, [r3, #0]
 810a642:	f000 b819 	b.w	810a678 <_free_r>
 810a646:	bf00      	nop
 810a648:	100000bc 	.word	0x100000bc

0810a64c <memcpy>:
 810a64c:	440a      	add	r2, r1
 810a64e:	4291      	cmp	r1, r2
 810a650:	f100 33ff 	add.w	r3, r0, #4294967295
 810a654:	d100      	bne.n	810a658 <memcpy+0xc>
 810a656:	4770      	bx	lr
 810a658:	b510      	push	{r4, lr}
 810a65a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a65e:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a662:	4291      	cmp	r1, r2
 810a664:	d1f9      	bne.n	810a65a <memcpy+0xe>
 810a666:	bd10      	pop	{r4, pc}

0810a668 <memset>:
 810a668:	4402      	add	r2, r0
 810a66a:	4603      	mov	r3, r0
 810a66c:	4293      	cmp	r3, r2
 810a66e:	d100      	bne.n	810a672 <memset+0xa>
 810a670:	4770      	bx	lr
 810a672:	f803 1b01 	strb.w	r1, [r3], #1
 810a676:	e7f9      	b.n	810a66c <memset+0x4>

0810a678 <_free_r>:
 810a678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a67a:	2900      	cmp	r1, #0
 810a67c:	d048      	beq.n	810a710 <_free_r+0x98>
 810a67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a682:	9001      	str	r0, [sp, #4]
 810a684:	2b00      	cmp	r3, #0
 810a686:	f1a1 0404 	sub.w	r4, r1, #4
 810a68a:	bfb8      	it	lt
 810a68c:	18e4      	addlt	r4, r4, r3
 810a68e:	f003 fc7d 	bl	810df8c <__malloc_lock>
 810a692:	4a20      	ldr	r2, [pc, #128]	; (810a714 <_free_r+0x9c>)
 810a694:	9801      	ldr	r0, [sp, #4]
 810a696:	6813      	ldr	r3, [r2, #0]
 810a698:	4615      	mov	r5, r2
 810a69a:	b933      	cbnz	r3, 810a6aa <_free_r+0x32>
 810a69c:	6063      	str	r3, [r4, #4]
 810a69e:	6014      	str	r4, [r2, #0]
 810a6a0:	b003      	add	sp, #12
 810a6a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810a6a6:	f003 bc77 	b.w	810df98 <__malloc_unlock>
 810a6aa:	42a3      	cmp	r3, r4
 810a6ac:	d90b      	bls.n	810a6c6 <_free_r+0x4e>
 810a6ae:	6821      	ldr	r1, [r4, #0]
 810a6b0:	1862      	adds	r2, r4, r1
 810a6b2:	4293      	cmp	r3, r2
 810a6b4:	bf04      	itt	eq
 810a6b6:	681a      	ldreq	r2, [r3, #0]
 810a6b8:	685b      	ldreq	r3, [r3, #4]
 810a6ba:	6063      	str	r3, [r4, #4]
 810a6bc:	bf04      	itt	eq
 810a6be:	1852      	addeq	r2, r2, r1
 810a6c0:	6022      	streq	r2, [r4, #0]
 810a6c2:	602c      	str	r4, [r5, #0]
 810a6c4:	e7ec      	b.n	810a6a0 <_free_r+0x28>
 810a6c6:	461a      	mov	r2, r3
 810a6c8:	685b      	ldr	r3, [r3, #4]
 810a6ca:	b10b      	cbz	r3, 810a6d0 <_free_r+0x58>
 810a6cc:	42a3      	cmp	r3, r4
 810a6ce:	d9fa      	bls.n	810a6c6 <_free_r+0x4e>
 810a6d0:	6811      	ldr	r1, [r2, #0]
 810a6d2:	1855      	adds	r5, r2, r1
 810a6d4:	42a5      	cmp	r5, r4
 810a6d6:	d10b      	bne.n	810a6f0 <_free_r+0x78>
 810a6d8:	6824      	ldr	r4, [r4, #0]
 810a6da:	4421      	add	r1, r4
 810a6dc:	1854      	adds	r4, r2, r1
 810a6de:	42a3      	cmp	r3, r4
 810a6e0:	6011      	str	r1, [r2, #0]
 810a6e2:	d1dd      	bne.n	810a6a0 <_free_r+0x28>
 810a6e4:	681c      	ldr	r4, [r3, #0]
 810a6e6:	685b      	ldr	r3, [r3, #4]
 810a6e8:	6053      	str	r3, [r2, #4]
 810a6ea:	4421      	add	r1, r4
 810a6ec:	6011      	str	r1, [r2, #0]
 810a6ee:	e7d7      	b.n	810a6a0 <_free_r+0x28>
 810a6f0:	d902      	bls.n	810a6f8 <_free_r+0x80>
 810a6f2:	230c      	movs	r3, #12
 810a6f4:	6003      	str	r3, [r0, #0]
 810a6f6:	e7d3      	b.n	810a6a0 <_free_r+0x28>
 810a6f8:	6825      	ldr	r5, [r4, #0]
 810a6fa:	1961      	adds	r1, r4, r5
 810a6fc:	428b      	cmp	r3, r1
 810a6fe:	bf04      	itt	eq
 810a700:	6819      	ldreq	r1, [r3, #0]
 810a702:	685b      	ldreq	r3, [r3, #4]
 810a704:	6063      	str	r3, [r4, #4]
 810a706:	bf04      	itt	eq
 810a708:	1949      	addeq	r1, r1, r5
 810a70a:	6021      	streq	r1, [r4, #0]
 810a70c:	6054      	str	r4, [r2, #4]
 810a70e:	e7c7      	b.n	810a6a0 <_free_r+0x28>
 810a710:	b003      	add	sp, #12
 810a712:	bd30      	pop	{r4, r5, pc}
 810a714:	100003c0 	.word	0x100003c0

0810a718 <_malloc_r>:
 810a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a71a:	1ccd      	adds	r5, r1, #3
 810a71c:	f025 0503 	bic.w	r5, r5, #3
 810a720:	3508      	adds	r5, #8
 810a722:	2d0c      	cmp	r5, #12
 810a724:	bf38      	it	cc
 810a726:	250c      	movcc	r5, #12
 810a728:	2d00      	cmp	r5, #0
 810a72a:	4606      	mov	r6, r0
 810a72c:	db01      	blt.n	810a732 <_malloc_r+0x1a>
 810a72e:	42a9      	cmp	r1, r5
 810a730:	d903      	bls.n	810a73a <_malloc_r+0x22>
 810a732:	230c      	movs	r3, #12
 810a734:	6033      	str	r3, [r6, #0]
 810a736:	2000      	movs	r0, #0
 810a738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a73a:	f003 fc27 	bl	810df8c <__malloc_lock>
 810a73e:	4921      	ldr	r1, [pc, #132]	; (810a7c4 <_malloc_r+0xac>)
 810a740:	680a      	ldr	r2, [r1, #0]
 810a742:	4614      	mov	r4, r2
 810a744:	b99c      	cbnz	r4, 810a76e <_malloc_r+0x56>
 810a746:	4f20      	ldr	r7, [pc, #128]	; (810a7c8 <_malloc_r+0xb0>)
 810a748:	683b      	ldr	r3, [r7, #0]
 810a74a:	b923      	cbnz	r3, 810a756 <_malloc_r+0x3e>
 810a74c:	4621      	mov	r1, r4
 810a74e:	4630      	mov	r0, r6
 810a750:	f001 f810 	bl	810b774 <_sbrk_r>
 810a754:	6038      	str	r0, [r7, #0]
 810a756:	4629      	mov	r1, r5
 810a758:	4630      	mov	r0, r6
 810a75a:	f001 f80b 	bl	810b774 <_sbrk_r>
 810a75e:	1c43      	adds	r3, r0, #1
 810a760:	d123      	bne.n	810a7aa <_malloc_r+0x92>
 810a762:	230c      	movs	r3, #12
 810a764:	6033      	str	r3, [r6, #0]
 810a766:	4630      	mov	r0, r6
 810a768:	f003 fc16 	bl	810df98 <__malloc_unlock>
 810a76c:	e7e3      	b.n	810a736 <_malloc_r+0x1e>
 810a76e:	6823      	ldr	r3, [r4, #0]
 810a770:	1b5b      	subs	r3, r3, r5
 810a772:	d417      	bmi.n	810a7a4 <_malloc_r+0x8c>
 810a774:	2b0b      	cmp	r3, #11
 810a776:	d903      	bls.n	810a780 <_malloc_r+0x68>
 810a778:	6023      	str	r3, [r4, #0]
 810a77a:	441c      	add	r4, r3
 810a77c:	6025      	str	r5, [r4, #0]
 810a77e:	e004      	b.n	810a78a <_malloc_r+0x72>
 810a780:	6863      	ldr	r3, [r4, #4]
 810a782:	42a2      	cmp	r2, r4
 810a784:	bf0c      	ite	eq
 810a786:	600b      	streq	r3, [r1, #0]
 810a788:	6053      	strne	r3, [r2, #4]
 810a78a:	4630      	mov	r0, r6
 810a78c:	f003 fc04 	bl	810df98 <__malloc_unlock>
 810a790:	f104 000b 	add.w	r0, r4, #11
 810a794:	1d23      	adds	r3, r4, #4
 810a796:	f020 0007 	bic.w	r0, r0, #7
 810a79a:	1ac2      	subs	r2, r0, r3
 810a79c:	d0cc      	beq.n	810a738 <_malloc_r+0x20>
 810a79e:	1a1b      	subs	r3, r3, r0
 810a7a0:	50a3      	str	r3, [r4, r2]
 810a7a2:	e7c9      	b.n	810a738 <_malloc_r+0x20>
 810a7a4:	4622      	mov	r2, r4
 810a7a6:	6864      	ldr	r4, [r4, #4]
 810a7a8:	e7cc      	b.n	810a744 <_malloc_r+0x2c>
 810a7aa:	1cc4      	adds	r4, r0, #3
 810a7ac:	f024 0403 	bic.w	r4, r4, #3
 810a7b0:	42a0      	cmp	r0, r4
 810a7b2:	d0e3      	beq.n	810a77c <_malloc_r+0x64>
 810a7b4:	1a21      	subs	r1, r4, r0
 810a7b6:	4630      	mov	r0, r6
 810a7b8:	f000 ffdc 	bl	810b774 <_sbrk_r>
 810a7bc:	3001      	adds	r0, #1
 810a7be:	d1dd      	bne.n	810a77c <_malloc_r+0x64>
 810a7c0:	e7cf      	b.n	810a762 <_malloc_r+0x4a>
 810a7c2:	bf00      	nop
 810a7c4:	100003c0 	.word	0x100003c0
 810a7c8:	100003c4 	.word	0x100003c4

0810a7cc <__sfputc_r>:
 810a7cc:	6893      	ldr	r3, [r2, #8]
 810a7ce:	3b01      	subs	r3, #1
 810a7d0:	2b00      	cmp	r3, #0
 810a7d2:	b410      	push	{r4}
 810a7d4:	6093      	str	r3, [r2, #8]
 810a7d6:	da08      	bge.n	810a7ea <__sfputc_r+0x1e>
 810a7d8:	6994      	ldr	r4, [r2, #24]
 810a7da:	42a3      	cmp	r3, r4
 810a7dc:	db01      	blt.n	810a7e2 <__sfputc_r+0x16>
 810a7de:	290a      	cmp	r1, #10
 810a7e0:	d103      	bne.n	810a7ea <__sfputc_r+0x1e>
 810a7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a7e6:	f001 bed5 	b.w	810c594 <__swbuf_r>
 810a7ea:	6813      	ldr	r3, [r2, #0]
 810a7ec:	1c58      	adds	r0, r3, #1
 810a7ee:	6010      	str	r0, [r2, #0]
 810a7f0:	7019      	strb	r1, [r3, #0]
 810a7f2:	4608      	mov	r0, r1
 810a7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a7f8:	4770      	bx	lr

0810a7fa <__sfputs_r>:
 810a7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a7fc:	4606      	mov	r6, r0
 810a7fe:	460f      	mov	r7, r1
 810a800:	4614      	mov	r4, r2
 810a802:	18d5      	adds	r5, r2, r3
 810a804:	42ac      	cmp	r4, r5
 810a806:	d101      	bne.n	810a80c <__sfputs_r+0x12>
 810a808:	2000      	movs	r0, #0
 810a80a:	e007      	b.n	810a81c <__sfputs_r+0x22>
 810a80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a810:	463a      	mov	r2, r7
 810a812:	4630      	mov	r0, r6
 810a814:	f7ff ffda 	bl	810a7cc <__sfputc_r>
 810a818:	1c43      	adds	r3, r0, #1
 810a81a:	d1f3      	bne.n	810a804 <__sfputs_r+0xa>
 810a81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a820 <_vfiprintf_r>:
 810a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a824:	460d      	mov	r5, r1
 810a826:	b09d      	sub	sp, #116	; 0x74
 810a828:	4614      	mov	r4, r2
 810a82a:	4698      	mov	r8, r3
 810a82c:	4606      	mov	r6, r0
 810a82e:	b118      	cbz	r0, 810a838 <_vfiprintf_r+0x18>
 810a830:	6983      	ldr	r3, [r0, #24]
 810a832:	b90b      	cbnz	r3, 810a838 <_vfiprintf_r+0x18>
 810a834:	f002 ff06 	bl	810d644 <__sinit>
 810a838:	4b89      	ldr	r3, [pc, #548]	; (810aa60 <_vfiprintf_r+0x240>)
 810a83a:	429d      	cmp	r5, r3
 810a83c:	d11b      	bne.n	810a876 <_vfiprintf_r+0x56>
 810a83e:	6875      	ldr	r5, [r6, #4]
 810a840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a842:	07d9      	lsls	r1, r3, #31
 810a844:	d405      	bmi.n	810a852 <_vfiprintf_r+0x32>
 810a846:	89ab      	ldrh	r3, [r5, #12]
 810a848:	059a      	lsls	r2, r3, #22
 810a84a:	d402      	bmi.n	810a852 <_vfiprintf_r+0x32>
 810a84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a84e:	f003 fb0a 	bl	810de66 <__retarget_lock_acquire_recursive>
 810a852:	89ab      	ldrh	r3, [r5, #12]
 810a854:	071b      	lsls	r3, r3, #28
 810a856:	d501      	bpl.n	810a85c <_vfiprintf_r+0x3c>
 810a858:	692b      	ldr	r3, [r5, #16]
 810a85a:	b9eb      	cbnz	r3, 810a898 <_vfiprintf_r+0x78>
 810a85c:	4629      	mov	r1, r5
 810a85e:	4630      	mov	r0, r6
 810a860:	f001 feea 	bl	810c638 <__swsetup_r>
 810a864:	b1c0      	cbz	r0, 810a898 <_vfiprintf_r+0x78>
 810a866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a868:	07dc      	lsls	r4, r3, #31
 810a86a:	d50e      	bpl.n	810a88a <_vfiprintf_r+0x6a>
 810a86c:	f04f 30ff 	mov.w	r0, #4294967295
 810a870:	b01d      	add	sp, #116	; 0x74
 810a872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a876:	4b7b      	ldr	r3, [pc, #492]	; (810aa64 <_vfiprintf_r+0x244>)
 810a878:	429d      	cmp	r5, r3
 810a87a:	d101      	bne.n	810a880 <_vfiprintf_r+0x60>
 810a87c:	68b5      	ldr	r5, [r6, #8]
 810a87e:	e7df      	b.n	810a840 <_vfiprintf_r+0x20>
 810a880:	4b79      	ldr	r3, [pc, #484]	; (810aa68 <_vfiprintf_r+0x248>)
 810a882:	429d      	cmp	r5, r3
 810a884:	bf08      	it	eq
 810a886:	68f5      	ldreq	r5, [r6, #12]
 810a888:	e7da      	b.n	810a840 <_vfiprintf_r+0x20>
 810a88a:	89ab      	ldrh	r3, [r5, #12]
 810a88c:	0598      	lsls	r0, r3, #22
 810a88e:	d4ed      	bmi.n	810a86c <_vfiprintf_r+0x4c>
 810a890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a892:	f003 fae9 	bl	810de68 <__retarget_lock_release_recursive>
 810a896:	e7e9      	b.n	810a86c <_vfiprintf_r+0x4c>
 810a898:	2300      	movs	r3, #0
 810a89a:	9309      	str	r3, [sp, #36]	; 0x24
 810a89c:	2320      	movs	r3, #32
 810a89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a8a2:	f8cd 800c 	str.w	r8, [sp, #12]
 810a8a6:	2330      	movs	r3, #48	; 0x30
 810a8a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810aa6c <_vfiprintf_r+0x24c>
 810a8ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a8b0:	f04f 0901 	mov.w	r9, #1
 810a8b4:	4623      	mov	r3, r4
 810a8b6:	469a      	mov	sl, r3
 810a8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a8bc:	b10a      	cbz	r2, 810a8c2 <_vfiprintf_r+0xa2>
 810a8be:	2a25      	cmp	r2, #37	; 0x25
 810a8c0:	d1f9      	bne.n	810a8b6 <_vfiprintf_r+0x96>
 810a8c2:	ebba 0b04 	subs.w	fp, sl, r4
 810a8c6:	d00b      	beq.n	810a8e0 <_vfiprintf_r+0xc0>
 810a8c8:	465b      	mov	r3, fp
 810a8ca:	4622      	mov	r2, r4
 810a8cc:	4629      	mov	r1, r5
 810a8ce:	4630      	mov	r0, r6
 810a8d0:	f7ff ff93 	bl	810a7fa <__sfputs_r>
 810a8d4:	3001      	adds	r0, #1
 810a8d6:	f000 80aa 	beq.w	810aa2e <_vfiprintf_r+0x20e>
 810a8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a8dc:	445a      	add	r2, fp
 810a8de:	9209      	str	r2, [sp, #36]	; 0x24
 810a8e0:	f89a 3000 	ldrb.w	r3, [sl]
 810a8e4:	2b00      	cmp	r3, #0
 810a8e6:	f000 80a2 	beq.w	810aa2e <_vfiprintf_r+0x20e>
 810a8ea:	2300      	movs	r3, #0
 810a8ec:	f04f 32ff 	mov.w	r2, #4294967295
 810a8f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a8f4:	f10a 0a01 	add.w	sl, sl, #1
 810a8f8:	9304      	str	r3, [sp, #16]
 810a8fa:	9307      	str	r3, [sp, #28]
 810a8fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a900:	931a      	str	r3, [sp, #104]	; 0x68
 810a902:	4654      	mov	r4, sl
 810a904:	2205      	movs	r2, #5
 810a906:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a90a:	4858      	ldr	r0, [pc, #352]	; (810aa6c <_vfiprintf_r+0x24c>)
 810a90c:	f7f5 fd00 	bl	8100310 <memchr>
 810a910:	9a04      	ldr	r2, [sp, #16]
 810a912:	b9d8      	cbnz	r0, 810a94c <_vfiprintf_r+0x12c>
 810a914:	06d1      	lsls	r1, r2, #27
 810a916:	bf44      	itt	mi
 810a918:	2320      	movmi	r3, #32
 810a91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a91e:	0713      	lsls	r3, r2, #28
 810a920:	bf44      	itt	mi
 810a922:	232b      	movmi	r3, #43	; 0x2b
 810a924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a928:	f89a 3000 	ldrb.w	r3, [sl]
 810a92c:	2b2a      	cmp	r3, #42	; 0x2a
 810a92e:	d015      	beq.n	810a95c <_vfiprintf_r+0x13c>
 810a930:	9a07      	ldr	r2, [sp, #28]
 810a932:	4654      	mov	r4, sl
 810a934:	2000      	movs	r0, #0
 810a936:	f04f 0c0a 	mov.w	ip, #10
 810a93a:	4621      	mov	r1, r4
 810a93c:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a940:	3b30      	subs	r3, #48	; 0x30
 810a942:	2b09      	cmp	r3, #9
 810a944:	d94e      	bls.n	810a9e4 <_vfiprintf_r+0x1c4>
 810a946:	b1b0      	cbz	r0, 810a976 <_vfiprintf_r+0x156>
 810a948:	9207      	str	r2, [sp, #28]
 810a94a:	e014      	b.n	810a976 <_vfiprintf_r+0x156>
 810a94c:	eba0 0308 	sub.w	r3, r0, r8
 810a950:	fa09 f303 	lsl.w	r3, r9, r3
 810a954:	4313      	orrs	r3, r2
 810a956:	9304      	str	r3, [sp, #16]
 810a958:	46a2      	mov	sl, r4
 810a95a:	e7d2      	b.n	810a902 <_vfiprintf_r+0xe2>
 810a95c:	9b03      	ldr	r3, [sp, #12]
 810a95e:	1d19      	adds	r1, r3, #4
 810a960:	681b      	ldr	r3, [r3, #0]
 810a962:	9103      	str	r1, [sp, #12]
 810a964:	2b00      	cmp	r3, #0
 810a966:	bfbb      	ittet	lt
 810a968:	425b      	neglt	r3, r3
 810a96a:	f042 0202 	orrlt.w	r2, r2, #2
 810a96e:	9307      	strge	r3, [sp, #28]
 810a970:	9307      	strlt	r3, [sp, #28]
 810a972:	bfb8      	it	lt
 810a974:	9204      	strlt	r2, [sp, #16]
 810a976:	7823      	ldrb	r3, [r4, #0]
 810a978:	2b2e      	cmp	r3, #46	; 0x2e
 810a97a:	d10c      	bne.n	810a996 <_vfiprintf_r+0x176>
 810a97c:	7863      	ldrb	r3, [r4, #1]
 810a97e:	2b2a      	cmp	r3, #42	; 0x2a
 810a980:	d135      	bne.n	810a9ee <_vfiprintf_r+0x1ce>
 810a982:	9b03      	ldr	r3, [sp, #12]
 810a984:	1d1a      	adds	r2, r3, #4
 810a986:	681b      	ldr	r3, [r3, #0]
 810a988:	9203      	str	r2, [sp, #12]
 810a98a:	2b00      	cmp	r3, #0
 810a98c:	bfb8      	it	lt
 810a98e:	f04f 33ff 	movlt.w	r3, #4294967295
 810a992:	3402      	adds	r4, #2
 810a994:	9305      	str	r3, [sp, #20]
 810a996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810aa7c <_vfiprintf_r+0x25c>
 810a99a:	7821      	ldrb	r1, [r4, #0]
 810a99c:	2203      	movs	r2, #3
 810a99e:	4650      	mov	r0, sl
 810a9a0:	f7f5 fcb6 	bl	8100310 <memchr>
 810a9a4:	b140      	cbz	r0, 810a9b8 <_vfiprintf_r+0x198>
 810a9a6:	2340      	movs	r3, #64	; 0x40
 810a9a8:	eba0 000a 	sub.w	r0, r0, sl
 810a9ac:	fa03 f000 	lsl.w	r0, r3, r0
 810a9b0:	9b04      	ldr	r3, [sp, #16]
 810a9b2:	4303      	orrs	r3, r0
 810a9b4:	3401      	adds	r4, #1
 810a9b6:	9304      	str	r3, [sp, #16]
 810a9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a9bc:	482c      	ldr	r0, [pc, #176]	; (810aa70 <_vfiprintf_r+0x250>)
 810a9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a9c2:	2206      	movs	r2, #6
 810a9c4:	f7f5 fca4 	bl	8100310 <memchr>
 810a9c8:	2800      	cmp	r0, #0
 810a9ca:	d03f      	beq.n	810aa4c <_vfiprintf_r+0x22c>
 810a9cc:	4b29      	ldr	r3, [pc, #164]	; (810aa74 <_vfiprintf_r+0x254>)
 810a9ce:	bb1b      	cbnz	r3, 810aa18 <_vfiprintf_r+0x1f8>
 810a9d0:	9b03      	ldr	r3, [sp, #12]
 810a9d2:	3307      	adds	r3, #7
 810a9d4:	f023 0307 	bic.w	r3, r3, #7
 810a9d8:	3308      	adds	r3, #8
 810a9da:	9303      	str	r3, [sp, #12]
 810a9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a9de:	443b      	add	r3, r7
 810a9e0:	9309      	str	r3, [sp, #36]	; 0x24
 810a9e2:	e767      	b.n	810a8b4 <_vfiprintf_r+0x94>
 810a9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 810a9e8:	460c      	mov	r4, r1
 810a9ea:	2001      	movs	r0, #1
 810a9ec:	e7a5      	b.n	810a93a <_vfiprintf_r+0x11a>
 810a9ee:	2300      	movs	r3, #0
 810a9f0:	3401      	adds	r4, #1
 810a9f2:	9305      	str	r3, [sp, #20]
 810a9f4:	4619      	mov	r1, r3
 810a9f6:	f04f 0c0a 	mov.w	ip, #10
 810a9fa:	4620      	mov	r0, r4
 810a9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 810aa00:	3a30      	subs	r2, #48	; 0x30
 810aa02:	2a09      	cmp	r2, #9
 810aa04:	d903      	bls.n	810aa0e <_vfiprintf_r+0x1ee>
 810aa06:	2b00      	cmp	r3, #0
 810aa08:	d0c5      	beq.n	810a996 <_vfiprintf_r+0x176>
 810aa0a:	9105      	str	r1, [sp, #20]
 810aa0c:	e7c3      	b.n	810a996 <_vfiprintf_r+0x176>
 810aa0e:	fb0c 2101 	mla	r1, ip, r1, r2
 810aa12:	4604      	mov	r4, r0
 810aa14:	2301      	movs	r3, #1
 810aa16:	e7f0      	b.n	810a9fa <_vfiprintf_r+0x1da>
 810aa18:	ab03      	add	r3, sp, #12
 810aa1a:	9300      	str	r3, [sp, #0]
 810aa1c:	462a      	mov	r2, r5
 810aa1e:	4b16      	ldr	r3, [pc, #88]	; (810aa78 <_vfiprintf_r+0x258>)
 810aa20:	a904      	add	r1, sp, #16
 810aa22:	4630      	mov	r0, r6
 810aa24:	f000 f8cc 	bl	810abc0 <_printf_float>
 810aa28:	4607      	mov	r7, r0
 810aa2a:	1c78      	adds	r0, r7, #1
 810aa2c:	d1d6      	bne.n	810a9dc <_vfiprintf_r+0x1bc>
 810aa2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810aa30:	07d9      	lsls	r1, r3, #31
 810aa32:	d405      	bmi.n	810aa40 <_vfiprintf_r+0x220>
 810aa34:	89ab      	ldrh	r3, [r5, #12]
 810aa36:	059a      	lsls	r2, r3, #22
 810aa38:	d402      	bmi.n	810aa40 <_vfiprintf_r+0x220>
 810aa3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810aa3c:	f003 fa14 	bl	810de68 <__retarget_lock_release_recursive>
 810aa40:	89ab      	ldrh	r3, [r5, #12]
 810aa42:	065b      	lsls	r3, r3, #25
 810aa44:	f53f af12 	bmi.w	810a86c <_vfiprintf_r+0x4c>
 810aa48:	9809      	ldr	r0, [sp, #36]	; 0x24
 810aa4a:	e711      	b.n	810a870 <_vfiprintf_r+0x50>
 810aa4c:	ab03      	add	r3, sp, #12
 810aa4e:	9300      	str	r3, [sp, #0]
 810aa50:	462a      	mov	r2, r5
 810aa52:	4b09      	ldr	r3, [pc, #36]	; (810aa78 <_vfiprintf_r+0x258>)
 810aa54:	a904      	add	r1, sp, #16
 810aa56:	4630      	mov	r0, r6
 810aa58:	f000 fb56 	bl	810b108 <_printf_i>
 810aa5c:	e7e4      	b.n	810aa28 <_vfiprintf_r+0x208>
 810aa5e:	bf00      	nop
 810aa60:	0810f3d0 	.word	0x0810f3d0
 810aa64:	0810f3f0 	.word	0x0810f3f0
 810aa68:	0810f3b0 	.word	0x0810f3b0
 810aa6c:	0810f178 	.word	0x0810f178
 810aa70:	0810f182 	.word	0x0810f182
 810aa74:	0810abc1 	.word	0x0810abc1
 810aa78:	0810a7fb 	.word	0x0810a7fb
 810aa7c:	0810f17e 	.word	0x0810f17e

0810aa80 <__cvt>:
 810aa80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810aa84:	ec55 4b10 	vmov	r4, r5, d0
 810aa88:	2d00      	cmp	r5, #0
 810aa8a:	460e      	mov	r6, r1
 810aa8c:	4619      	mov	r1, r3
 810aa8e:	462b      	mov	r3, r5
 810aa90:	bfbb      	ittet	lt
 810aa92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810aa96:	461d      	movlt	r5, r3
 810aa98:	2300      	movge	r3, #0
 810aa9a:	232d      	movlt	r3, #45	; 0x2d
 810aa9c:	700b      	strb	r3, [r1, #0]
 810aa9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810aaa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810aaa4:	4691      	mov	r9, r2
 810aaa6:	f023 0820 	bic.w	r8, r3, #32
 810aaaa:	bfbc      	itt	lt
 810aaac:	4622      	movlt	r2, r4
 810aaae:	4614      	movlt	r4, r2
 810aab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810aab4:	d005      	beq.n	810aac2 <__cvt+0x42>
 810aab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810aaba:	d100      	bne.n	810aabe <__cvt+0x3e>
 810aabc:	3601      	adds	r6, #1
 810aabe:	2102      	movs	r1, #2
 810aac0:	e000      	b.n	810aac4 <__cvt+0x44>
 810aac2:	2103      	movs	r1, #3
 810aac4:	ab03      	add	r3, sp, #12
 810aac6:	9301      	str	r3, [sp, #4]
 810aac8:	ab02      	add	r3, sp, #8
 810aaca:	9300      	str	r3, [sp, #0]
 810aacc:	ec45 4b10 	vmov	d0, r4, r5
 810aad0:	4653      	mov	r3, sl
 810aad2:	4632      	mov	r2, r6
 810aad4:	f001 feb0 	bl	810c838 <_dtoa_r>
 810aad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810aadc:	4607      	mov	r7, r0
 810aade:	d102      	bne.n	810aae6 <__cvt+0x66>
 810aae0:	f019 0f01 	tst.w	r9, #1
 810aae4:	d022      	beq.n	810ab2c <__cvt+0xac>
 810aae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810aaea:	eb07 0906 	add.w	r9, r7, r6
 810aaee:	d110      	bne.n	810ab12 <__cvt+0x92>
 810aaf0:	783b      	ldrb	r3, [r7, #0]
 810aaf2:	2b30      	cmp	r3, #48	; 0x30
 810aaf4:	d10a      	bne.n	810ab0c <__cvt+0x8c>
 810aaf6:	2200      	movs	r2, #0
 810aaf8:	2300      	movs	r3, #0
 810aafa:	4620      	mov	r0, r4
 810aafc:	4629      	mov	r1, r5
 810aafe:	f7f6 f87b 	bl	8100bf8 <__aeabi_dcmpeq>
 810ab02:	b918      	cbnz	r0, 810ab0c <__cvt+0x8c>
 810ab04:	f1c6 0601 	rsb	r6, r6, #1
 810ab08:	f8ca 6000 	str.w	r6, [sl]
 810ab0c:	f8da 3000 	ldr.w	r3, [sl]
 810ab10:	4499      	add	r9, r3
 810ab12:	2200      	movs	r2, #0
 810ab14:	2300      	movs	r3, #0
 810ab16:	4620      	mov	r0, r4
 810ab18:	4629      	mov	r1, r5
 810ab1a:	f7f6 f86d 	bl	8100bf8 <__aeabi_dcmpeq>
 810ab1e:	b108      	cbz	r0, 810ab24 <__cvt+0xa4>
 810ab20:	f8cd 900c 	str.w	r9, [sp, #12]
 810ab24:	2230      	movs	r2, #48	; 0x30
 810ab26:	9b03      	ldr	r3, [sp, #12]
 810ab28:	454b      	cmp	r3, r9
 810ab2a:	d307      	bcc.n	810ab3c <__cvt+0xbc>
 810ab2c:	9b03      	ldr	r3, [sp, #12]
 810ab2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810ab30:	1bdb      	subs	r3, r3, r7
 810ab32:	4638      	mov	r0, r7
 810ab34:	6013      	str	r3, [r2, #0]
 810ab36:	b004      	add	sp, #16
 810ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ab3c:	1c59      	adds	r1, r3, #1
 810ab3e:	9103      	str	r1, [sp, #12]
 810ab40:	701a      	strb	r2, [r3, #0]
 810ab42:	e7f0      	b.n	810ab26 <__cvt+0xa6>

0810ab44 <__exponent>:
 810ab44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810ab46:	4603      	mov	r3, r0
 810ab48:	2900      	cmp	r1, #0
 810ab4a:	bfb8      	it	lt
 810ab4c:	4249      	neglt	r1, r1
 810ab4e:	f803 2b02 	strb.w	r2, [r3], #2
 810ab52:	bfb4      	ite	lt
 810ab54:	222d      	movlt	r2, #45	; 0x2d
 810ab56:	222b      	movge	r2, #43	; 0x2b
 810ab58:	2909      	cmp	r1, #9
 810ab5a:	7042      	strb	r2, [r0, #1]
 810ab5c:	dd2a      	ble.n	810abb4 <__exponent+0x70>
 810ab5e:	f10d 0407 	add.w	r4, sp, #7
 810ab62:	46a4      	mov	ip, r4
 810ab64:	270a      	movs	r7, #10
 810ab66:	46a6      	mov	lr, r4
 810ab68:	460a      	mov	r2, r1
 810ab6a:	fb91 f6f7 	sdiv	r6, r1, r7
 810ab6e:	fb07 1516 	mls	r5, r7, r6, r1
 810ab72:	3530      	adds	r5, #48	; 0x30
 810ab74:	2a63      	cmp	r2, #99	; 0x63
 810ab76:	f104 34ff 	add.w	r4, r4, #4294967295
 810ab7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810ab7e:	4631      	mov	r1, r6
 810ab80:	dcf1      	bgt.n	810ab66 <__exponent+0x22>
 810ab82:	3130      	adds	r1, #48	; 0x30
 810ab84:	f1ae 0502 	sub.w	r5, lr, #2
 810ab88:	f804 1c01 	strb.w	r1, [r4, #-1]
 810ab8c:	1c44      	adds	r4, r0, #1
 810ab8e:	4629      	mov	r1, r5
 810ab90:	4561      	cmp	r1, ip
 810ab92:	d30a      	bcc.n	810abaa <__exponent+0x66>
 810ab94:	f10d 0209 	add.w	r2, sp, #9
 810ab98:	eba2 020e 	sub.w	r2, r2, lr
 810ab9c:	4565      	cmp	r5, ip
 810ab9e:	bf88      	it	hi
 810aba0:	2200      	movhi	r2, #0
 810aba2:	4413      	add	r3, r2
 810aba4:	1a18      	subs	r0, r3, r0
 810aba6:	b003      	add	sp, #12
 810aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810abaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 810abae:	f804 2f01 	strb.w	r2, [r4, #1]!
 810abb2:	e7ed      	b.n	810ab90 <__exponent+0x4c>
 810abb4:	2330      	movs	r3, #48	; 0x30
 810abb6:	3130      	adds	r1, #48	; 0x30
 810abb8:	7083      	strb	r3, [r0, #2]
 810abba:	70c1      	strb	r1, [r0, #3]
 810abbc:	1d03      	adds	r3, r0, #4
 810abbe:	e7f1      	b.n	810aba4 <__exponent+0x60>

0810abc0 <_printf_float>:
 810abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810abc4:	ed2d 8b02 	vpush	{d8}
 810abc8:	b08d      	sub	sp, #52	; 0x34
 810abca:	460c      	mov	r4, r1
 810abcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810abd0:	4616      	mov	r6, r2
 810abd2:	461f      	mov	r7, r3
 810abd4:	4605      	mov	r5, r0
 810abd6:	f003 f941 	bl	810de5c <_localeconv_r>
 810abda:	f8d0 a000 	ldr.w	sl, [r0]
 810abde:	4650      	mov	r0, sl
 810abe0:	f7f5 fb88 	bl	81002f4 <strlen>
 810abe4:	2300      	movs	r3, #0
 810abe6:	930a      	str	r3, [sp, #40]	; 0x28
 810abe8:	6823      	ldr	r3, [r4, #0]
 810abea:	9305      	str	r3, [sp, #20]
 810abec:	f8d8 3000 	ldr.w	r3, [r8]
 810abf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 810abf4:	3307      	adds	r3, #7
 810abf6:	f023 0307 	bic.w	r3, r3, #7
 810abfa:	f103 0208 	add.w	r2, r3, #8
 810abfe:	f8c8 2000 	str.w	r2, [r8]
 810ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810ac0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810ac0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810ac12:	9307      	str	r3, [sp, #28]
 810ac14:	f8cd 8018 	str.w	r8, [sp, #24]
 810ac18:	ee08 0a10 	vmov	s16, r0
 810ac1c:	4b9f      	ldr	r3, [pc, #636]	; (810ae9c <_printf_float+0x2dc>)
 810ac1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810ac22:	f04f 32ff 	mov.w	r2, #4294967295
 810ac26:	f7f6 f819 	bl	8100c5c <__aeabi_dcmpun>
 810ac2a:	bb88      	cbnz	r0, 810ac90 <_printf_float+0xd0>
 810ac2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810ac30:	4b9a      	ldr	r3, [pc, #616]	; (810ae9c <_printf_float+0x2dc>)
 810ac32:	f04f 32ff 	mov.w	r2, #4294967295
 810ac36:	f7f5 fff3 	bl	8100c20 <__aeabi_dcmple>
 810ac3a:	bb48      	cbnz	r0, 810ac90 <_printf_float+0xd0>
 810ac3c:	2200      	movs	r2, #0
 810ac3e:	2300      	movs	r3, #0
 810ac40:	4640      	mov	r0, r8
 810ac42:	4649      	mov	r1, r9
 810ac44:	f7f5 ffe2 	bl	8100c0c <__aeabi_dcmplt>
 810ac48:	b110      	cbz	r0, 810ac50 <_printf_float+0x90>
 810ac4a:	232d      	movs	r3, #45	; 0x2d
 810ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810ac50:	4b93      	ldr	r3, [pc, #588]	; (810aea0 <_printf_float+0x2e0>)
 810ac52:	4894      	ldr	r0, [pc, #592]	; (810aea4 <_printf_float+0x2e4>)
 810ac54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810ac58:	bf94      	ite	ls
 810ac5a:	4698      	movls	r8, r3
 810ac5c:	4680      	movhi	r8, r0
 810ac5e:	2303      	movs	r3, #3
 810ac60:	6123      	str	r3, [r4, #16]
 810ac62:	9b05      	ldr	r3, [sp, #20]
 810ac64:	f023 0204 	bic.w	r2, r3, #4
 810ac68:	6022      	str	r2, [r4, #0]
 810ac6a:	f04f 0900 	mov.w	r9, #0
 810ac6e:	9700      	str	r7, [sp, #0]
 810ac70:	4633      	mov	r3, r6
 810ac72:	aa0b      	add	r2, sp, #44	; 0x2c
 810ac74:	4621      	mov	r1, r4
 810ac76:	4628      	mov	r0, r5
 810ac78:	f000 f9d8 	bl	810b02c <_printf_common>
 810ac7c:	3001      	adds	r0, #1
 810ac7e:	f040 8090 	bne.w	810ada2 <_printf_float+0x1e2>
 810ac82:	f04f 30ff 	mov.w	r0, #4294967295
 810ac86:	b00d      	add	sp, #52	; 0x34
 810ac88:	ecbd 8b02 	vpop	{d8}
 810ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ac90:	4642      	mov	r2, r8
 810ac92:	464b      	mov	r3, r9
 810ac94:	4640      	mov	r0, r8
 810ac96:	4649      	mov	r1, r9
 810ac98:	f7f5 ffe0 	bl	8100c5c <__aeabi_dcmpun>
 810ac9c:	b140      	cbz	r0, 810acb0 <_printf_float+0xf0>
 810ac9e:	464b      	mov	r3, r9
 810aca0:	2b00      	cmp	r3, #0
 810aca2:	bfbc      	itt	lt
 810aca4:	232d      	movlt	r3, #45	; 0x2d
 810aca6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810acaa:	487f      	ldr	r0, [pc, #508]	; (810aea8 <_printf_float+0x2e8>)
 810acac:	4b7f      	ldr	r3, [pc, #508]	; (810aeac <_printf_float+0x2ec>)
 810acae:	e7d1      	b.n	810ac54 <_printf_float+0x94>
 810acb0:	6863      	ldr	r3, [r4, #4]
 810acb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810acb6:	9206      	str	r2, [sp, #24]
 810acb8:	1c5a      	adds	r2, r3, #1
 810acba:	d13f      	bne.n	810ad3c <_printf_float+0x17c>
 810acbc:	2306      	movs	r3, #6
 810acbe:	6063      	str	r3, [r4, #4]
 810acc0:	9b05      	ldr	r3, [sp, #20]
 810acc2:	6861      	ldr	r1, [r4, #4]
 810acc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810acc8:	2300      	movs	r3, #0
 810acca:	9303      	str	r3, [sp, #12]
 810accc:	ab0a      	add	r3, sp, #40	; 0x28
 810acce:	e9cd b301 	strd	fp, r3, [sp, #4]
 810acd2:	ab09      	add	r3, sp, #36	; 0x24
 810acd4:	ec49 8b10 	vmov	d0, r8, r9
 810acd8:	9300      	str	r3, [sp, #0]
 810acda:	6022      	str	r2, [r4, #0]
 810acdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810ace0:	4628      	mov	r0, r5
 810ace2:	f7ff fecd 	bl	810aa80 <__cvt>
 810ace6:	9b06      	ldr	r3, [sp, #24]
 810ace8:	9909      	ldr	r1, [sp, #36]	; 0x24
 810acea:	2b47      	cmp	r3, #71	; 0x47
 810acec:	4680      	mov	r8, r0
 810acee:	d108      	bne.n	810ad02 <_printf_float+0x142>
 810acf0:	1cc8      	adds	r0, r1, #3
 810acf2:	db02      	blt.n	810acfa <_printf_float+0x13a>
 810acf4:	6863      	ldr	r3, [r4, #4]
 810acf6:	4299      	cmp	r1, r3
 810acf8:	dd41      	ble.n	810ad7e <_printf_float+0x1be>
 810acfa:	f1ab 0b02 	sub.w	fp, fp, #2
 810acfe:	fa5f fb8b 	uxtb.w	fp, fp
 810ad02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810ad06:	d820      	bhi.n	810ad4a <_printf_float+0x18a>
 810ad08:	3901      	subs	r1, #1
 810ad0a:	465a      	mov	r2, fp
 810ad0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810ad10:	9109      	str	r1, [sp, #36]	; 0x24
 810ad12:	f7ff ff17 	bl	810ab44 <__exponent>
 810ad16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ad18:	1813      	adds	r3, r2, r0
 810ad1a:	2a01      	cmp	r2, #1
 810ad1c:	4681      	mov	r9, r0
 810ad1e:	6123      	str	r3, [r4, #16]
 810ad20:	dc02      	bgt.n	810ad28 <_printf_float+0x168>
 810ad22:	6822      	ldr	r2, [r4, #0]
 810ad24:	07d2      	lsls	r2, r2, #31
 810ad26:	d501      	bpl.n	810ad2c <_printf_float+0x16c>
 810ad28:	3301      	adds	r3, #1
 810ad2a:	6123      	str	r3, [r4, #16]
 810ad2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810ad30:	2b00      	cmp	r3, #0
 810ad32:	d09c      	beq.n	810ac6e <_printf_float+0xae>
 810ad34:	232d      	movs	r3, #45	; 0x2d
 810ad36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810ad3a:	e798      	b.n	810ac6e <_printf_float+0xae>
 810ad3c:	9a06      	ldr	r2, [sp, #24]
 810ad3e:	2a47      	cmp	r2, #71	; 0x47
 810ad40:	d1be      	bne.n	810acc0 <_printf_float+0x100>
 810ad42:	2b00      	cmp	r3, #0
 810ad44:	d1bc      	bne.n	810acc0 <_printf_float+0x100>
 810ad46:	2301      	movs	r3, #1
 810ad48:	e7b9      	b.n	810acbe <_printf_float+0xfe>
 810ad4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810ad4e:	d118      	bne.n	810ad82 <_printf_float+0x1c2>
 810ad50:	2900      	cmp	r1, #0
 810ad52:	6863      	ldr	r3, [r4, #4]
 810ad54:	dd0b      	ble.n	810ad6e <_printf_float+0x1ae>
 810ad56:	6121      	str	r1, [r4, #16]
 810ad58:	b913      	cbnz	r3, 810ad60 <_printf_float+0x1a0>
 810ad5a:	6822      	ldr	r2, [r4, #0]
 810ad5c:	07d0      	lsls	r0, r2, #31
 810ad5e:	d502      	bpl.n	810ad66 <_printf_float+0x1a6>
 810ad60:	3301      	adds	r3, #1
 810ad62:	440b      	add	r3, r1
 810ad64:	6123      	str	r3, [r4, #16]
 810ad66:	65a1      	str	r1, [r4, #88]	; 0x58
 810ad68:	f04f 0900 	mov.w	r9, #0
 810ad6c:	e7de      	b.n	810ad2c <_printf_float+0x16c>
 810ad6e:	b913      	cbnz	r3, 810ad76 <_printf_float+0x1b6>
 810ad70:	6822      	ldr	r2, [r4, #0]
 810ad72:	07d2      	lsls	r2, r2, #31
 810ad74:	d501      	bpl.n	810ad7a <_printf_float+0x1ba>
 810ad76:	3302      	adds	r3, #2
 810ad78:	e7f4      	b.n	810ad64 <_printf_float+0x1a4>
 810ad7a:	2301      	movs	r3, #1
 810ad7c:	e7f2      	b.n	810ad64 <_printf_float+0x1a4>
 810ad7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810ad82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ad84:	4299      	cmp	r1, r3
 810ad86:	db05      	blt.n	810ad94 <_printf_float+0x1d4>
 810ad88:	6823      	ldr	r3, [r4, #0]
 810ad8a:	6121      	str	r1, [r4, #16]
 810ad8c:	07d8      	lsls	r0, r3, #31
 810ad8e:	d5ea      	bpl.n	810ad66 <_printf_float+0x1a6>
 810ad90:	1c4b      	adds	r3, r1, #1
 810ad92:	e7e7      	b.n	810ad64 <_printf_float+0x1a4>
 810ad94:	2900      	cmp	r1, #0
 810ad96:	bfd4      	ite	le
 810ad98:	f1c1 0202 	rsble	r2, r1, #2
 810ad9c:	2201      	movgt	r2, #1
 810ad9e:	4413      	add	r3, r2
 810ada0:	e7e0      	b.n	810ad64 <_printf_float+0x1a4>
 810ada2:	6823      	ldr	r3, [r4, #0]
 810ada4:	055a      	lsls	r2, r3, #21
 810ada6:	d407      	bmi.n	810adb8 <_printf_float+0x1f8>
 810ada8:	6923      	ldr	r3, [r4, #16]
 810adaa:	4642      	mov	r2, r8
 810adac:	4631      	mov	r1, r6
 810adae:	4628      	mov	r0, r5
 810adb0:	47b8      	blx	r7
 810adb2:	3001      	adds	r0, #1
 810adb4:	d12c      	bne.n	810ae10 <_printf_float+0x250>
 810adb6:	e764      	b.n	810ac82 <_printf_float+0xc2>
 810adb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810adbc:	f240 80e0 	bls.w	810af80 <_printf_float+0x3c0>
 810adc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810adc4:	2200      	movs	r2, #0
 810adc6:	2300      	movs	r3, #0
 810adc8:	f7f5 ff16 	bl	8100bf8 <__aeabi_dcmpeq>
 810adcc:	2800      	cmp	r0, #0
 810adce:	d034      	beq.n	810ae3a <_printf_float+0x27a>
 810add0:	4a37      	ldr	r2, [pc, #220]	; (810aeb0 <_printf_float+0x2f0>)
 810add2:	2301      	movs	r3, #1
 810add4:	4631      	mov	r1, r6
 810add6:	4628      	mov	r0, r5
 810add8:	47b8      	blx	r7
 810adda:	3001      	adds	r0, #1
 810addc:	f43f af51 	beq.w	810ac82 <_printf_float+0xc2>
 810ade0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ade4:	429a      	cmp	r2, r3
 810ade6:	db02      	blt.n	810adee <_printf_float+0x22e>
 810ade8:	6823      	ldr	r3, [r4, #0]
 810adea:	07d8      	lsls	r0, r3, #31
 810adec:	d510      	bpl.n	810ae10 <_printf_float+0x250>
 810adee:	ee18 3a10 	vmov	r3, s16
 810adf2:	4652      	mov	r2, sl
 810adf4:	4631      	mov	r1, r6
 810adf6:	4628      	mov	r0, r5
 810adf8:	47b8      	blx	r7
 810adfa:	3001      	adds	r0, #1
 810adfc:	f43f af41 	beq.w	810ac82 <_printf_float+0xc2>
 810ae00:	f04f 0800 	mov.w	r8, #0
 810ae04:	f104 091a 	add.w	r9, r4, #26
 810ae08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ae0a:	3b01      	subs	r3, #1
 810ae0c:	4543      	cmp	r3, r8
 810ae0e:	dc09      	bgt.n	810ae24 <_printf_float+0x264>
 810ae10:	6823      	ldr	r3, [r4, #0]
 810ae12:	079b      	lsls	r3, r3, #30
 810ae14:	f100 8105 	bmi.w	810b022 <_printf_float+0x462>
 810ae18:	68e0      	ldr	r0, [r4, #12]
 810ae1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ae1c:	4298      	cmp	r0, r3
 810ae1e:	bfb8      	it	lt
 810ae20:	4618      	movlt	r0, r3
 810ae22:	e730      	b.n	810ac86 <_printf_float+0xc6>
 810ae24:	2301      	movs	r3, #1
 810ae26:	464a      	mov	r2, r9
 810ae28:	4631      	mov	r1, r6
 810ae2a:	4628      	mov	r0, r5
 810ae2c:	47b8      	blx	r7
 810ae2e:	3001      	adds	r0, #1
 810ae30:	f43f af27 	beq.w	810ac82 <_printf_float+0xc2>
 810ae34:	f108 0801 	add.w	r8, r8, #1
 810ae38:	e7e6      	b.n	810ae08 <_printf_float+0x248>
 810ae3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ae3c:	2b00      	cmp	r3, #0
 810ae3e:	dc39      	bgt.n	810aeb4 <_printf_float+0x2f4>
 810ae40:	4a1b      	ldr	r2, [pc, #108]	; (810aeb0 <_printf_float+0x2f0>)
 810ae42:	2301      	movs	r3, #1
 810ae44:	4631      	mov	r1, r6
 810ae46:	4628      	mov	r0, r5
 810ae48:	47b8      	blx	r7
 810ae4a:	3001      	adds	r0, #1
 810ae4c:	f43f af19 	beq.w	810ac82 <_printf_float+0xc2>
 810ae50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ae54:	4313      	orrs	r3, r2
 810ae56:	d102      	bne.n	810ae5e <_printf_float+0x29e>
 810ae58:	6823      	ldr	r3, [r4, #0]
 810ae5a:	07d9      	lsls	r1, r3, #31
 810ae5c:	d5d8      	bpl.n	810ae10 <_printf_float+0x250>
 810ae5e:	ee18 3a10 	vmov	r3, s16
 810ae62:	4652      	mov	r2, sl
 810ae64:	4631      	mov	r1, r6
 810ae66:	4628      	mov	r0, r5
 810ae68:	47b8      	blx	r7
 810ae6a:	3001      	adds	r0, #1
 810ae6c:	f43f af09 	beq.w	810ac82 <_printf_float+0xc2>
 810ae70:	f04f 0900 	mov.w	r9, #0
 810ae74:	f104 0a1a 	add.w	sl, r4, #26
 810ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ae7a:	425b      	negs	r3, r3
 810ae7c:	454b      	cmp	r3, r9
 810ae7e:	dc01      	bgt.n	810ae84 <_printf_float+0x2c4>
 810ae80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ae82:	e792      	b.n	810adaa <_printf_float+0x1ea>
 810ae84:	2301      	movs	r3, #1
 810ae86:	4652      	mov	r2, sl
 810ae88:	4631      	mov	r1, r6
 810ae8a:	4628      	mov	r0, r5
 810ae8c:	47b8      	blx	r7
 810ae8e:	3001      	adds	r0, #1
 810ae90:	f43f aef7 	beq.w	810ac82 <_printf_float+0xc2>
 810ae94:	f109 0901 	add.w	r9, r9, #1
 810ae98:	e7ee      	b.n	810ae78 <_printf_float+0x2b8>
 810ae9a:	bf00      	nop
 810ae9c:	7fefffff 	.word	0x7fefffff
 810aea0:	0810f189 	.word	0x0810f189
 810aea4:	0810f18d 	.word	0x0810f18d
 810aea8:	0810f195 	.word	0x0810f195
 810aeac:	0810f191 	.word	0x0810f191
 810aeb0:	0810f199 	.word	0x0810f199
 810aeb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810aeb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810aeb8:	429a      	cmp	r2, r3
 810aeba:	bfa8      	it	ge
 810aebc:	461a      	movge	r2, r3
 810aebe:	2a00      	cmp	r2, #0
 810aec0:	4691      	mov	r9, r2
 810aec2:	dc37      	bgt.n	810af34 <_printf_float+0x374>
 810aec4:	f04f 0b00 	mov.w	fp, #0
 810aec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810aecc:	f104 021a 	add.w	r2, r4, #26
 810aed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810aed2:	9305      	str	r3, [sp, #20]
 810aed4:	eba3 0309 	sub.w	r3, r3, r9
 810aed8:	455b      	cmp	r3, fp
 810aeda:	dc33      	bgt.n	810af44 <_printf_float+0x384>
 810aedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810aee0:	429a      	cmp	r2, r3
 810aee2:	db3b      	blt.n	810af5c <_printf_float+0x39c>
 810aee4:	6823      	ldr	r3, [r4, #0]
 810aee6:	07da      	lsls	r2, r3, #31
 810aee8:	d438      	bmi.n	810af5c <_printf_float+0x39c>
 810aeea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810aeec:	9b05      	ldr	r3, [sp, #20]
 810aeee:	9909      	ldr	r1, [sp, #36]	; 0x24
 810aef0:	1ad3      	subs	r3, r2, r3
 810aef2:	eba2 0901 	sub.w	r9, r2, r1
 810aef6:	4599      	cmp	r9, r3
 810aef8:	bfa8      	it	ge
 810aefa:	4699      	movge	r9, r3
 810aefc:	f1b9 0f00 	cmp.w	r9, #0
 810af00:	dc35      	bgt.n	810af6e <_printf_float+0x3ae>
 810af02:	f04f 0800 	mov.w	r8, #0
 810af06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810af0a:	f104 0a1a 	add.w	sl, r4, #26
 810af0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810af12:	1a9b      	subs	r3, r3, r2
 810af14:	eba3 0309 	sub.w	r3, r3, r9
 810af18:	4543      	cmp	r3, r8
 810af1a:	f77f af79 	ble.w	810ae10 <_printf_float+0x250>
 810af1e:	2301      	movs	r3, #1
 810af20:	4652      	mov	r2, sl
 810af22:	4631      	mov	r1, r6
 810af24:	4628      	mov	r0, r5
 810af26:	47b8      	blx	r7
 810af28:	3001      	adds	r0, #1
 810af2a:	f43f aeaa 	beq.w	810ac82 <_printf_float+0xc2>
 810af2e:	f108 0801 	add.w	r8, r8, #1
 810af32:	e7ec      	b.n	810af0e <_printf_float+0x34e>
 810af34:	4613      	mov	r3, r2
 810af36:	4631      	mov	r1, r6
 810af38:	4642      	mov	r2, r8
 810af3a:	4628      	mov	r0, r5
 810af3c:	47b8      	blx	r7
 810af3e:	3001      	adds	r0, #1
 810af40:	d1c0      	bne.n	810aec4 <_printf_float+0x304>
 810af42:	e69e      	b.n	810ac82 <_printf_float+0xc2>
 810af44:	2301      	movs	r3, #1
 810af46:	4631      	mov	r1, r6
 810af48:	4628      	mov	r0, r5
 810af4a:	9205      	str	r2, [sp, #20]
 810af4c:	47b8      	blx	r7
 810af4e:	3001      	adds	r0, #1
 810af50:	f43f ae97 	beq.w	810ac82 <_printf_float+0xc2>
 810af54:	9a05      	ldr	r2, [sp, #20]
 810af56:	f10b 0b01 	add.w	fp, fp, #1
 810af5a:	e7b9      	b.n	810aed0 <_printf_float+0x310>
 810af5c:	ee18 3a10 	vmov	r3, s16
 810af60:	4652      	mov	r2, sl
 810af62:	4631      	mov	r1, r6
 810af64:	4628      	mov	r0, r5
 810af66:	47b8      	blx	r7
 810af68:	3001      	adds	r0, #1
 810af6a:	d1be      	bne.n	810aeea <_printf_float+0x32a>
 810af6c:	e689      	b.n	810ac82 <_printf_float+0xc2>
 810af6e:	9a05      	ldr	r2, [sp, #20]
 810af70:	464b      	mov	r3, r9
 810af72:	4442      	add	r2, r8
 810af74:	4631      	mov	r1, r6
 810af76:	4628      	mov	r0, r5
 810af78:	47b8      	blx	r7
 810af7a:	3001      	adds	r0, #1
 810af7c:	d1c1      	bne.n	810af02 <_printf_float+0x342>
 810af7e:	e680      	b.n	810ac82 <_printf_float+0xc2>
 810af80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810af82:	2a01      	cmp	r2, #1
 810af84:	dc01      	bgt.n	810af8a <_printf_float+0x3ca>
 810af86:	07db      	lsls	r3, r3, #31
 810af88:	d538      	bpl.n	810affc <_printf_float+0x43c>
 810af8a:	2301      	movs	r3, #1
 810af8c:	4642      	mov	r2, r8
 810af8e:	4631      	mov	r1, r6
 810af90:	4628      	mov	r0, r5
 810af92:	47b8      	blx	r7
 810af94:	3001      	adds	r0, #1
 810af96:	f43f ae74 	beq.w	810ac82 <_printf_float+0xc2>
 810af9a:	ee18 3a10 	vmov	r3, s16
 810af9e:	4652      	mov	r2, sl
 810afa0:	4631      	mov	r1, r6
 810afa2:	4628      	mov	r0, r5
 810afa4:	47b8      	blx	r7
 810afa6:	3001      	adds	r0, #1
 810afa8:	f43f ae6b 	beq.w	810ac82 <_printf_float+0xc2>
 810afac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810afb0:	2200      	movs	r2, #0
 810afb2:	2300      	movs	r3, #0
 810afb4:	f7f5 fe20 	bl	8100bf8 <__aeabi_dcmpeq>
 810afb8:	b9d8      	cbnz	r0, 810aff2 <_printf_float+0x432>
 810afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810afbc:	f108 0201 	add.w	r2, r8, #1
 810afc0:	3b01      	subs	r3, #1
 810afc2:	4631      	mov	r1, r6
 810afc4:	4628      	mov	r0, r5
 810afc6:	47b8      	blx	r7
 810afc8:	3001      	adds	r0, #1
 810afca:	d10e      	bne.n	810afea <_printf_float+0x42a>
 810afcc:	e659      	b.n	810ac82 <_printf_float+0xc2>
 810afce:	2301      	movs	r3, #1
 810afd0:	4652      	mov	r2, sl
 810afd2:	4631      	mov	r1, r6
 810afd4:	4628      	mov	r0, r5
 810afd6:	47b8      	blx	r7
 810afd8:	3001      	adds	r0, #1
 810afda:	f43f ae52 	beq.w	810ac82 <_printf_float+0xc2>
 810afde:	f108 0801 	add.w	r8, r8, #1
 810afe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810afe4:	3b01      	subs	r3, #1
 810afe6:	4543      	cmp	r3, r8
 810afe8:	dcf1      	bgt.n	810afce <_printf_float+0x40e>
 810afea:	464b      	mov	r3, r9
 810afec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810aff0:	e6dc      	b.n	810adac <_printf_float+0x1ec>
 810aff2:	f04f 0800 	mov.w	r8, #0
 810aff6:	f104 0a1a 	add.w	sl, r4, #26
 810affa:	e7f2      	b.n	810afe2 <_printf_float+0x422>
 810affc:	2301      	movs	r3, #1
 810affe:	4642      	mov	r2, r8
 810b000:	e7df      	b.n	810afc2 <_printf_float+0x402>
 810b002:	2301      	movs	r3, #1
 810b004:	464a      	mov	r2, r9
 810b006:	4631      	mov	r1, r6
 810b008:	4628      	mov	r0, r5
 810b00a:	47b8      	blx	r7
 810b00c:	3001      	adds	r0, #1
 810b00e:	f43f ae38 	beq.w	810ac82 <_printf_float+0xc2>
 810b012:	f108 0801 	add.w	r8, r8, #1
 810b016:	68e3      	ldr	r3, [r4, #12]
 810b018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810b01a:	1a5b      	subs	r3, r3, r1
 810b01c:	4543      	cmp	r3, r8
 810b01e:	dcf0      	bgt.n	810b002 <_printf_float+0x442>
 810b020:	e6fa      	b.n	810ae18 <_printf_float+0x258>
 810b022:	f04f 0800 	mov.w	r8, #0
 810b026:	f104 0919 	add.w	r9, r4, #25
 810b02a:	e7f4      	b.n	810b016 <_printf_float+0x456>

0810b02c <_printf_common>:
 810b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b030:	4616      	mov	r6, r2
 810b032:	4699      	mov	r9, r3
 810b034:	688a      	ldr	r2, [r1, #8]
 810b036:	690b      	ldr	r3, [r1, #16]
 810b038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b03c:	4293      	cmp	r3, r2
 810b03e:	bfb8      	it	lt
 810b040:	4613      	movlt	r3, r2
 810b042:	6033      	str	r3, [r6, #0]
 810b044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810b048:	4607      	mov	r7, r0
 810b04a:	460c      	mov	r4, r1
 810b04c:	b10a      	cbz	r2, 810b052 <_printf_common+0x26>
 810b04e:	3301      	adds	r3, #1
 810b050:	6033      	str	r3, [r6, #0]
 810b052:	6823      	ldr	r3, [r4, #0]
 810b054:	0699      	lsls	r1, r3, #26
 810b056:	bf42      	ittt	mi
 810b058:	6833      	ldrmi	r3, [r6, #0]
 810b05a:	3302      	addmi	r3, #2
 810b05c:	6033      	strmi	r3, [r6, #0]
 810b05e:	6825      	ldr	r5, [r4, #0]
 810b060:	f015 0506 	ands.w	r5, r5, #6
 810b064:	d106      	bne.n	810b074 <_printf_common+0x48>
 810b066:	f104 0a19 	add.w	sl, r4, #25
 810b06a:	68e3      	ldr	r3, [r4, #12]
 810b06c:	6832      	ldr	r2, [r6, #0]
 810b06e:	1a9b      	subs	r3, r3, r2
 810b070:	42ab      	cmp	r3, r5
 810b072:	dc26      	bgt.n	810b0c2 <_printf_common+0x96>
 810b074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810b078:	1e13      	subs	r3, r2, #0
 810b07a:	6822      	ldr	r2, [r4, #0]
 810b07c:	bf18      	it	ne
 810b07e:	2301      	movne	r3, #1
 810b080:	0692      	lsls	r2, r2, #26
 810b082:	d42b      	bmi.n	810b0dc <_printf_common+0xb0>
 810b084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810b088:	4649      	mov	r1, r9
 810b08a:	4638      	mov	r0, r7
 810b08c:	47c0      	blx	r8
 810b08e:	3001      	adds	r0, #1
 810b090:	d01e      	beq.n	810b0d0 <_printf_common+0xa4>
 810b092:	6823      	ldr	r3, [r4, #0]
 810b094:	68e5      	ldr	r5, [r4, #12]
 810b096:	6832      	ldr	r2, [r6, #0]
 810b098:	f003 0306 	and.w	r3, r3, #6
 810b09c:	2b04      	cmp	r3, #4
 810b09e:	bf08      	it	eq
 810b0a0:	1aad      	subeq	r5, r5, r2
 810b0a2:	68a3      	ldr	r3, [r4, #8]
 810b0a4:	6922      	ldr	r2, [r4, #16]
 810b0a6:	bf0c      	ite	eq
 810b0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810b0ac:	2500      	movne	r5, #0
 810b0ae:	4293      	cmp	r3, r2
 810b0b0:	bfc4      	itt	gt
 810b0b2:	1a9b      	subgt	r3, r3, r2
 810b0b4:	18ed      	addgt	r5, r5, r3
 810b0b6:	2600      	movs	r6, #0
 810b0b8:	341a      	adds	r4, #26
 810b0ba:	42b5      	cmp	r5, r6
 810b0bc:	d11a      	bne.n	810b0f4 <_printf_common+0xc8>
 810b0be:	2000      	movs	r0, #0
 810b0c0:	e008      	b.n	810b0d4 <_printf_common+0xa8>
 810b0c2:	2301      	movs	r3, #1
 810b0c4:	4652      	mov	r2, sl
 810b0c6:	4649      	mov	r1, r9
 810b0c8:	4638      	mov	r0, r7
 810b0ca:	47c0      	blx	r8
 810b0cc:	3001      	adds	r0, #1
 810b0ce:	d103      	bne.n	810b0d8 <_printf_common+0xac>
 810b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 810b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b0d8:	3501      	adds	r5, #1
 810b0da:	e7c6      	b.n	810b06a <_printf_common+0x3e>
 810b0dc:	18e1      	adds	r1, r4, r3
 810b0de:	1c5a      	adds	r2, r3, #1
 810b0e0:	2030      	movs	r0, #48	; 0x30
 810b0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810b0e6:	4422      	add	r2, r4
 810b0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810b0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810b0f0:	3302      	adds	r3, #2
 810b0f2:	e7c7      	b.n	810b084 <_printf_common+0x58>
 810b0f4:	2301      	movs	r3, #1
 810b0f6:	4622      	mov	r2, r4
 810b0f8:	4649      	mov	r1, r9
 810b0fa:	4638      	mov	r0, r7
 810b0fc:	47c0      	blx	r8
 810b0fe:	3001      	adds	r0, #1
 810b100:	d0e6      	beq.n	810b0d0 <_printf_common+0xa4>
 810b102:	3601      	adds	r6, #1
 810b104:	e7d9      	b.n	810b0ba <_printf_common+0x8e>
	...

0810b108 <_printf_i>:
 810b108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b10c:	460c      	mov	r4, r1
 810b10e:	4691      	mov	r9, r2
 810b110:	7e27      	ldrb	r7, [r4, #24]
 810b112:	990c      	ldr	r1, [sp, #48]	; 0x30
 810b114:	2f78      	cmp	r7, #120	; 0x78
 810b116:	4680      	mov	r8, r0
 810b118:	469a      	mov	sl, r3
 810b11a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810b11e:	d807      	bhi.n	810b130 <_printf_i+0x28>
 810b120:	2f62      	cmp	r7, #98	; 0x62
 810b122:	d80a      	bhi.n	810b13a <_printf_i+0x32>
 810b124:	2f00      	cmp	r7, #0
 810b126:	f000 80d8 	beq.w	810b2da <_printf_i+0x1d2>
 810b12a:	2f58      	cmp	r7, #88	; 0x58
 810b12c:	f000 80a3 	beq.w	810b276 <_printf_i+0x16e>
 810b130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810b134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810b138:	e03a      	b.n	810b1b0 <_printf_i+0xa8>
 810b13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810b13e:	2b15      	cmp	r3, #21
 810b140:	d8f6      	bhi.n	810b130 <_printf_i+0x28>
 810b142:	a001      	add	r0, pc, #4	; (adr r0, 810b148 <_printf_i+0x40>)
 810b144:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 810b148:	0810b1a1 	.word	0x0810b1a1
 810b14c:	0810b1b5 	.word	0x0810b1b5
 810b150:	0810b131 	.word	0x0810b131
 810b154:	0810b131 	.word	0x0810b131
 810b158:	0810b131 	.word	0x0810b131
 810b15c:	0810b131 	.word	0x0810b131
 810b160:	0810b1b5 	.word	0x0810b1b5
 810b164:	0810b131 	.word	0x0810b131
 810b168:	0810b131 	.word	0x0810b131
 810b16c:	0810b131 	.word	0x0810b131
 810b170:	0810b131 	.word	0x0810b131
 810b174:	0810b2c1 	.word	0x0810b2c1
 810b178:	0810b1e5 	.word	0x0810b1e5
 810b17c:	0810b2a3 	.word	0x0810b2a3
 810b180:	0810b131 	.word	0x0810b131
 810b184:	0810b131 	.word	0x0810b131
 810b188:	0810b2e3 	.word	0x0810b2e3
 810b18c:	0810b131 	.word	0x0810b131
 810b190:	0810b1e5 	.word	0x0810b1e5
 810b194:	0810b131 	.word	0x0810b131
 810b198:	0810b131 	.word	0x0810b131
 810b19c:	0810b2ab 	.word	0x0810b2ab
 810b1a0:	680b      	ldr	r3, [r1, #0]
 810b1a2:	1d1a      	adds	r2, r3, #4
 810b1a4:	681b      	ldr	r3, [r3, #0]
 810b1a6:	600a      	str	r2, [r1, #0]
 810b1a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810b1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810b1b0:	2301      	movs	r3, #1
 810b1b2:	e0a3      	b.n	810b2fc <_printf_i+0x1f4>
 810b1b4:	6825      	ldr	r5, [r4, #0]
 810b1b6:	6808      	ldr	r0, [r1, #0]
 810b1b8:	062e      	lsls	r6, r5, #24
 810b1ba:	f100 0304 	add.w	r3, r0, #4
 810b1be:	d50a      	bpl.n	810b1d6 <_printf_i+0xce>
 810b1c0:	6805      	ldr	r5, [r0, #0]
 810b1c2:	600b      	str	r3, [r1, #0]
 810b1c4:	2d00      	cmp	r5, #0
 810b1c6:	da03      	bge.n	810b1d0 <_printf_i+0xc8>
 810b1c8:	232d      	movs	r3, #45	; 0x2d
 810b1ca:	426d      	negs	r5, r5
 810b1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b1d0:	485e      	ldr	r0, [pc, #376]	; (810b34c <_printf_i+0x244>)
 810b1d2:	230a      	movs	r3, #10
 810b1d4:	e019      	b.n	810b20a <_printf_i+0x102>
 810b1d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 810b1da:	6805      	ldr	r5, [r0, #0]
 810b1dc:	600b      	str	r3, [r1, #0]
 810b1de:	bf18      	it	ne
 810b1e0:	b22d      	sxthne	r5, r5
 810b1e2:	e7ef      	b.n	810b1c4 <_printf_i+0xbc>
 810b1e4:	680b      	ldr	r3, [r1, #0]
 810b1e6:	6825      	ldr	r5, [r4, #0]
 810b1e8:	1d18      	adds	r0, r3, #4
 810b1ea:	6008      	str	r0, [r1, #0]
 810b1ec:	0628      	lsls	r0, r5, #24
 810b1ee:	d501      	bpl.n	810b1f4 <_printf_i+0xec>
 810b1f0:	681d      	ldr	r5, [r3, #0]
 810b1f2:	e002      	b.n	810b1fa <_printf_i+0xf2>
 810b1f4:	0669      	lsls	r1, r5, #25
 810b1f6:	d5fb      	bpl.n	810b1f0 <_printf_i+0xe8>
 810b1f8:	881d      	ldrh	r5, [r3, #0]
 810b1fa:	4854      	ldr	r0, [pc, #336]	; (810b34c <_printf_i+0x244>)
 810b1fc:	2f6f      	cmp	r7, #111	; 0x6f
 810b1fe:	bf0c      	ite	eq
 810b200:	2308      	moveq	r3, #8
 810b202:	230a      	movne	r3, #10
 810b204:	2100      	movs	r1, #0
 810b206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810b20a:	6866      	ldr	r6, [r4, #4]
 810b20c:	60a6      	str	r6, [r4, #8]
 810b20e:	2e00      	cmp	r6, #0
 810b210:	bfa2      	ittt	ge
 810b212:	6821      	ldrge	r1, [r4, #0]
 810b214:	f021 0104 	bicge.w	r1, r1, #4
 810b218:	6021      	strge	r1, [r4, #0]
 810b21a:	b90d      	cbnz	r5, 810b220 <_printf_i+0x118>
 810b21c:	2e00      	cmp	r6, #0
 810b21e:	d04d      	beq.n	810b2bc <_printf_i+0x1b4>
 810b220:	4616      	mov	r6, r2
 810b222:	fbb5 f1f3 	udiv	r1, r5, r3
 810b226:	fb03 5711 	mls	r7, r3, r1, r5
 810b22a:	5dc7      	ldrb	r7, [r0, r7]
 810b22c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810b230:	462f      	mov	r7, r5
 810b232:	42bb      	cmp	r3, r7
 810b234:	460d      	mov	r5, r1
 810b236:	d9f4      	bls.n	810b222 <_printf_i+0x11a>
 810b238:	2b08      	cmp	r3, #8
 810b23a:	d10b      	bne.n	810b254 <_printf_i+0x14c>
 810b23c:	6823      	ldr	r3, [r4, #0]
 810b23e:	07df      	lsls	r7, r3, #31
 810b240:	d508      	bpl.n	810b254 <_printf_i+0x14c>
 810b242:	6923      	ldr	r3, [r4, #16]
 810b244:	6861      	ldr	r1, [r4, #4]
 810b246:	4299      	cmp	r1, r3
 810b248:	bfde      	ittt	le
 810b24a:	2330      	movle	r3, #48	; 0x30
 810b24c:	f806 3c01 	strble.w	r3, [r6, #-1]
 810b250:	f106 36ff 	addle.w	r6, r6, #4294967295
 810b254:	1b92      	subs	r2, r2, r6
 810b256:	6122      	str	r2, [r4, #16]
 810b258:	f8cd a000 	str.w	sl, [sp]
 810b25c:	464b      	mov	r3, r9
 810b25e:	aa03      	add	r2, sp, #12
 810b260:	4621      	mov	r1, r4
 810b262:	4640      	mov	r0, r8
 810b264:	f7ff fee2 	bl	810b02c <_printf_common>
 810b268:	3001      	adds	r0, #1
 810b26a:	d14c      	bne.n	810b306 <_printf_i+0x1fe>
 810b26c:	f04f 30ff 	mov.w	r0, #4294967295
 810b270:	b004      	add	sp, #16
 810b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b276:	4835      	ldr	r0, [pc, #212]	; (810b34c <_printf_i+0x244>)
 810b278:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810b27c:	6823      	ldr	r3, [r4, #0]
 810b27e:	680e      	ldr	r6, [r1, #0]
 810b280:	061f      	lsls	r7, r3, #24
 810b282:	f856 5b04 	ldr.w	r5, [r6], #4
 810b286:	600e      	str	r6, [r1, #0]
 810b288:	d514      	bpl.n	810b2b4 <_printf_i+0x1ac>
 810b28a:	07d9      	lsls	r1, r3, #31
 810b28c:	bf44      	itt	mi
 810b28e:	f043 0320 	orrmi.w	r3, r3, #32
 810b292:	6023      	strmi	r3, [r4, #0]
 810b294:	b91d      	cbnz	r5, 810b29e <_printf_i+0x196>
 810b296:	6823      	ldr	r3, [r4, #0]
 810b298:	f023 0320 	bic.w	r3, r3, #32
 810b29c:	6023      	str	r3, [r4, #0]
 810b29e:	2310      	movs	r3, #16
 810b2a0:	e7b0      	b.n	810b204 <_printf_i+0xfc>
 810b2a2:	6823      	ldr	r3, [r4, #0]
 810b2a4:	f043 0320 	orr.w	r3, r3, #32
 810b2a8:	6023      	str	r3, [r4, #0]
 810b2aa:	2378      	movs	r3, #120	; 0x78
 810b2ac:	4828      	ldr	r0, [pc, #160]	; (810b350 <_printf_i+0x248>)
 810b2ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810b2b2:	e7e3      	b.n	810b27c <_printf_i+0x174>
 810b2b4:	065e      	lsls	r6, r3, #25
 810b2b6:	bf48      	it	mi
 810b2b8:	b2ad      	uxthmi	r5, r5
 810b2ba:	e7e6      	b.n	810b28a <_printf_i+0x182>
 810b2bc:	4616      	mov	r6, r2
 810b2be:	e7bb      	b.n	810b238 <_printf_i+0x130>
 810b2c0:	680b      	ldr	r3, [r1, #0]
 810b2c2:	6826      	ldr	r6, [r4, #0]
 810b2c4:	6960      	ldr	r0, [r4, #20]
 810b2c6:	1d1d      	adds	r5, r3, #4
 810b2c8:	600d      	str	r5, [r1, #0]
 810b2ca:	0635      	lsls	r5, r6, #24
 810b2cc:	681b      	ldr	r3, [r3, #0]
 810b2ce:	d501      	bpl.n	810b2d4 <_printf_i+0x1cc>
 810b2d0:	6018      	str	r0, [r3, #0]
 810b2d2:	e002      	b.n	810b2da <_printf_i+0x1d2>
 810b2d4:	0671      	lsls	r1, r6, #25
 810b2d6:	d5fb      	bpl.n	810b2d0 <_printf_i+0x1c8>
 810b2d8:	8018      	strh	r0, [r3, #0]
 810b2da:	2300      	movs	r3, #0
 810b2dc:	6123      	str	r3, [r4, #16]
 810b2de:	4616      	mov	r6, r2
 810b2e0:	e7ba      	b.n	810b258 <_printf_i+0x150>
 810b2e2:	680b      	ldr	r3, [r1, #0]
 810b2e4:	1d1a      	adds	r2, r3, #4
 810b2e6:	600a      	str	r2, [r1, #0]
 810b2e8:	681e      	ldr	r6, [r3, #0]
 810b2ea:	6862      	ldr	r2, [r4, #4]
 810b2ec:	2100      	movs	r1, #0
 810b2ee:	4630      	mov	r0, r6
 810b2f0:	f7f5 f80e 	bl	8100310 <memchr>
 810b2f4:	b108      	cbz	r0, 810b2fa <_printf_i+0x1f2>
 810b2f6:	1b80      	subs	r0, r0, r6
 810b2f8:	6060      	str	r0, [r4, #4]
 810b2fa:	6863      	ldr	r3, [r4, #4]
 810b2fc:	6123      	str	r3, [r4, #16]
 810b2fe:	2300      	movs	r3, #0
 810b300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b304:	e7a8      	b.n	810b258 <_printf_i+0x150>
 810b306:	6923      	ldr	r3, [r4, #16]
 810b308:	4632      	mov	r2, r6
 810b30a:	4649      	mov	r1, r9
 810b30c:	4640      	mov	r0, r8
 810b30e:	47d0      	blx	sl
 810b310:	3001      	adds	r0, #1
 810b312:	d0ab      	beq.n	810b26c <_printf_i+0x164>
 810b314:	6823      	ldr	r3, [r4, #0]
 810b316:	079b      	lsls	r3, r3, #30
 810b318:	d413      	bmi.n	810b342 <_printf_i+0x23a>
 810b31a:	68e0      	ldr	r0, [r4, #12]
 810b31c:	9b03      	ldr	r3, [sp, #12]
 810b31e:	4298      	cmp	r0, r3
 810b320:	bfb8      	it	lt
 810b322:	4618      	movlt	r0, r3
 810b324:	e7a4      	b.n	810b270 <_printf_i+0x168>
 810b326:	2301      	movs	r3, #1
 810b328:	4632      	mov	r2, r6
 810b32a:	4649      	mov	r1, r9
 810b32c:	4640      	mov	r0, r8
 810b32e:	47d0      	blx	sl
 810b330:	3001      	adds	r0, #1
 810b332:	d09b      	beq.n	810b26c <_printf_i+0x164>
 810b334:	3501      	adds	r5, #1
 810b336:	68e3      	ldr	r3, [r4, #12]
 810b338:	9903      	ldr	r1, [sp, #12]
 810b33a:	1a5b      	subs	r3, r3, r1
 810b33c:	42ab      	cmp	r3, r5
 810b33e:	dcf2      	bgt.n	810b326 <_printf_i+0x21e>
 810b340:	e7eb      	b.n	810b31a <_printf_i+0x212>
 810b342:	2500      	movs	r5, #0
 810b344:	f104 0619 	add.w	r6, r4, #25
 810b348:	e7f5      	b.n	810b336 <_printf_i+0x22e>
 810b34a:	bf00      	nop
 810b34c:	0810f19b 	.word	0x0810f19b
 810b350:	0810f1ac 	.word	0x0810f1ac

0810b354 <_scanf_float>:
 810b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b358:	b087      	sub	sp, #28
 810b35a:	4617      	mov	r7, r2
 810b35c:	9303      	str	r3, [sp, #12]
 810b35e:	688b      	ldr	r3, [r1, #8]
 810b360:	1e5a      	subs	r2, r3, #1
 810b362:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b366:	bf83      	ittte	hi
 810b368:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b36c:	195b      	addhi	r3, r3, r5
 810b36e:	9302      	strhi	r3, [sp, #8]
 810b370:	2300      	movls	r3, #0
 810b372:	bf86      	itte	hi
 810b374:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b378:	608b      	strhi	r3, [r1, #8]
 810b37a:	9302      	strls	r3, [sp, #8]
 810b37c:	680b      	ldr	r3, [r1, #0]
 810b37e:	468b      	mov	fp, r1
 810b380:	2500      	movs	r5, #0
 810b382:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b386:	f84b 3b1c 	str.w	r3, [fp], #28
 810b38a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b38e:	4680      	mov	r8, r0
 810b390:	460c      	mov	r4, r1
 810b392:	465e      	mov	r6, fp
 810b394:	46aa      	mov	sl, r5
 810b396:	46a9      	mov	r9, r5
 810b398:	9501      	str	r5, [sp, #4]
 810b39a:	68a2      	ldr	r2, [r4, #8]
 810b39c:	b152      	cbz	r2, 810b3b4 <_scanf_float+0x60>
 810b39e:	683b      	ldr	r3, [r7, #0]
 810b3a0:	781b      	ldrb	r3, [r3, #0]
 810b3a2:	2b4e      	cmp	r3, #78	; 0x4e
 810b3a4:	d864      	bhi.n	810b470 <_scanf_float+0x11c>
 810b3a6:	2b40      	cmp	r3, #64	; 0x40
 810b3a8:	d83c      	bhi.n	810b424 <_scanf_float+0xd0>
 810b3aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b3ae:	b2c8      	uxtb	r0, r1
 810b3b0:	280e      	cmp	r0, #14
 810b3b2:	d93a      	bls.n	810b42a <_scanf_float+0xd6>
 810b3b4:	f1b9 0f00 	cmp.w	r9, #0
 810b3b8:	d003      	beq.n	810b3c2 <_scanf_float+0x6e>
 810b3ba:	6823      	ldr	r3, [r4, #0]
 810b3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b3c0:	6023      	str	r3, [r4, #0]
 810b3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b3c6:	f1ba 0f01 	cmp.w	sl, #1
 810b3ca:	f200 8113 	bhi.w	810b5f4 <_scanf_float+0x2a0>
 810b3ce:	455e      	cmp	r6, fp
 810b3d0:	f200 8105 	bhi.w	810b5de <_scanf_float+0x28a>
 810b3d4:	2501      	movs	r5, #1
 810b3d6:	4628      	mov	r0, r5
 810b3d8:	b007      	add	sp, #28
 810b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b3de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810b3e2:	2a0d      	cmp	r2, #13
 810b3e4:	d8e6      	bhi.n	810b3b4 <_scanf_float+0x60>
 810b3e6:	a101      	add	r1, pc, #4	; (adr r1, 810b3ec <_scanf_float+0x98>)
 810b3e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810b3ec:	0810b52b 	.word	0x0810b52b
 810b3f0:	0810b3b5 	.word	0x0810b3b5
 810b3f4:	0810b3b5 	.word	0x0810b3b5
 810b3f8:	0810b3b5 	.word	0x0810b3b5
 810b3fc:	0810b58b 	.word	0x0810b58b
 810b400:	0810b563 	.word	0x0810b563
 810b404:	0810b3b5 	.word	0x0810b3b5
 810b408:	0810b3b5 	.word	0x0810b3b5
 810b40c:	0810b539 	.word	0x0810b539
 810b410:	0810b3b5 	.word	0x0810b3b5
 810b414:	0810b3b5 	.word	0x0810b3b5
 810b418:	0810b3b5 	.word	0x0810b3b5
 810b41c:	0810b3b5 	.word	0x0810b3b5
 810b420:	0810b4f1 	.word	0x0810b4f1
 810b424:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810b428:	e7db      	b.n	810b3e2 <_scanf_float+0x8e>
 810b42a:	290e      	cmp	r1, #14
 810b42c:	d8c2      	bhi.n	810b3b4 <_scanf_float+0x60>
 810b42e:	a001      	add	r0, pc, #4	; (adr r0, 810b434 <_scanf_float+0xe0>)
 810b430:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810b434:	0810b4e3 	.word	0x0810b4e3
 810b438:	0810b3b5 	.word	0x0810b3b5
 810b43c:	0810b4e3 	.word	0x0810b4e3
 810b440:	0810b577 	.word	0x0810b577
 810b444:	0810b3b5 	.word	0x0810b3b5
 810b448:	0810b491 	.word	0x0810b491
 810b44c:	0810b4cd 	.word	0x0810b4cd
 810b450:	0810b4cd 	.word	0x0810b4cd
 810b454:	0810b4cd 	.word	0x0810b4cd
 810b458:	0810b4cd 	.word	0x0810b4cd
 810b45c:	0810b4cd 	.word	0x0810b4cd
 810b460:	0810b4cd 	.word	0x0810b4cd
 810b464:	0810b4cd 	.word	0x0810b4cd
 810b468:	0810b4cd 	.word	0x0810b4cd
 810b46c:	0810b4cd 	.word	0x0810b4cd
 810b470:	2b6e      	cmp	r3, #110	; 0x6e
 810b472:	d809      	bhi.n	810b488 <_scanf_float+0x134>
 810b474:	2b60      	cmp	r3, #96	; 0x60
 810b476:	d8b2      	bhi.n	810b3de <_scanf_float+0x8a>
 810b478:	2b54      	cmp	r3, #84	; 0x54
 810b47a:	d077      	beq.n	810b56c <_scanf_float+0x218>
 810b47c:	2b59      	cmp	r3, #89	; 0x59
 810b47e:	d199      	bne.n	810b3b4 <_scanf_float+0x60>
 810b480:	2d07      	cmp	r5, #7
 810b482:	d197      	bne.n	810b3b4 <_scanf_float+0x60>
 810b484:	2508      	movs	r5, #8
 810b486:	e029      	b.n	810b4dc <_scanf_float+0x188>
 810b488:	2b74      	cmp	r3, #116	; 0x74
 810b48a:	d06f      	beq.n	810b56c <_scanf_float+0x218>
 810b48c:	2b79      	cmp	r3, #121	; 0x79
 810b48e:	e7f6      	b.n	810b47e <_scanf_float+0x12a>
 810b490:	6821      	ldr	r1, [r4, #0]
 810b492:	05c8      	lsls	r0, r1, #23
 810b494:	d51a      	bpl.n	810b4cc <_scanf_float+0x178>
 810b496:	9b02      	ldr	r3, [sp, #8]
 810b498:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810b49c:	6021      	str	r1, [r4, #0]
 810b49e:	f109 0901 	add.w	r9, r9, #1
 810b4a2:	b11b      	cbz	r3, 810b4ac <_scanf_float+0x158>
 810b4a4:	3b01      	subs	r3, #1
 810b4a6:	3201      	adds	r2, #1
 810b4a8:	9302      	str	r3, [sp, #8]
 810b4aa:	60a2      	str	r2, [r4, #8]
 810b4ac:	68a3      	ldr	r3, [r4, #8]
 810b4ae:	3b01      	subs	r3, #1
 810b4b0:	60a3      	str	r3, [r4, #8]
 810b4b2:	6923      	ldr	r3, [r4, #16]
 810b4b4:	3301      	adds	r3, #1
 810b4b6:	6123      	str	r3, [r4, #16]
 810b4b8:	687b      	ldr	r3, [r7, #4]
 810b4ba:	3b01      	subs	r3, #1
 810b4bc:	2b00      	cmp	r3, #0
 810b4be:	607b      	str	r3, [r7, #4]
 810b4c0:	f340 8084 	ble.w	810b5cc <_scanf_float+0x278>
 810b4c4:	683b      	ldr	r3, [r7, #0]
 810b4c6:	3301      	adds	r3, #1
 810b4c8:	603b      	str	r3, [r7, #0]
 810b4ca:	e766      	b.n	810b39a <_scanf_float+0x46>
 810b4cc:	eb1a 0f05 	cmn.w	sl, r5
 810b4d0:	f47f af70 	bne.w	810b3b4 <_scanf_float+0x60>
 810b4d4:	6822      	ldr	r2, [r4, #0]
 810b4d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810b4da:	6022      	str	r2, [r4, #0]
 810b4dc:	f806 3b01 	strb.w	r3, [r6], #1
 810b4e0:	e7e4      	b.n	810b4ac <_scanf_float+0x158>
 810b4e2:	6822      	ldr	r2, [r4, #0]
 810b4e4:	0610      	lsls	r0, r2, #24
 810b4e6:	f57f af65 	bpl.w	810b3b4 <_scanf_float+0x60>
 810b4ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b4ee:	e7f4      	b.n	810b4da <_scanf_float+0x186>
 810b4f0:	f1ba 0f00 	cmp.w	sl, #0
 810b4f4:	d10e      	bne.n	810b514 <_scanf_float+0x1c0>
 810b4f6:	f1b9 0f00 	cmp.w	r9, #0
 810b4fa:	d10e      	bne.n	810b51a <_scanf_float+0x1c6>
 810b4fc:	6822      	ldr	r2, [r4, #0]
 810b4fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b502:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b506:	d108      	bne.n	810b51a <_scanf_float+0x1c6>
 810b508:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b50c:	6022      	str	r2, [r4, #0]
 810b50e:	f04f 0a01 	mov.w	sl, #1
 810b512:	e7e3      	b.n	810b4dc <_scanf_float+0x188>
 810b514:	f1ba 0f02 	cmp.w	sl, #2
 810b518:	d055      	beq.n	810b5c6 <_scanf_float+0x272>
 810b51a:	2d01      	cmp	r5, #1
 810b51c:	d002      	beq.n	810b524 <_scanf_float+0x1d0>
 810b51e:	2d04      	cmp	r5, #4
 810b520:	f47f af48 	bne.w	810b3b4 <_scanf_float+0x60>
 810b524:	3501      	adds	r5, #1
 810b526:	b2ed      	uxtb	r5, r5
 810b528:	e7d8      	b.n	810b4dc <_scanf_float+0x188>
 810b52a:	f1ba 0f01 	cmp.w	sl, #1
 810b52e:	f47f af41 	bne.w	810b3b4 <_scanf_float+0x60>
 810b532:	f04f 0a02 	mov.w	sl, #2
 810b536:	e7d1      	b.n	810b4dc <_scanf_float+0x188>
 810b538:	b97d      	cbnz	r5, 810b55a <_scanf_float+0x206>
 810b53a:	f1b9 0f00 	cmp.w	r9, #0
 810b53e:	f47f af3c 	bne.w	810b3ba <_scanf_float+0x66>
 810b542:	6822      	ldr	r2, [r4, #0]
 810b544:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b548:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b54c:	f47f af39 	bne.w	810b3c2 <_scanf_float+0x6e>
 810b550:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b554:	6022      	str	r2, [r4, #0]
 810b556:	2501      	movs	r5, #1
 810b558:	e7c0      	b.n	810b4dc <_scanf_float+0x188>
 810b55a:	2d03      	cmp	r5, #3
 810b55c:	d0e2      	beq.n	810b524 <_scanf_float+0x1d0>
 810b55e:	2d05      	cmp	r5, #5
 810b560:	e7de      	b.n	810b520 <_scanf_float+0x1cc>
 810b562:	2d02      	cmp	r5, #2
 810b564:	f47f af26 	bne.w	810b3b4 <_scanf_float+0x60>
 810b568:	2503      	movs	r5, #3
 810b56a:	e7b7      	b.n	810b4dc <_scanf_float+0x188>
 810b56c:	2d06      	cmp	r5, #6
 810b56e:	f47f af21 	bne.w	810b3b4 <_scanf_float+0x60>
 810b572:	2507      	movs	r5, #7
 810b574:	e7b2      	b.n	810b4dc <_scanf_float+0x188>
 810b576:	6822      	ldr	r2, [r4, #0]
 810b578:	0591      	lsls	r1, r2, #22
 810b57a:	f57f af1b 	bpl.w	810b3b4 <_scanf_float+0x60>
 810b57e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810b582:	6022      	str	r2, [r4, #0]
 810b584:	f8cd 9004 	str.w	r9, [sp, #4]
 810b588:	e7a8      	b.n	810b4dc <_scanf_float+0x188>
 810b58a:	6822      	ldr	r2, [r4, #0]
 810b58c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810b590:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810b594:	d006      	beq.n	810b5a4 <_scanf_float+0x250>
 810b596:	0550      	lsls	r0, r2, #21
 810b598:	f57f af0c 	bpl.w	810b3b4 <_scanf_float+0x60>
 810b59c:	f1b9 0f00 	cmp.w	r9, #0
 810b5a0:	f43f af0f 	beq.w	810b3c2 <_scanf_float+0x6e>
 810b5a4:	0591      	lsls	r1, r2, #22
 810b5a6:	bf58      	it	pl
 810b5a8:	9901      	ldrpl	r1, [sp, #4]
 810b5aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b5ae:	bf58      	it	pl
 810b5b0:	eba9 0101 	subpl.w	r1, r9, r1
 810b5b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810b5b8:	bf58      	it	pl
 810b5ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810b5be:	6022      	str	r2, [r4, #0]
 810b5c0:	f04f 0900 	mov.w	r9, #0
 810b5c4:	e78a      	b.n	810b4dc <_scanf_float+0x188>
 810b5c6:	f04f 0a03 	mov.w	sl, #3
 810b5ca:	e787      	b.n	810b4dc <_scanf_float+0x188>
 810b5cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810b5d0:	4639      	mov	r1, r7
 810b5d2:	4640      	mov	r0, r8
 810b5d4:	4798      	blx	r3
 810b5d6:	2800      	cmp	r0, #0
 810b5d8:	f43f aedf 	beq.w	810b39a <_scanf_float+0x46>
 810b5dc:	e6ea      	b.n	810b3b4 <_scanf_float+0x60>
 810b5de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b5e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b5e6:	463a      	mov	r2, r7
 810b5e8:	4640      	mov	r0, r8
 810b5ea:	4798      	blx	r3
 810b5ec:	6923      	ldr	r3, [r4, #16]
 810b5ee:	3b01      	subs	r3, #1
 810b5f0:	6123      	str	r3, [r4, #16]
 810b5f2:	e6ec      	b.n	810b3ce <_scanf_float+0x7a>
 810b5f4:	1e6b      	subs	r3, r5, #1
 810b5f6:	2b06      	cmp	r3, #6
 810b5f8:	d825      	bhi.n	810b646 <_scanf_float+0x2f2>
 810b5fa:	2d02      	cmp	r5, #2
 810b5fc:	d836      	bhi.n	810b66c <_scanf_float+0x318>
 810b5fe:	455e      	cmp	r6, fp
 810b600:	f67f aee8 	bls.w	810b3d4 <_scanf_float+0x80>
 810b604:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b608:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b60c:	463a      	mov	r2, r7
 810b60e:	4640      	mov	r0, r8
 810b610:	4798      	blx	r3
 810b612:	6923      	ldr	r3, [r4, #16]
 810b614:	3b01      	subs	r3, #1
 810b616:	6123      	str	r3, [r4, #16]
 810b618:	e7f1      	b.n	810b5fe <_scanf_float+0x2aa>
 810b61a:	9802      	ldr	r0, [sp, #8]
 810b61c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b620:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810b624:	9002      	str	r0, [sp, #8]
 810b626:	463a      	mov	r2, r7
 810b628:	4640      	mov	r0, r8
 810b62a:	4798      	blx	r3
 810b62c:	6923      	ldr	r3, [r4, #16]
 810b62e:	3b01      	subs	r3, #1
 810b630:	6123      	str	r3, [r4, #16]
 810b632:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b636:	fa5f fa8a 	uxtb.w	sl, sl
 810b63a:	f1ba 0f02 	cmp.w	sl, #2
 810b63e:	d1ec      	bne.n	810b61a <_scanf_float+0x2c6>
 810b640:	3d03      	subs	r5, #3
 810b642:	b2ed      	uxtb	r5, r5
 810b644:	1b76      	subs	r6, r6, r5
 810b646:	6823      	ldr	r3, [r4, #0]
 810b648:	05da      	lsls	r2, r3, #23
 810b64a:	d52f      	bpl.n	810b6ac <_scanf_float+0x358>
 810b64c:	055b      	lsls	r3, r3, #21
 810b64e:	d510      	bpl.n	810b672 <_scanf_float+0x31e>
 810b650:	455e      	cmp	r6, fp
 810b652:	f67f aebf 	bls.w	810b3d4 <_scanf_float+0x80>
 810b656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b65a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b65e:	463a      	mov	r2, r7
 810b660:	4640      	mov	r0, r8
 810b662:	4798      	blx	r3
 810b664:	6923      	ldr	r3, [r4, #16]
 810b666:	3b01      	subs	r3, #1
 810b668:	6123      	str	r3, [r4, #16]
 810b66a:	e7f1      	b.n	810b650 <_scanf_float+0x2fc>
 810b66c:	46aa      	mov	sl, r5
 810b66e:	9602      	str	r6, [sp, #8]
 810b670:	e7df      	b.n	810b632 <_scanf_float+0x2de>
 810b672:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810b676:	6923      	ldr	r3, [r4, #16]
 810b678:	2965      	cmp	r1, #101	; 0x65
 810b67a:	f103 33ff 	add.w	r3, r3, #4294967295
 810b67e:	f106 35ff 	add.w	r5, r6, #4294967295
 810b682:	6123      	str	r3, [r4, #16]
 810b684:	d00c      	beq.n	810b6a0 <_scanf_float+0x34c>
 810b686:	2945      	cmp	r1, #69	; 0x45
 810b688:	d00a      	beq.n	810b6a0 <_scanf_float+0x34c>
 810b68a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b68e:	463a      	mov	r2, r7
 810b690:	4640      	mov	r0, r8
 810b692:	4798      	blx	r3
 810b694:	6923      	ldr	r3, [r4, #16]
 810b696:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810b69a:	3b01      	subs	r3, #1
 810b69c:	1eb5      	subs	r5, r6, #2
 810b69e:	6123      	str	r3, [r4, #16]
 810b6a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b6a4:	463a      	mov	r2, r7
 810b6a6:	4640      	mov	r0, r8
 810b6a8:	4798      	blx	r3
 810b6aa:	462e      	mov	r6, r5
 810b6ac:	6825      	ldr	r5, [r4, #0]
 810b6ae:	f015 0510 	ands.w	r5, r5, #16
 810b6b2:	d158      	bne.n	810b766 <_scanf_float+0x412>
 810b6b4:	7035      	strb	r5, [r6, #0]
 810b6b6:	6823      	ldr	r3, [r4, #0]
 810b6b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810b6bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810b6c0:	d11c      	bne.n	810b6fc <_scanf_float+0x3a8>
 810b6c2:	9b01      	ldr	r3, [sp, #4]
 810b6c4:	454b      	cmp	r3, r9
 810b6c6:	eba3 0209 	sub.w	r2, r3, r9
 810b6ca:	d124      	bne.n	810b716 <_scanf_float+0x3c2>
 810b6cc:	2200      	movs	r2, #0
 810b6ce:	4659      	mov	r1, fp
 810b6d0:	4640      	mov	r0, r8
 810b6d2:	f000 fed3 	bl	810c47c <_strtod_r>
 810b6d6:	9b03      	ldr	r3, [sp, #12]
 810b6d8:	6821      	ldr	r1, [r4, #0]
 810b6da:	681b      	ldr	r3, [r3, #0]
 810b6dc:	f011 0f02 	tst.w	r1, #2
 810b6e0:	ec57 6b10 	vmov	r6, r7, d0
 810b6e4:	f103 0204 	add.w	r2, r3, #4
 810b6e8:	d020      	beq.n	810b72c <_scanf_float+0x3d8>
 810b6ea:	9903      	ldr	r1, [sp, #12]
 810b6ec:	600a      	str	r2, [r1, #0]
 810b6ee:	681b      	ldr	r3, [r3, #0]
 810b6f0:	e9c3 6700 	strd	r6, r7, [r3]
 810b6f4:	68e3      	ldr	r3, [r4, #12]
 810b6f6:	3301      	adds	r3, #1
 810b6f8:	60e3      	str	r3, [r4, #12]
 810b6fa:	e66c      	b.n	810b3d6 <_scanf_float+0x82>
 810b6fc:	9b04      	ldr	r3, [sp, #16]
 810b6fe:	2b00      	cmp	r3, #0
 810b700:	d0e4      	beq.n	810b6cc <_scanf_float+0x378>
 810b702:	9905      	ldr	r1, [sp, #20]
 810b704:	230a      	movs	r3, #10
 810b706:	462a      	mov	r2, r5
 810b708:	3101      	adds	r1, #1
 810b70a:	4640      	mov	r0, r8
 810b70c:	f000 ff40 	bl	810c590 <_strtol_r>
 810b710:	9b04      	ldr	r3, [sp, #16]
 810b712:	9e05      	ldr	r6, [sp, #20]
 810b714:	1ac2      	subs	r2, r0, r3
 810b716:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810b71a:	429e      	cmp	r6, r3
 810b71c:	bf28      	it	cs
 810b71e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810b722:	4912      	ldr	r1, [pc, #72]	; (810b76c <_scanf_float+0x418>)
 810b724:	4630      	mov	r0, r6
 810b726:	f000 f83b 	bl	810b7a0 <siprintf>
 810b72a:	e7cf      	b.n	810b6cc <_scanf_float+0x378>
 810b72c:	f011 0f04 	tst.w	r1, #4
 810b730:	9903      	ldr	r1, [sp, #12]
 810b732:	600a      	str	r2, [r1, #0]
 810b734:	d1db      	bne.n	810b6ee <_scanf_float+0x39a>
 810b736:	f8d3 8000 	ldr.w	r8, [r3]
 810b73a:	ee10 2a10 	vmov	r2, s0
 810b73e:	ee10 0a10 	vmov	r0, s0
 810b742:	463b      	mov	r3, r7
 810b744:	4639      	mov	r1, r7
 810b746:	f7f5 fa89 	bl	8100c5c <__aeabi_dcmpun>
 810b74a:	b128      	cbz	r0, 810b758 <_scanf_float+0x404>
 810b74c:	4808      	ldr	r0, [pc, #32]	; (810b770 <_scanf_float+0x41c>)
 810b74e:	f000 f821 	bl	810b794 <nanf>
 810b752:	ed88 0a00 	vstr	s0, [r8]
 810b756:	e7cd      	b.n	810b6f4 <_scanf_float+0x3a0>
 810b758:	4630      	mov	r0, r6
 810b75a:	4639      	mov	r1, r7
 810b75c:	f7f5 fadc 	bl	8100d18 <__aeabi_d2f>
 810b760:	f8c8 0000 	str.w	r0, [r8]
 810b764:	e7c6      	b.n	810b6f4 <_scanf_float+0x3a0>
 810b766:	2500      	movs	r5, #0
 810b768:	e635      	b.n	810b3d6 <_scanf_float+0x82>
 810b76a:	bf00      	nop
 810b76c:	0810f1bd 	.word	0x0810f1bd
 810b770:	0810f173 	.word	0x0810f173

0810b774 <_sbrk_r>:
 810b774:	b538      	push	{r3, r4, r5, lr}
 810b776:	4d06      	ldr	r5, [pc, #24]	; (810b790 <_sbrk_r+0x1c>)
 810b778:	2300      	movs	r3, #0
 810b77a:	4604      	mov	r4, r0
 810b77c:	4608      	mov	r0, r1
 810b77e:	602b      	str	r3, [r5, #0]
 810b780:	f7f6 f896 	bl	81018b0 <_sbrk>
 810b784:	1c43      	adds	r3, r0, #1
 810b786:	d102      	bne.n	810b78e <_sbrk_r+0x1a>
 810b788:	682b      	ldr	r3, [r5, #0]
 810b78a:	b103      	cbz	r3, 810b78e <_sbrk_r+0x1a>
 810b78c:	6023      	str	r3, [r4, #0]
 810b78e:	bd38      	pop	{r3, r4, r5, pc}
 810b790:	100006a8 	.word	0x100006a8

0810b794 <nanf>:
 810b794:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810b79c <nanf+0x8>
 810b798:	4770      	bx	lr
 810b79a:	bf00      	nop
 810b79c:	7fc00000 	.word	0x7fc00000

0810b7a0 <siprintf>:
 810b7a0:	b40e      	push	{r1, r2, r3}
 810b7a2:	b500      	push	{lr}
 810b7a4:	b09c      	sub	sp, #112	; 0x70
 810b7a6:	ab1d      	add	r3, sp, #116	; 0x74
 810b7a8:	9002      	str	r0, [sp, #8]
 810b7aa:	9006      	str	r0, [sp, #24]
 810b7ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810b7b0:	4809      	ldr	r0, [pc, #36]	; (810b7d8 <siprintf+0x38>)
 810b7b2:	9107      	str	r1, [sp, #28]
 810b7b4:	9104      	str	r1, [sp, #16]
 810b7b6:	4909      	ldr	r1, [pc, #36]	; (810b7dc <siprintf+0x3c>)
 810b7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 810b7bc:	9105      	str	r1, [sp, #20]
 810b7be:	6800      	ldr	r0, [r0, #0]
 810b7c0:	9301      	str	r3, [sp, #4]
 810b7c2:	a902      	add	r1, sp, #8
 810b7c4:	f003 f93a 	bl	810ea3c <_svfiprintf_r>
 810b7c8:	9b02      	ldr	r3, [sp, #8]
 810b7ca:	2200      	movs	r2, #0
 810b7cc:	701a      	strb	r2, [r3, #0]
 810b7ce:	b01c      	add	sp, #112	; 0x70
 810b7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 810b7d4:	b003      	add	sp, #12
 810b7d6:	4770      	bx	lr
 810b7d8:	100000bc 	.word	0x100000bc
 810b7dc:	ffff0208 	.word	0xffff0208

0810b7e0 <strncmp>:
 810b7e0:	b510      	push	{r4, lr}
 810b7e2:	b16a      	cbz	r2, 810b800 <strncmp+0x20>
 810b7e4:	3901      	subs	r1, #1
 810b7e6:	1884      	adds	r4, r0, r2
 810b7e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b7ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b7f0:	4293      	cmp	r3, r2
 810b7f2:	d103      	bne.n	810b7fc <strncmp+0x1c>
 810b7f4:	42a0      	cmp	r0, r4
 810b7f6:	d001      	beq.n	810b7fc <strncmp+0x1c>
 810b7f8:	2b00      	cmp	r3, #0
 810b7fa:	d1f5      	bne.n	810b7e8 <strncmp+0x8>
 810b7fc:	1a98      	subs	r0, r3, r2
 810b7fe:	bd10      	pop	{r4, pc}
 810b800:	4610      	mov	r0, r2
 810b802:	e7fc      	b.n	810b7fe <strncmp+0x1e>

0810b804 <strncpy>:
 810b804:	b510      	push	{r4, lr}
 810b806:	3901      	subs	r1, #1
 810b808:	4603      	mov	r3, r0
 810b80a:	b132      	cbz	r2, 810b81a <strncpy+0x16>
 810b80c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810b810:	f803 4b01 	strb.w	r4, [r3], #1
 810b814:	3a01      	subs	r2, #1
 810b816:	2c00      	cmp	r4, #0
 810b818:	d1f7      	bne.n	810b80a <strncpy+0x6>
 810b81a:	441a      	add	r2, r3
 810b81c:	2100      	movs	r1, #0
 810b81e:	4293      	cmp	r3, r2
 810b820:	d100      	bne.n	810b824 <strncpy+0x20>
 810b822:	bd10      	pop	{r4, pc}
 810b824:	f803 1b01 	strb.w	r1, [r3], #1
 810b828:	e7f9      	b.n	810b81e <strncpy+0x1a>

0810b82a <sulp>:
 810b82a:	b570      	push	{r4, r5, r6, lr}
 810b82c:	4604      	mov	r4, r0
 810b82e:	460d      	mov	r5, r1
 810b830:	ec45 4b10 	vmov	d0, r4, r5
 810b834:	4616      	mov	r6, r2
 810b836:	f002 ff21 	bl	810e67c <__ulp>
 810b83a:	ec51 0b10 	vmov	r0, r1, d0
 810b83e:	b17e      	cbz	r6, 810b860 <sulp+0x36>
 810b840:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810b844:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810b848:	2b00      	cmp	r3, #0
 810b84a:	dd09      	ble.n	810b860 <sulp+0x36>
 810b84c:	051b      	lsls	r3, r3, #20
 810b84e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810b852:	2400      	movs	r4, #0
 810b854:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810b858:	4622      	mov	r2, r4
 810b85a:	462b      	mov	r3, r5
 810b85c:	f7f4 ff64 	bl	8100728 <__aeabi_dmul>
 810b860:	bd70      	pop	{r4, r5, r6, pc}
 810b862:	0000      	movs	r0, r0
 810b864:	0000      	movs	r0, r0
	...

0810b868 <_strtod_l>:
 810b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b86c:	b0a3      	sub	sp, #140	; 0x8c
 810b86e:	461f      	mov	r7, r3
 810b870:	2300      	movs	r3, #0
 810b872:	931e      	str	r3, [sp, #120]	; 0x78
 810b874:	4ba4      	ldr	r3, [pc, #656]	; (810bb08 <_strtod_l+0x2a0>)
 810b876:	9219      	str	r2, [sp, #100]	; 0x64
 810b878:	681b      	ldr	r3, [r3, #0]
 810b87a:	9307      	str	r3, [sp, #28]
 810b87c:	4604      	mov	r4, r0
 810b87e:	4618      	mov	r0, r3
 810b880:	4688      	mov	r8, r1
 810b882:	f7f4 fd37 	bl	81002f4 <strlen>
 810b886:	f04f 0a00 	mov.w	sl, #0
 810b88a:	4605      	mov	r5, r0
 810b88c:	f04f 0b00 	mov.w	fp, #0
 810b890:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810b894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b896:	781a      	ldrb	r2, [r3, #0]
 810b898:	2a2b      	cmp	r2, #43	; 0x2b
 810b89a:	d04c      	beq.n	810b936 <_strtod_l+0xce>
 810b89c:	d839      	bhi.n	810b912 <_strtod_l+0xaa>
 810b89e:	2a0d      	cmp	r2, #13
 810b8a0:	d832      	bhi.n	810b908 <_strtod_l+0xa0>
 810b8a2:	2a08      	cmp	r2, #8
 810b8a4:	d832      	bhi.n	810b90c <_strtod_l+0xa4>
 810b8a6:	2a00      	cmp	r2, #0
 810b8a8:	d03c      	beq.n	810b924 <_strtod_l+0xbc>
 810b8aa:	2300      	movs	r3, #0
 810b8ac:	930e      	str	r3, [sp, #56]	; 0x38
 810b8ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 810b8b0:	7833      	ldrb	r3, [r6, #0]
 810b8b2:	2b30      	cmp	r3, #48	; 0x30
 810b8b4:	f040 80b4 	bne.w	810ba20 <_strtod_l+0x1b8>
 810b8b8:	7873      	ldrb	r3, [r6, #1]
 810b8ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810b8be:	2b58      	cmp	r3, #88	; 0x58
 810b8c0:	d16c      	bne.n	810b99c <_strtod_l+0x134>
 810b8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b8c4:	9301      	str	r3, [sp, #4]
 810b8c6:	ab1e      	add	r3, sp, #120	; 0x78
 810b8c8:	9702      	str	r7, [sp, #8]
 810b8ca:	9300      	str	r3, [sp, #0]
 810b8cc:	4a8f      	ldr	r2, [pc, #572]	; (810bb0c <_strtod_l+0x2a4>)
 810b8ce:	ab1f      	add	r3, sp, #124	; 0x7c
 810b8d0:	a91d      	add	r1, sp, #116	; 0x74
 810b8d2:	4620      	mov	r0, r4
 810b8d4:	f001 ffba 	bl	810d84c <__gethex>
 810b8d8:	f010 0707 	ands.w	r7, r0, #7
 810b8dc:	4605      	mov	r5, r0
 810b8de:	d005      	beq.n	810b8ec <_strtod_l+0x84>
 810b8e0:	2f06      	cmp	r7, #6
 810b8e2:	d12a      	bne.n	810b93a <_strtod_l+0xd2>
 810b8e4:	3601      	adds	r6, #1
 810b8e6:	2300      	movs	r3, #0
 810b8e8:	961d      	str	r6, [sp, #116]	; 0x74
 810b8ea:	930e      	str	r3, [sp, #56]	; 0x38
 810b8ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810b8ee:	2b00      	cmp	r3, #0
 810b8f0:	f040 8596 	bne.w	810c420 <_strtod_l+0xbb8>
 810b8f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b8f6:	b1db      	cbz	r3, 810b930 <_strtod_l+0xc8>
 810b8f8:	4652      	mov	r2, sl
 810b8fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b8fe:	ec43 2b10 	vmov	d0, r2, r3
 810b902:	b023      	add	sp, #140	; 0x8c
 810b904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b908:	2a20      	cmp	r2, #32
 810b90a:	d1ce      	bne.n	810b8aa <_strtod_l+0x42>
 810b90c:	3301      	adds	r3, #1
 810b90e:	931d      	str	r3, [sp, #116]	; 0x74
 810b910:	e7c0      	b.n	810b894 <_strtod_l+0x2c>
 810b912:	2a2d      	cmp	r2, #45	; 0x2d
 810b914:	d1c9      	bne.n	810b8aa <_strtod_l+0x42>
 810b916:	2201      	movs	r2, #1
 810b918:	920e      	str	r2, [sp, #56]	; 0x38
 810b91a:	1c5a      	adds	r2, r3, #1
 810b91c:	921d      	str	r2, [sp, #116]	; 0x74
 810b91e:	785b      	ldrb	r3, [r3, #1]
 810b920:	2b00      	cmp	r3, #0
 810b922:	d1c4      	bne.n	810b8ae <_strtod_l+0x46>
 810b924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810b926:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810b92a:	2b00      	cmp	r3, #0
 810b92c:	f040 8576 	bne.w	810c41c <_strtod_l+0xbb4>
 810b930:	4652      	mov	r2, sl
 810b932:	465b      	mov	r3, fp
 810b934:	e7e3      	b.n	810b8fe <_strtod_l+0x96>
 810b936:	2200      	movs	r2, #0
 810b938:	e7ee      	b.n	810b918 <_strtod_l+0xb0>
 810b93a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810b93c:	b13a      	cbz	r2, 810b94e <_strtod_l+0xe6>
 810b93e:	2135      	movs	r1, #53	; 0x35
 810b940:	a820      	add	r0, sp, #128	; 0x80
 810b942:	f002 ffa6 	bl	810e892 <__copybits>
 810b946:	991e      	ldr	r1, [sp, #120]	; 0x78
 810b948:	4620      	mov	r0, r4
 810b94a:	f002 fb6b 	bl	810e024 <_Bfree>
 810b94e:	3f01      	subs	r7, #1
 810b950:	2f05      	cmp	r7, #5
 810b952:	d807      	bhi.n	810b964 <_strtod_l+0xfc>
 810b954:	e8df f007 	tbb	[pc, r7]
 810b958:	1d180b0e 	.word	0x1d180b0e
 810b95c:	030e      	.short	0x030e
 810b95e:	f04f 0b00 	mov.w	fp, #0
 810b962:	46da      	mov	sl, fp
 810b964:	0728      	lsls	r0, r5, #28
 810b966:	d5c1      	bpl.n	810b8ec <_strtod_l+0x84>
 810b968:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810b96c:	e7be      	b.n	810b8ec <_strtod_l+0x84>
 810b96e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 810b972:	e7f7      	b.n	810b964 <_strtod_l+0xfc>
 810b974:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 810b978:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 810b97a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810b97e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810b982:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810b986:	e7ed      	b.n	810b964 <_strtod_l+0xfc>
 810b988:	f8df b184 	ldr.w	fp, [pc, #388]	; 810bb10 <_strtod_l+0x2a8>
 810b98c:	f04f 0a00 	mov.w	sl, #0
 810b990:	e7e8      	b.n	810b964 <_strtod_l+0xfc>
 810b992:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810b996:	f04f 3aff 	mov.w	sl, #4294967295
 810b99a:	e7e3      	b.n	810b964 <_strtod_l+0xfc>
 810b99c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b99e:	1c5a      	adds	r2, r3, #1
 810b9a0:	921d      	str	r2, [sp, #116]	; 0x74
 810b9a2:	785b      	ldrb	r3, [r3, #1]
 810b9a4:	2b30      	cmp	r3, #48	; 0x30
 810b9a6:	d0f9      	beq.n	810b99c <_strtod_l+0x134>
 810b9a8:	2b00      	cmp	r3, #0
 810b9aa:	d09f      	beq.n	810b8ec <_strtod_l+0x84>
 810b9ac:	2301      	movs	r3, #1
 810b9ae:	f04f 0900 	mov.w	r9, #0
 810b9b2:	9304      	str	r3, [sp, #16]
 810b9b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810b9b6:	930a      	str	r3, [sp, #40]	; 0x28
 810b9b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810b9bc:	464f      	mov	r7, r9
 810b9be:	220a      	movs	r2, #10
 810b9c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 810b9c2:	7806      	ldrb	r6, [r0, #0]
 810b9c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810b9c8:	b2d9      	uxtb	r1, r3
 810b9ca:	2909      	cmp	r1, #9
 810b9cc:	d92a      	bls.n	810ba24 <_strtod_l+0x1bc>
 810b9ce:	9907      	ldr	r1, [sp, #28]
 810b9d0:	462a      	mov	r2, r5
 810b9d2:	f7ff ff05 	bl	810b7e0 <strncmp>
 810b9d6:	b398      	cbz	r0, 810ba40 <_strtod_l+0x1d8>
 810b9d8:	2000      	movs	r0, #0
 810b9da:	4633      	mov	r3, r6
 810b9dc:	463d      	mov	r5, r7
 810b9de:	9007      	str	r0, [sp, #28]
 810b9e0:	4602      	mov	r2, r0
 810b9e2:	2b65      	cmp	r3, #101	; 0x65
 810b9e4:	d001      	beq.n	810b9ea <_strtod_l+0x182>
 810b9e6:	2b45      	cmp	r3, #69	; 0x45
 810b9e8:	d118      	bne.n	810ba1c <_strtod_l+0x1b4>
 810b9ea:	b91d      	cbnz	r5, 810b9f4 <_strtod_l+0x18c>
 810b9ec:	9b04      	ldr	r3, [sp, #16]
 810b9ee:	4303      	orrs	r3, r0
 810b9f0:	d098      	beq.n	810b924 <_strtod_l+0xbc>
 810b9f2:	2500      	movs	r5, #0
 810b9f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 810b9f8:	f108 0301 	add.w	r3, r8, #1
 810b9fc:	931d      	str	r3, [sp, #116]	; 0x74
 810b9fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 810ba02:	2b2b      	cmp	r3, #43	; 0x2b
 810ba04:	d075      	beq.n	810baf2 <_strtod_l+0x28a>
 810ba06:	2b2d      	cmp	r3, #45	; 0x2d
 810ba08:	d07b      	beq.n	810bb02 <_strtod_l+0x29a>
 810ba0a:	f04f 0c00 	mov.w	ip, #0
 810ba0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 810ba12:	2909      	cmp	r1, #9
 810ba14:	f240 8082 	bls.w	810bb1c <_strtod_l+0x2b4>
 810ba18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810ba1c:	2600      	movs	r6, #0
 810ba1e:	e09d      	b.n	810bb5c <_strtod_l+0x2f4>
 810ba20:	2300      	movs	r3, #0
 810ba22:	e7c4      	b.n	810b9ae <_strtod_l+0x146>
 810ba24:	2f08      	cmp	r7, #8
 810ba26:	bfd8      	it	le
 810ba28:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810ba2a:	f100 0001 	add.w	r0, r0, #1
 810ba2e:	bfda      	itte	le
 810ba30:	fb02 3301 	mlale	r3, r2, r1, r3
 810ba34:	9309      	strle	r3, [sp, #36]	; 0x24
 810ba36:	fb02 3909 	mlagt	r9, r2, r9, r3
 810ba3a:	3701      	adds	r7, #1
 810ba3c:	901d      	str	r0, [sp, #116]	; 0x74
 810ba3e:	e7bf      	b.n	810b9c0 <_strtod_l+0x158>
 810ba40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810ba42:	195a      	adds	r2, r3, r5
 810ba44:	921d      	str	r2, [sp, #116]	; 0x74
 810ba46:	5d5b      	ldrb	r3, [r3, r5]
 810ba48:	2f00      	cmp	r7, #0
 810ba4a:	d037      	beq.n	810babc <_strtod_l+0x254>
 810ba4c:	9007      	str	r0, [sp, #28]
 810ba4e:	463d      	mov	r5, r7
 810ba50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 810ba54:	2a09      	cmp	r2, #9
 810ba56:	d912      	bls.n	810ba7e <_strtod_l+0x216>
 810ba58:	2201      	movs	r2, #1
 810ba5a:	e7c2      	b.n	810b9e2 <_strtod_l+0x17a>
 810ba5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810ba5e:	1c5a      	adds	r2, r3, #1
 810ba60:	921d      	str	r2, [sp, #116]	; 0x74
 810ba62:	785b      	ldrb	r3, [r3, #1]
 810ba64:	3001      	adds	r0, #1
 810ba66:	2b30      	cmp	r3, #48	; 0x30
 810ba68:	d0f8      	beq.n	810ba5c <_strtod_l+0x1f4>
 810ba6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 810ba6e:	2a08      	cmp	r2, #8
 810ba70:	f200 84db 	bhi.w	810c42a <_strtod_l+0xbc2>
 810ba74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 810ba76:	9007      	str	r0, [sp, #28]
 810ba78:	2000      	movs	r0, #0
 810ba7a:	920a      	str	r2, [sp, #40]	; 0x28
 810ba7c:	4605      	mov	r5, r0
 810ba7e:	3b30      	subs	r3, #48	; 0x30
 810ba80:	f100 0201 	add.w	r2, r0, #1
 810ba84:	d014      	beq.n	810bab0 <_strtod_l+0x248>
 810ba86:	9907      	ldr	r1, [sp, #28]
 810ba88:	4411      	add	r1, r2
 810ba8a:	9107      	str	r1, [sp, #28]
 810ba8c:	462a      	mov	r2, r5
 810ba8e:	eb00 0e05 	add.w	lr, r0, r5
 810ba92:	210a      	movs	r1, #10
 810ba94:	4572      	cmp	r2, lr
 810ba96:	d113      	bne.n	810bac0 <_strtod_l+0x258>
 810ba98:	182a      	adds	r2, r5, r0
 810ba9a:	2a08      	cmp	r2, #8
 810ba9c:	f105 0501 	add.w	r5, r5, #1
 810baa0:	4405      	add	r5, r0
 810baa2:	dc1c      	bgt.n	810bade <_strtod_l+0x276>
 810baa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810baa6:	220a      	movs	r2, #10
 810baa8:	fb02 3301 	mla	r3, r2, r1, r3
 810baac:	9309      	str	r3, [sp, #36]	; 0x24
 810baae:	2200      	movs	r2, #0
 810bab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bab2:	1c59      	adds	r1, r3, #1
 810bab4:	911d      	str	r1, [sp, #116]	; 0x74
 810bab6:	785b      	ldrb	r3, [r3, #1]
 810bab8:	4610      	mov	r0, r2
 810baba:	e7c9      	b.n	810ba50 <_strtod_l+0x1e8>
 810babc:	4638      	mov	r0, r7
 810babe:	e7d2      	b.n	810ba66 <_strtod_l+0x1fe>
 810bac0:	2a08      	cmp	r2, #8
 810bac2:	dc04      	bgt.n	810bace <_strtod_l+0x266>
 810bac4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 810bac6:	434e      	muls	r6, r1
 810bac8:	9609      	str	r6, [sp, #36]	; 0x24
 810baca:	3201      	adds	r2, #1
 810bacc:	e7e2      	b.n	810ba94 <_strtod_l+0x22c>
 810bace:	f102 0c01 	add.w	ip, r2, #1
 810bad2:	f1bc 0f10 	cmp.w	ip, #16
 810bad6:	bfd8      	it	le
 810bad8:	fb01 f909 	mulle.w	r9, r1, r9
 810badc:	e7f5      	b.n	810baca <_strtod_l+0x262>
 810bade:	2d10      	cmp	r5, #16
 810bae0:	bfdc      	itt	le
 810bae2:	220a      	movle	r2, #10
 810bae4:	fb02 3909 	mlale	r9, r2, r9, r3
 810bae8:	e7e1      	b.n	810baae <_strtod_l+0x246>
 810baea:	2300      	movs	r3, #0
 810baec:	9307      	str	r3, [sp, #28]
 810baee:	2201      	movs	r2, #1
 810baf0:	e77c      	b.n	810b9ec <_strtod_l+0x184>
 810baf2:	f04f 0c00 	mov.w	ip, #0
 810baf6:	f108 0302 	add.w	r3, r8, #2
 810bafa:	931d      	str	r3, [sp, #116]	; 0x74
 810bafc:	f898 3002 	ldrb.w	r3, [r8, #2]
 810bb00:	e785      	b.n	810ba0e <_strtod_l+0x1a6>
 810bb02:	f04f 0c01 	mov.w	ip, #1
 810bb06:	e7f6      	b.n	810baf6 <_strtod_l+0x28e>
 810bb08:	0810f47c 	.word	0x0810f47c
 810bb0c:	0810f1c4 	.word	0x0810f1c4
 810bb10:	7ff00000 	.word	0x7ff00000
 810bb14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bb16:	1c59      	adds	r1, r3, #1
 810bb18:	911d      	str	r1, [sp, #116]	; 0x74
 810bb1a:	785b      	ldrb	r3, [r3, #1]
 810bb1c:	2b30      	cmp	r3, #48	; 0x30
 810bb1e:	d0f9      	beq.n	810bb14 <_strtod_l+0x2ac>
 810bb20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 810bb24:	2908      	cmp	r1, #8
 810bb26:	f63f af79 	bhi.w	810ba1c <_strtod_l+0x1b4>
 810bb2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 810bb2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bb30:	9308      	str	r3, [sp, #32]
 810bb32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bb34:	1c59      	adds	r1, r3, #1
 810bb36:	911d      	str	r1, [sp, #116]	; 0x74
 810bb38:	785b      	ldrb	r3, [r3, #1]
 810bb3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 810bb3e:	2e09      	cmp	r6, #9
 810bb40:	d937      	bls.n	810bbb2 <_strtod_l+0x34a>
 810bb42:	9e08      	ldr	r6, [sp, #32]
 810bb44:	1b89      	subs	r1, r1, r6
 810bb46:	2908      	cmp	r1, #8
 810bb48:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810bb4c:	dc02      	bgt.n	810bb54 <_strtod_l+0x2ec>
 810bb4e:	4576      	cmp	r6, lr
 810bb50:	bfa8      	it	ge
 810bb52:	4676      	movge	r6, lr
 810bb54:	f1bc 0f00 	cmp.w	ip, #0
 810bb58:	d000      	beq.n	810bb5c <_strtod_l+0x2f4>
 810bb5a:	4276      	negs	r6, r6
 810bb5c:	2d00      	cmp	r5, #0
 810bb5e:	d14f      	bne.n	810bc00 <_strtod_l+0x398>
 810bb60:	9904      	ldr	r1, [sp, #16]
 810bb62:	4301      	orrs	r1, r0
 810bb64:	f47f aec2 	bne.w	810b8ec <_strtod_l+0x84>
 810bb68:	2a00      	cmp	r2, #0
 810bb6a:	f47f aedb 	bne.w	810b924 <_strtod_l+0xbc>
 810bb6e:	2b69      	cmp	r3, #105	; 0x69
 810bb70:	d027      	beq.n	810bbc2 <_strtod_l+0x35a>
 810bb72:	dc24      	bgt.n	810bbbe <_strtod_l+0x356>
 810bb74:	2b49      	cmp	r3, #73	; 0x49
 810bb76:	d024      	beq.n	810bbc2 <_strtod_l+0x35a>
 810bb78:	2b4e      	cmp	r3, #78	; 0x4e
 810bb7a:	f47f aed3 	bne.w	810b924 <_strtod_l+0xbc>
 810bb7e:	499e      	ldr	r1, [pc, #632]	; (810bdf8 <_strtod_l+0x590>)
 810bb80:	a81d      	add	r0, sp, #116	; 0x74
 810bb82:	f002 f8bb 	bl	810dcfc <__match>
 810bb86:	2800      	cmp	r0, #0
 810bb88:	f43f aecc 	beq.w	810b924 <_strtod_l+0xbc>
 810bb8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bb8e:	781b      	ldrb	r3, [r3, #0]
 810bb90:	2b28      	cmp	r3, #40	; 0x28
 810bb92:	d12d      	bne.n	810bbf0 <_strtod_l+0x388>
 810bb94:	4999      	ldr	r1, [pc, #612]	; (810bdfc <_strtod_l+0x594>)
 810bb96:	aa20      	add	r2, sp, #128	; 0x80
 810bb98:	a81d      	add	r0, sp, #116	; 0x74
 810bb9a:	f002 f8c3 	bl	810dd24 <__hexnan>
 810bb9e:	2805      	cmp	r0, #5
 810bba0:	d126      	bne.n	810bbf0 <_strtod_l+0x388>
 810bba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bba4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 810bba8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810bbac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810bbb0:	e69c      	b.n	810b8ec <_strtod_l+0x84>
 810bbb2:	210a      	movs	r1, #10
 810bbb4:	fb01 3e0e 	mla	lr, r1, lr, r3
 810bbb8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810bbbc:	e7b9      	b.n	810bb32 <_strtod_l+0x2ca>
 810bbbe:	2b6e      	cmp	r3, #110	; 0x6e
 810bbc0:	e7db      	b.n	810bb7a <_strtod_l+0x312>
 810bbc2:	498f      	ldr	r1, [pc, #572]	; (810be00 <_strtod_l+0x598>)
 810bbc4:	a81d      	add	r0, sp, #116	; 0x74
 810bbc6:	f002 f899 	bl	810dcfc <__match>
 810bbca:	2800      	cmp	r0, #0
 810bbcc:	f43f aeaa 	beq.w	810b924 <_strtod_l+0xbc>
 810bbd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bbd2:	498c      	ldr	r1, [pc, #560]	; (810be04 <_strtod_l+0x59c>)
 810bbd4:	3b01      	subs	r3, #1
 810bbd6:	a81d      	add	r0, sp, #116	; 0x74
 810bbd8:	931d      	str	r3, [sp, #116]	; 0x74
 810bbda:	f002 f88f 	bl	810dcfc <__match>
 810bbde:	b910      	cbnz	r0, 810bbe6 <_strtod_l+0x37e>
 810bbe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810bbe2:	3301      	adds	r3, #1
 810bbe4:	931d      	str	r3, [sp, #116]	; 0x74
 810bbe6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 810be14 <_strtod_l+0x5ac>
 810bbea:	f04f 0a00 	mov.w	sl, #0
 810bbee:	e67d      	b.n	810b8ec <_strtod_l+0x84>
 810bbf0:	4885      	ldr	r0, [pc, #532]	; (810be08 <_strtod_l+0x5a0>)
 810bbf2:	f7fe fcb9 	bl	810a568 <nan>
 810bbf6:	ed8d 0b04 	vstr	d0, [sp, #16]
 810bbfa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 810bbfe:	e675      	b.n	810b8ec <_strtod_l+0x84>
 810bc00:	9b07      	ldr	r3, [sp, #28]
 810bc02:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bc04:	1af3      	subs	r3, r6, r3
 810bc06:	2f00      	cmp	r7, #0
 810bc08:	bf08      	it	eq
 810bc0a:	462f      	moveq	r7, r5
 810bc0c:	2d10      	cmp	r5, #16
 810bc0e:	9308      	str	r3, [sp, #32]
 810bc10:	46a8      	mov	r8, r5
 810bc12:	bfa8      	it	ge
 810bc14:	f04f 0810 	movge.w	r8, #16
 810bc18:	f7f4 fd0c 	bl	8100634 <__aeabi_ui2d>
 810bc1c:	2d09      	cmp	r5, #9
 810bc1e:	4682      	mov	sl, r0
 810bc20:	468b      	mov	fp, r1
 810bc22:	dd13      	ble.n	810bc4c <_strtod_l+0x3e4>
 810bc24:	4b79      	ldr	r3, [pc, #484]	; (810be0c <_strtod_l+0x5a4>)
 810bc26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810bc2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810bc2e:	f7f4 fd7b 	bl	8100728 <__aeabi_dmul>
 810bc32:	4682      	mov	sl, r0
 810bc34:	4648      	mov	r0, r9
 810bc36:	468b      	mov	fp, r1
 810bc38:	f7f4 fcfc 	bl	8100634 <__aeabi_ui2d>
 810bc3c:	4602      	mov	r2, r0
 810bc3e:	460b      	mov	r3, r1
 810bc40:	4650      	mov	r0, sl
 810bc42:	4659      	mov	r1, fp
 810bc44:	f7f4 fbba 	bl	81003bc <__adddf3>
 810bc48:	4682      	mov	sl, r0
 810bc4a:	468b      	mov	fp, r1
 810bc4c:	2d0f      	cmp	r5, #15
 810bc4e:	dc38      	bgt.n	810bcc2 <_strtod_l+0x45a>
 810bc50:	9b08      	ldr	r3, [sp, #32]
 810bc52:	2b00      	cmp	r3, #0
 810bc54:	f43f ae4a 	beq.w	810b8ec <_strtod_l+0x84>
 810bc58:	dd24      	ble.n	810bca4 <_strtod_l+0x43c>
 810bc5a:	2b16      	cmp	r3, #22
 810bc5c:	dc0b      	bgt.n	810bc76 <_strtod_l+0x40e>
 810bc5e:	4d6b      	ldr	r5, [pc, #428]	; (810be0c <_strtod_l+0x5a4>)
 810bc60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 810bc64:	e9d5 0100 	ldrd	r0, r1, [r5]
 810bc68:	4652      	mov	r2, sl
 810bc6a:	465b      	mov	r3, fp
 810bc6c:	f7f4 fd5c 	bl	8100728 <__aeabi_dmul>
 810bc70:	4682      	mov	sl, r0
 810bc72:	468b      	mov	fp, r1
 810bc74:	e63a      	b.n	810b8ec <_strtod_l+0x84>
 810bc76:	9a08      	ldr	r2, [sp, #32]
 810bc78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810bc7c:	4293      	cmp	r3, r2
 810bc7e:	db20      	blt.n	810bcc2 <_strtod_l+0x45a>
 810bc80:	4c62      	ldr	r4, [pc, #392]	; (810be0c <_strtod_l+0x5a4>)
 810bc82:	f1c5 050f 	rsb	r5, r5, #15
 810bc86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810bc8a:	4652      	mov	r2, sl
 810bc8c:	465b      	mov	r3, fp
 810bc8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810bc92:	f7f4 fd49 	bl	8100728 <__aeabi_dmul>
 810bc96:	9b08      	ldr	r3, [sp, #32]
 810bc98:	1b5d      	subs	r5, r3, r5
 810bc9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810bc9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 810bca2:	e7e3      	b.n	810bc6c <_strtod_l+0x404>
 810bca4:	9b08      	ldr	r3, [sp, #32]
 810bca6:	3316      	adds	r3, #22
 810bca8:	db0b      	blt.n	810bcc2 <_strtod_l+0x45a>
 810bcaa:	9b07      	ldr	r3, [sp, #28]
 810bcac:	4a57      	ldr	r2, [pc, #348]	; (810be0c <_strtod_l+0x5a4>)
 810bcae:	1b9e      	subs	r6, r3, r6
 810bcb0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810bcb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810bcb8:	4650      	mov	r0, sl
 810bcba:	4659      	mov	r1, fp
 810bcbc:	f7f4 fe5e 	bl	810097c <__aeabi_ddiv>
 810bcc0:	e7d6      	b.n	810bc70 <_strtod_l+0x408>
 810bcc2:	9b08      	ldr	r3, [sp, #32]
 810bcc4:	eba5 0808 	sub.w	r8, r5, r8
 810bcc8:	4498      	add	r8, r3
 810bcca:	f1b8 0f00 	cmp.w	r8, #0
 810bcce:	dd71      	ble.n	810bdb4 <_strtod_l+0x54c>
 810bcd0:	f018 030f 	ands.w	r3, r8, #15
 810bcd4:	d00a      	beq.n	810bcec <_strtod_l+0x484>
 810bcd6:	494d      	ldr	r1, [pc, #308]	; (810be0c <_strtod_l+0x5a4>)
 810bcd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810bcdc:	4652      	mov	r2, sl
 810bcde:	465b      	mov	r3, fp
 810bce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810bce4:	f7f4 fd20 	bl	8100728 <__aeabi_dmul>
 810bce8:	4682      	mov	sl, r0
 810bcea:	468b      	mov	fp, r1
 810bcec:	f038 080f 	bics.w	r8, r8, #15
 810bcf0:	d04d      	beq.n	810bd8e <_strtod_l+0x526>
 810bcf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810bcf6:	dd22      	ble.n	810bd3e <_strtod_l+0x4d6>
 810bcf8:	2500      	movs	r5, #0
 810bcfa:	462e      	mov	r6, r5
 810bcfc:	9509      	str	r5, [sp, #36]	; 0x24
 810bcfe:	9507      	str	r5, [sp, #28]
 810bd00:	2322      	movs	r3, #34	; 0x22
 810bd02:	f8df b110 	ldr.w	fp, [pc, #272]	; 810be14 <_strtod_l+0x5ac>
 810bd06:	6023      	str	r3, [r4, #0]
 810bd08:	f04f 0a00 	mov.w	sl, #0
 810bd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bd0e:	2b00      	cmp	r3, #0
 810bd10:	f43f adec 	beq.w	810b8ec <_strtod_l+0x84>
 810bd14:	991e      	ldr	r1, [sp, #120]	; 0x78
 810bd16:	4620      	mov	r0, r4
 810bd18:	f002 f984 	bl	810e024 <_Bfree>
 810bd1c:	9907      	ldr	r1, [sp, #28]
 810bd1e:	4620      	mov	r0, r4
 810bd20:	f002 f980 	bl	810e024 <_Bfree>
 810bd24:	4631      	mov	r1, r6
 810bd26:	4620      	mov	r0, r4
 810bd28:	f002 f97c 	bl	810e024 <_Bfree>
 810bd2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810bd2e:	4620      	mov	r0, r4
 810bd30:	f002 f978 	bl	810e024 <_Bfree>
 810bd34:	4629      	mov	r1, r5
 810bd36:	4620      	mov	r0, r4
 810bd38:	f002 f974 	bl	810e024 <_Bfree>
 810bd3c:	e5d6      	b.n	810b8ec <_strtod_l+0x84>
 810bd3e:	2300      	movs	r3, #0
 810bd40:	ea4f 1828 	mov.w	r8, r8, asr #4
 810bd44:	4650      	mov	r0, sl
 810bd46:	4659      	mov	r1, fp
 810bd48:	4699      	mov	r9, r3
 810bd4a:	f1b8 0f01 	cmp.w	r8, #1
 810bd4e:	dc21      	bgt.n	810bd94 <_strtod_l+0x52c>
 810bd50:	b10b      	cbz	r3, 810bd56 <_strtod_l+0x4ee>
 810bd52:	4682      	mov	sl, r0
 810bd54:	468b      	mov	fp, r1
 810bd56:	4b2e      	ldr	r3, [pc, #184]	; (810be10 <_strtod_l+0x5a8>)
 810bd58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810bd5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810bd60:	4652      	mov	r2, sl
 810bd62:	465b      	mov	r3, fp
 810bd64:	e9d9 0100 	ldrd	r0, r1, [r9]
 810bd68:	f7f4 fcde 	bl	8100728 <__aeabi_dmul>
 810bd6c:	4b29      	ldr	r3, [pc, #164]	; (810be14 <_strtod_l+0x5ac>)
 810bd6e:	460a      	mov	r2, r1
 810bd70:	400b      	ands	r3, r1
 810bd72:	4929      	ldr	r1, [pc, #164]	; (810be18 <_strtod_l+0x5b0>)
 810bd74:	428b      	cmp	r3, r1
 810bd76:	4682      	mov	sl, r0
 810bd78:	d8be      	bhi.n	810bcf8 <_strtod_l+0x490>
 810bd7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810bd7e:	428b      	cmp	r3, r1
 810bd80:	bf86      	itte	hi
 810bd82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 810be1c <_strtod_l+0x5b4>
 810bd86:	f04f 3aff 	movhi.w	sl, #4294967295
 810bd8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810bd8e:	2300      	movs	r3, #0
 810bd90:	9304      	str	r3, [sp, #16]
 810bd92:	e081      	b.n	810be98 <_strtod_l+0x630>
 810bd94:	f018 0f01 	tst.w	r8, #1
 810bd98:	d007      	beq.n	810bdaa <_strtod_l+0x542>
 810bd9a:	4b1d      	ldr	r3, [pc, #116]	; (810be10 <_strtod_l+0x5a8>)
 810bd9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 810bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bda4:	f7f4 fcc0 	bl	8100728 <__aeabi_dmul>
 810bda8:	2301      	movs	r3, #1
 810bdaa:	f109 0901 	add.w	r9, r9, #1
 810bdae:	ea4f 0868 	mov.w	r8, r8, asr #1
 810bdb2:	e7ca      	b.n	810bd4a <_strtod_l+0x4e2>
 810bdb4:	d0eb      	beq.n	810bd8e <_strtod_l+0x526>
 810bdb6:	f1c8 0800 	rsb	r8, r8, #0
 810bdba:	f018 020f 	ands.w	r2, r8, #15
 810bdbe:	d00a      	beq.n	810bdd6 <_strtod_l+0x56e>
 810bdc0:	4b12      	ldr	r3, [pc, #72]	; (810be0c <_strtod_l+0x5a4>)
 810bdc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bdc6:	4650      	mov	r0, sl
 810bdc8:	4659      	mov	r1, fp
 810bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bdce:	f7f4 fdd5 	bl	810097c <__aeabi_ddiv>
 810bdd2:	4682      	mov	sl, r0
 810bdd4:	468b      	mov	fp, r1
 810bdd6:	ea5f 1828 	movs.w	r8, r8, asr #4
 810bdda:	d0d8      	beq.n	810bd8e <_strtod_l+0x526>
 810bddc:	f1b8 0f1f 	cmp.w	r8, #31
 810bde0:	dd1e      	ble.n	810be20 <_strtod_l+0x5b8>
 810bde2:	2500      	movs	r5, #0
 810bde4:	462e      	mov	r6, r5
 810bde6:	9509      	str	r5, [sp, #36]	; 0x24
 810bde8:	9507      	str	r5, [sp, #28]
 810bdea:	2322      	movs	r3, #34	; 0x22
 810bdec:	f04f 0a00 	mov.w	sl, #0
 810bdf0:	f04f 0b00 	mov.w	fp, #0
 810bdf4:	6023      	str	r3, [r4, #0]
 810bdf6:	e789      	b.n	810bd0c <_strtod_l+0x4a4>
 810bdf8:	0810f196 	.word	0x0810f196
 810bdfc:	0810f1d8 	.word	0x0810f1d8
 810be00:	0810f18e 	.word	0x0810f18e
 810be04:	0810f31c 	.word	0x0810f31c
 810be08:	0810f173 	.word	0x0810f173
 810be0c:	0810f518 	.word	0x0810f518
 810be10:	0810f4f0 	.word	0x0810f4f0
 810be14:	7ff00000 	.word	0x7ff00000
 810be18:	7ca00000 	.word	0x7ca00000
 810be1c:	7fefffff 	.word	0x7fefffff
 810be20:	f018 0310 	ands.w	r3, r8, #16
 810be24:	bf18      	it	ne
 810be26:	236a      	movne	r3, #106	; 0x6a
 810be28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 810c1e0 <_strtod_l+0x978>
 810be2c:	9304      	str	r3, [sp, #16]
 810be2e:	4650      	mov	r0, sl
 810be30:	4659      	mov	r1, fp
 810be32:	2300      	movs	r3, #0
 810be34:	f018 0f01 	tst.w	r8, #1
 810be38:	d004      	beq.n	810be44 <_strtod_l+0x5dc>
 810be3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810be3e:	f7f4 fc73 	bl	8100728 <__aeabi_dmul>
 810be42:	2301      	movs	r3, #1
 810be44:	ea5f 0868 	movs.w	r8, r8, asr #1
 810be48:	f109 0908 	add.w	r9, r9, #8
 810be4c:	d1f2      	bne.n	810be34 <_strtod_l+0x5cc>
 810be4e:	b10b      	cbz	r3, 810be54 <_strtod_l+0x5ec>
 810be50:	4682      	mov	sl, r0
 810be52:	468b      	mov	fp, r1
 810be54:	9b04      	ldr	r3, [sp, #16]
 810be56:	b1bb      	cbz	r3, 810be88 <_strtod_l+0x620>
 810be58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 810be5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810be60:	2b00      	cmp	r3, #0
 810be62:	4659      	mov	r1, fp
 810be64:	dd10      	ble.n	810be88 <_strtod_l+0x620>
 810be66:	2b1f      	cmp	r3, #31
 810be68:	f340 8128 	ble.w	810c0bc <_strtod_l+0x854>
 810be6c:	2b34      	cmp	r3, #52	; 0x34
 810be6e:	bfde      	ittt	le
 810be70:	3b20      	suble	r3, #32
 810be72:	f04f 32ff 	movle.w	r2, #4294967295
 810be76:	fa02 f303 	lslle.w	r3, r2, r3
 810be7a:	f04f 0a00 	mov.w	sl, #0
 810be7e:	bfcc      	ite	gt
 810be80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810be84:	ea03 0b01 	andle.w	fp, r3, r1
 810be88:	2200      	movs	r2, #0
 810be8a:	2300      	movs	r3, #0
 810be8c:	4650      	mov	r0, sl
 810be8e:	4659      	mov	r1, fp
 810be90:	f7f4 feb2 	bl	8100bf8 <__aeabi_dcmpeq>
 810be94:	2800      	cmp	r0, #0
 810be96:	d1a4      	bne.n	810bde2 <_strtod_l+0x57a>
 810be98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be9a:	9300      	str	r3, [sp, #0]
 810be9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 810be9e:	462b      	mov	r3, r5
 810bea0:	463a      	mov	r2, r7
 810bea2:	4620      	mov	r0, r4
 810bea4:	f002 f92a 	bl	810e0fc <__s2b>
 810bea8:	9009      	str	r0, [sp, #36]	; 0x24
 810beaa:	2800      	cmp	r0, #0
 810beac:	f43f af24 	beq.w	810bcf8 <_strtod_l+0x490>
 810beb0:	9b07      	ldr	r3, [sp, #28]
 810beb2:	1b9e      	subs	r6, r3, r6
 810beb4:	9b08      	ldr	r3, [sp, #32]
 810beb6:	2b00      	cmp	r3, #0
 810beb8:	bfb4      	ite	lt
 810beba:	4633      	movlt	r3, r6
 810bebc:	2300      	movge	r3, #0
 810bebe:	9310      	str	r3, [sp, #64]	; 0x40
 810bec0:	9b08      	ldr	r3, [sp, #32]
 810bec2:	2500      	movs	r5, #0
 810bec4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810bec8:	9318      	str	r3, [sp, #96]	; 0x60
 810beca:	462e      	mov	r6, r5
 810becc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bece:	4620      	mov	r0, r4
 810bed0:	6859      	ldr	r1, [r3, #4]
 810bed2:	f002 f867 	bl	810dfa4 <_Balloc>
 810bed6:	9007      	str	r0, [sp, #28]
 810bed8:	2800      	cmp	r0, #0
 810beda:	f43f af11 	beq.w	810bd00 <_strtod_l+0x498>
 810bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bee0:	691a      	ldr	r2, [r3, #16]
 810bee2:	3202      	adds	r2, #2
 810bee4:	f103 010c 	add.w	r1, r3, #12
 810bee8:	0092      	lsls	r2, r2, #2
 810beea:	300c      	adds	r0, #12
 810beec:	f7fe fbae 	bl	810a64c <memcpy>
 810bef0:	ec4b ab10 	vmov	d0, sl, fp
 810bef4:	aa20      	add	r2, sp, #128	; 0x80
 810bef6:	a91f      	add	r1, sp, #124	; 0x7c
 810bef8:	4620      	mov	r0, r4
 810befa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 810befe:	f002 fc39 	bl	810e774 <__d2b>
 810bf02:	901e      	str	r0, [sp, #120]	; 0x78
 810bf04:	2800      	cmp	r0, #0
 810bf06:	f43f aefb 	beq.w	810bd00 <_strtod_l+0x498>
 810bf0a:	2101      	movs	r1, #1
 810bf0c:	4620      	mov	r0, r4
 810bf0e:	f002 f98f 	bl	810e230 <__i2b>
 810bf12:	4606      	mov	r6, r0
 810bf14:	2800      	cmp	r0, #0
 810bf16:	f43f aef3 	beq.w	810bd00 <_strtod_l+0x498>
 810bf1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810bf1c:	9904      	ldr	r1, [sp, #16]
 810bf1e:	2b00      	cmp	r3, #0
 810bf20:	bfab      	itete	ge
 810bf22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 810bf24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 810bf26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 810bf28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 810bf2c:	bfac      	ite	ge
 810bf2e:	eb03 0902 	addge.w	r9, r3, r2
 810bf32:	1ad7      	sublt	r7, r2, r3
 810bf34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810bf36:	eba3 0801 	sub.w	r8, r3, r1
 810bf3a:	4490      	add	r8, r2
 810bf3c:	4ba3      	ldr	r3, [pc, #652]	; (810c1cc <_strtod_l+0x964>)
 810bf3e:	f108 38ff 	add.w	r8, r8, #4294967295
 810bf42:	4598      	cmp	r8, r3
 810bf44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810bf48:	f280 80cc 	bge.w	810c0e4 <_strtod_l+0x87c>
 810bf4c:	eba3 0308 	sub.w	r3, r3, r8
 810bf50:	2b1f      	cmp	r3, #31
 810bf52:	eba2 0203 	sub.w	r2, r2, r3
 810bf56:	f04f 0101 	mov.w	r1, #1
 810bf5a:	f300 80b6 	bgt.w	810c0ca <_strtod_l+0x862>
 810bf5e:	fa01 f303 	lsl.w	r3, r1, r3
 810bf62:	9311      	str	r3, [sp, #68]	; 0x44
 810bf64:	2300      	movs	r3, #0
 810bf66:	930c      	str	r3, [sp, #48]	; 0x30
 810bf68:	eb09 0802 	add.w	r8, r9, r2
 810bf6c:	9b04      	ldr	r3, [sp, #16]
 810bf6e:	45c1      	cmp	r9, r8
 810bf70:	4417      	add	r7, r2
 810bf72:	441f      	add	r7, r3
 810bf74:	464b      	mov	r3, r9
 810bf76:	bfa8      	it	ge
 810bf78:	4643      	movge	r3, r8
 810bf7a:	42bb      	cmp	r3, r7
 810bf7c:	bfa8      	it	ge
 810bf7e:	463b      	movge	r3, r7
 810bf80:	2b00      	cmp	r3, #0
 810bf82:	bfc2      	ittt	gt
 810bf84:	eba8 0803 	subgt.w	r8, r8, r3
 810bf88:	1aff      	subgt	r7, r7, r3
 810bf8a:	eba9 0903 	subgt.w	r9, r9, r3
 810bf8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bf90:	2b00      	cmp	r3, #0
 810bf92:	dd17      	ble.n	810bfc4 <_strtod_l+0x75c>
 810bf94:	4631      	mov	r1, r6
 810bf96:	461a      	mov	r2, r3
 810bf98:	4620      	mov	r0, r4
 810bf9a:	f002 fa05 	bl	810e3a8 <__pow5mult>
 810bf9e:	4606      	mov	r6, r0
 810bfa0:	2800      	cmp	r0, #0
 810bfa2:	f43f aead 	beq.w	810bd00 <_strtod_l+0x498>
 810bfa6:	4601      	mov	r1, r0
 810bfa8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810bfaa:	4620      	mov	r0, r4
 810bfac:	f002 f956 	bl	810e25c <__multiply>
 810bfb0:	900f      	str	r0, [sp, #60]	; 0x3c
 810bfb2:	2800      	cmp	r0, #0
 810bfb4:	f43f aea4 	beq.w	810bd00 <_strtod_l+0x498>
 810bfb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 810bfba:	4620      	mov	r0, r4
 810bfbc:	f002 f832 	bl	810e024 <_Bfree>
 810bfc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bfc2:	931e      	str	r3, [sp, #120]	; 0x78
 810bfc4:	f1b8 0f00 	cmp.w	r8, #0
 810bfc8:	f300 8091 	bgt.w	810c0ee <_strtod_l+0x886>
 810bfcc:	9b08      	ldr	r3, [sp, #32]
 810bfce:	2b00      	cmp	r3, #0
 810bfd0:	dd08      	ble.n	810bfe4 <_strtod_l+0x77c>
 810bfd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810bfd4:	9907      	ldr	r1, [sp, #28]
 810bfd6:	4620      	mov	r0, r4
 810bfd8:	f002 f9e6 	bl	810e3a8 <__pow5mult>
 810bfdc:	9007      	str	r0, [sp, #28]
 810bfde:	2800      	cmp	r0, #0
 810bfe0:	f43f ae8e 	beq.w	810bd00 <_strtod_l+0x498>
 810bfe4:	2f00      	cmp	r7, #0
 810bfe6:	dd08      	ble.n	810bffa <_strtod_l+0x792>
 810bfe8:	9907      	ldr	r1, [sp, #28]
 810bfea:	463a      	mov	r2, r7
 810bfec:	4620      	mov	r0, r4
 810bfee:	f002 fa35 	bl	810e45c <__lshift>
 810bff2:	9007      	str	r0, [sp, #28]
 810bff4:	2800      	cmp	r0, #0
 810bff6:	f43f ae83 	beq.w	810bd00 <_strtod_l+0x498>
 810bffa:	f1b9 0f00 	cmp.w	r9, #0
 810bffe:	dd08      	ble.n	810c012 <_strtod_l+0x7aa>
 810c000:	4631      	mov	r1, r6
 810c002:	464a      	mov	r2, r9
 810c004:	4620      	mov	r0, r4
 810c006:	f002 fa29 	bl	810e45c <__lshift>
 810c00a:	4606      	mov	r6, r0
 810c00c:	2800      	cmp	r0, #0
 810c00e:	f43f ae77 	beq.w	810bd00 <_strtod_l+0x498>
 810c012:	9a07      	ldr	r2, [sp, #28]
 810c014:	991e      	ldr	r1, [sp, #120]	; 0x78
 810c016:	4620      	mov	r0, r4
 810c018:	f002 faa8 	bl	810e56c <__mdiff>
 810c01c:	4605      	mov	r5, r0
 810c01e:	2800      	cmp	r0, #0
 810c020:	f43f ae6e 	beq.w	810bd00 <_strtod_l+0x498>
 810c024:	68c3      	ldr	r3, [r0, #12]
 810c026:	930f      	str	r3, [sp, #60]	; 0x3c
 810c028:	2300      	movs	r3, #0
 810c02a:	60c3      	str	r3, [r0, #12]
 810c02c:	4631      	mov	r1, r6
 810c02e:	f002 fa81 	bl	810e534 <__mcmp>
 810c032:	2800      	cmp	r0, #0
 810c034:	da65      	bge.n	810c102 <_strtod_l+0x89a>
 810c036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c038:	ea53 030a 	orrs.w	r3, r3, sl
 810c03c:	f040 8087 	bne.w	810c14e <_strtod_l+0x8e6>
 810c040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c044:	2b00      	cmp	r3, #0
 810c046:	f040 8082 	bne.w	810c14e <_strtod_l+0x8e6>
 810c04a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c04e:	0d1b      	lsrs	r3, r3, #20
 810c050:	051b      	lsls	r3, r3, #20
 810c052:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810c056:	d97a      	bls.n	810c14e <_strtod_l+0x8e6>
 810c058:	696b      	ldr	r3, [r5, #20]
 810c05a:	b913      	cbnz	r3, 810c062 <_strtod_l+0x7fa>
 810c05c:	692b      	ldr	r3, [r5, #16]
 810c05e:	2b01      	cmp	r3, #1
 810c060:	dd75      	ble.n	810c14e <_strtod_l+0x8e6>
 810c062:	4629      	mov	r1, r5
 810c064:	2201      	movs	r2, #1
 810c066:	4620      	mov	r0, r4
 810c068:	f002 f9f8 	bl	810e45c <__lshift>
 810c06c:	4631      	mov	r1, r6
 810c06e:	4605      	mov	r5, r0
 810c070:	f002 fa60 	bl	810e534 <__mcmp>
 810c074:	2800      	cmp	r0, #0
 810c076:	dd6a      	ble.n	810c14e <_strtod_l+0x8e6>
 810c078:	9904      	ldr	r1, [sp, #16]
 810c07a:	4a55      	ldr	r2, [pc, #340]	; (810c1d0 <_strtod_l+0x968>)
 810c07c:	465b      	mov	r3, fp
 810c07e:	2900      	cmp	r1, #0
 810c080:	f000 8085 	beq.w	810c18e <_strtod_l+0x926>
 810c084:	ea02 010b 	and.w	r1, r2, fp
 810c088:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810c08c:	dc7f      	bgt.n	810c18e <_strtod_l+0x926>
 810c08e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810c092:	f77f aeaa 	ble.w	810bdea <_strtod_l+0x582>
 810c096:	4a4f      	ldr	r2, [pc, #316]	; (810c1d4 <_strtod_l+0x96c>)
 810c098:	2300      	movs	r3, #0
 810c09a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 810c09e:	4650      	mov	r0, sl
 810c0a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 810c0a4:	4659      	mov	r1, fp
 810c0a6:	f7f4 fb3f 	bl	8100728 <__aeabi_dmul>
 810c0aa:	460b      	mov	r3, r1
 810c0ac:	4303      	orrs	r3, r0
 810c0ae:	bf08      	it	eq
 810c0b0:	2322      	moveq	r3, #34	; 0x22
 810c0b2:	4682      	mov	sl, r0
 810c0b4:	468b      	mov	fp, r1
 810c0b6:	bf08      	it	eq
 810c0b8:	6023      	streq	r3, [r4, #0]
 810c0ba:	e62b      	b.n	810bd14 <_strtod_l+0x4ac>
 810c0bc:	f04f 32ff 	mov.w	r2, #4294967295
 810c0c0:	fa02 f303 	lsl.w	r3, r2, r3
 810c0c4:	ea03 0a0a 	and.w	sl, r3, sl
 810c0c8:	e6de      	b.n	810be88 <_strtod_l+0x620>
 810c0ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810c0ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810c0d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810c0d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810c0da:	fa01 f308 	lsl.w	r3, r1, r8
 810c0de:	930c      	str	r3, [sp, #48]	; 0x30
 810c0e0:	9111      	str	r1, [sp, #68]	; 0x44
 810c0e2:	e741      	b.n	810bf68 <_strtod_l+0x700>
 810c0e4:	2300      	movs	r3, #0
 810c0e6:	930c      	str	r3, [sp, #48]	; 0x30
 810c0e8:	2301      	movs	r3, #1
 810c0ea:	9311      	str	r3, [sp, #68]	; 0x44
 810c0ec:	e73c      	b.n	810bf68 <_strtod_l+0x700>
 810c0ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 810c0f0:	4642      	mov	r2, r8
 810c0f2:	4620      	mov	r0, r4
 810c0f4:	f002 f9b2 	bl	810e45c <__lshift>
 810c0f8:	901e      	str	r0, [sp, #120]	; 0x78
 810c0fa:	2800      	cmp	r0, #0
 810c0fc:	f47f af66 	bne.w	810bfcc <_strtod_l+0x764>
 810c100:	e5fe      	b.n	810bd00 <_strtod_l+0x498>
 810c102:	465f      	mov	r7, fp
 810c104:	d16e      	bne.n	810c1e4 <_strtod_l+0x97c>
 810c106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c10c:	b342      	cbz	r2, 810c160 <_strtod_l+0x8f8>
 810c10e:	4a32      	ldr	r2, [pc, #200]	; (810c1d8 <_strtod_l+0x970>)
 810c110:	4293      	cmp	r3, r2
 810c112:	d128      	bne.n	810c166 <_strtod_l+0x8fe>
 810c114:	9b04      	ldr	r3, [sp, #16]
 810c116:	4650      	mov	r0, sl
 810c118:	b1eb      	cbz	r3, 810c156 <_strtod_l+0x8ee>
 810c11a:	4a2d      	ldr	r2, [pc, #180]	; (810c1d0 <_strtod_l+0x968>)
 810c11c:	403a      	ands	r2, r7
 810c11e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 810c122:	f04f 31ff 	mov.w	r1, #4294967295
 810c126:	d819      	bhi.n	810c15c <_strtod_l+0x8f4>
 810c128:	0d12      	lsrs	r2, r2, #20
 810c12a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810c12e:	fa01 f303 	lsl.w	r3, r1, r3
 810c132:	4298      	cmp	r0, r3
 810c134:	d117      	bne.n	810c166 <_strtod_l+0x8fe>
 810c136:	4b29      	ldr	r3, [pc, #164]	; (810c1dc <_strtod_l+0x974>)
 810c138:	429f      	cmp	r7, r3
 810c13a:	d102      	bne.n	810c142 <_strtod_l+0x8da>
 810c13c:	3001      	adds	r0, #1
 810c13e:	f43f addf 	beq.w	810bd00 <_strtod_l+0x498>
 810c142:	4b23      	ldr	r3, [pc, #140]	; (810c1d0 <_strtod_l+0x968>)
 810c144:	403b      	ands	r3, r7
 810c146:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810c14a:	f04f 0a00 	mov.w	sl, #0
 810c14e:	9b04      	ldr	r3, [sp, #16]
 810c150:	2b00      	cmp	r3, #0
 810c152:	d1a0      	bne.n	810c096 <_strtod_l+0x82e>
 810c154:	e5de      	b.n	810bd14 <_strtod_l+0x4ac>
 810c156:	f04f 33ff 	mov.w	r3, #4294967295
 810c15a:	e7ea      	b.n	810c132 <_strtod_l+0x8ca>
 810c15c:	460b      	mov	r3, r1
 810c15e:	e7e8      	b.n	810c132 <_strtod_l+0x8ca>
 810c160:	ea53 030a 	orrs.w	r3, r3, sl
 810c164:	d088      	beq.n	810c078 <_strtod_l+0x810>
 810c166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c168:	b1db      	cbz	r3, 810c1a2 <_strtod_l+0x93a>
 810c16a:	423b      	tst	r3, r7
 810c16c:	d0ef      	beq.n	810c14e <_strtod_l+0x8e6>
 810c16e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c170:	9a04      	ldr	r2, [sp, #16]
 810c172:	4650      	mov	r0, sl
 810c174:	4659      	mov	r1, fp
 810c176:	b1c3      	cbz	r3, 810c1aa <_strtod_l+0x942>
 810c178:	f7ff fb57 	bl	810b82a <sulp>
 810c17c:	4602      	mov	r2, r0
 810c17e:	460b      	mov	r3, r1
 810c180:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810c184:	f7f4 f91a 	bl	81003bc <__adddf3>
 810c188:	4682      	mov	sl, r0
 810c18a:	468b      	mov	fp, r1
 810c18c:	e7df      	b.n	810c14e <_strtod_l+0x8e6>
 810c18e:	4013      	ands	r3, r2
 810c190:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810c194:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810c198:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810c19c:	f04f 3aff 	mov.w	sl, #4294967295
 810c1a0:	e7d5      	b.n	810c14e <_strtod_l+0x8e6>
 810c1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810c1a4:	ea13 0f0a 	tst.w	r3, sl
 810c1a8:	e7e0      	b.n	810c16c <_strtod_l+0x904>
 810c1aa:	f7ff fb3e 	bl	810b82a <sulp>
 810c1ae:	4602      	mov	r2, r0
 810c1b0:	460b      	mov	r3, r1
 810c1b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810c1b6:	f7f4 f8ff 	bl	81003b8 <__aeabi_dsub>
 810c1ba:	2200      	movs	r2, #0
 810c1bc:	2300      	movs	r3, #0
 810c1be:	4682      	mov	sl, r0
 810c1c0:	468b      	mov	fp, r1
 810c1c2:	f7f4 fd19 	bl	8100bf8 <__aeabi_dcmpeq>
 810c1c6:	2800      	cmp	r0, #0
 810c1c8:	d0c1      	beq.n	810c14e <_strtod_l+0x8e6>
 810c1ca:	e60e      	b.n	810bdea <_strtod_l+0x582>
 810c1cc:	fffffc02 	.word	0xfffffc02
 810c1d0:	7ff00000 	.word	0x7ff00000
 810c1d4:	39500000 	.word	0x39500000
 810c1d8:	000fffff 	.word	0x000fffff
 810c1dc:	7fefffff 	.word	0x7fefffff
 810c1e0:	0810f1f0 	.word	0x0810f1f0
 810c1e4:	4631      	mov	r1, r6
 810c1e6:	4628      	mov	r0, r5
 810c1e8:	f002 fb20 	bl	810e82c <__ratio>
 810c1ec:	ec59 8b10 	vmov	r8, r9, d0
 810c1f0:	ee10 0a10 	vmov	r0, s0
 810c1f4:	2200      	movs	r2, #0
 810c1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810c1fa:	4649      	mov	r1, r9
 810c1fc:	f7f4 fd10 	bl	8100c20 <__aeabi_dcmple>
 810c200:	2800      	cmp	r0, #0
 810c202:	d07c      	beq.n	810c2fe <_strtod_l+0xa96>
 810c204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c206:	2b00      	cmp	r3, #0
 810c208:	d04c      	beq.n	810c2a4 <_strtod_l+0xa3c>
 810c20a:	4b95      	ldr	r3, [pc, #596]	; (810c460 <_strtod_l+0xbf8>)
 810c20c:	2200      	movs	r2, #0
 810c20e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810c212:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810c460 <_strtod_l+0xbf8>
 810c216:	f04f 0800 	mov.w	r8, #0
 810c21a:	4b92      	ldr	r3, [pc, #584]	; (810c464 <_strtod_l+0xbfc>)
 810c21c:	403b      	ands	r3, r7
 810c21e:	9311      	str	r3, [sp, #68]	; 0x44
 810c220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810c222:	4b91      	ldr	r3, [pc, #580]	; (810c468 <_strtod_l+0xc00>)
 810c224:	429a      	cmp	r2, r3
 810c226:	f040 80b2 	bne.w	810c38e <_strtod_l+0xb26>
 810c22a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810c22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810c232:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810c236:	ec4b ab10 	vmov	d0, sl, fp
 810c23a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 810c23e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810c242:	f002 fa1b 	bl	810e67c <__ulp>
 810c246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810c24a:	ec53 2b10 	vmov	r2, r3, d0
 810c24e:	f7f4 fa6b 	bl	8100728 <__aeabi_dmul>
 810c252:	4652      	mov	r2, sl
 810c254:	465b      	mov	r3, fp
 810c256:	f7f4 f8b1 	bl	81003bc <__adddf3>
 810c25a:	460b      	mov	r3, r1
 810c25c:	4981      	ldr	r1, [pc, #516]	; (810c464 <_strtod_l+0xbfc>)
 810c25e:	4a83      	ldr	r2, [pc, #524]	; (810c46c <_strtod_l+0xc04>)
 810c260:	4019      	ands	r1, r3
 810c262:	4291      	cmp	r1, r2
 810c264:	4682      	mov	sl, r0
 810c266:	d95e      	bls.n	810c326 <_strtod_l+0xabe>
 810c268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c26a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810c26e:	4293      	cmp	r3, r2
 810c270:	d103      	bne.n	810c27a <_strtod_l+0xa12>
 810c272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c274:	3301      	adds	r3, #1
 810c276:	f43f ad43 	beq.w	810bd00 <_strtod_l+0x498>
 810c27a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 810c478 <_strtod_l+0xc10>
 810c27e:	f04f 3aff 	mov.w	sl, #4294967295
 810c282:	991e      	ldr	r1, [sp, #120]	; 0x78
 810c284:	4620      	mov	r0, r4
 810c286:	f001 fecd 	bl	810e024 <_Bfree>
 810c28a:	9907      	ldr	r1, [sp, #28]
 810c28c:	4620      	mov	r0, r4
 810c28e:	f001 fec9 	bl	810e024 <_Bfree>
 810c292:	4631      	mov	r1, r6
 810c294:	4620      	mov	r0, r4
 810c296:	f001 fec5 	bl	810e024 <_Bfree>
 810c29a:	4629      	mov	r1, r5
 810c29c:	4620      	mov	r0, r4
 810c29e:	f001 fec1 	bl	810e024 <_Bfree>
 810c2a2:	e613      	b.n	810becc <_strtod_l+0x664>
 810c2a4:	f1ba 0f00 	cmp.w	sl, #0
 810c2a8:	d11b      	bne.n	810c2e2 <_strtod_l+0xa7a>
 810c2aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c2ae:	b9f3      	cbnz	r3, 810c2ee <_strtod_l+0xa86>
 810c2b0:	4b6b      	ldr	r3, [pc, #428]	; (810c460 <_strtod_l+0xbf8>)
 810c2b2:	2200      	movs	r2, #0
 810c2b4:	4640      	mov	r0, r8
 810c2b6:	4649      	mov	r1, r9
 810c2b8:	f7f4 fca8 	bl	8100c0c <__aeabi_dcmplt>
 810c2bc:	b9d0      	cbnz	r0, 810c2f4 <_strtod_l+0xa8c>
 810c2be:	4640      	mov	r0, r8
 810c2c0:	4649      	mov	r1, r9
 810c2c2:	4b6b      	ldr	r3, [pc, #428]	; (810c470 <_strtod_l+0xc08>)
 810c2c4:	2200      	movs	r2, #0
 810c2c6:	f7f4 fa2f 	bl	8100728 <__aeabi_dmul>
 810c2ca:	4680      	mov	r8, r0
 810c2cc:	4689      	mov	r9, r1
 810c2ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c2d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 810c2d6:	931b      	str	r3, [sp, #108]	; 0x6c
 810c2d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 810c2dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810c2e0:	e79b      	b.n	810c21a <_strtod_l+0x9b2>
 810c2e2:	f1ba 0f01 	cmp.w	sl, #1
 810c2e6:	d102      	bne.n	810c2ee <_strtod_l+0xa86>
 810c2e8:	2f00      	cmp	r7, #0
 810c2ea:	f43f ad7e 	beq.w	810bdea <_strtod_l+0x582>
 810c2ee:	4b61      	ldr	r3, [pc, #388]	; (810c474 <_strtod_l+0xc0c>)
 810c2f0:	2200      	movs	r2, #0
 810c2f2:	e78c      	b.n	810c20e <_strtod_l+0x9a6>
 810c2f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810c470 <_strtod_l+0xc08>
 810c2f8:	f04f 0800 	mov.w	r8, #0
 810c2fc:	e7e7      	b.n	810c2ce <_strtod_l+0xa66>
 810c2fe:	4b5c      	ldr	r3, [pc, #368]	; (810c470 <_strtod_l+0xc08>)
 810c300:	4640      	mov	r0, r8
 810c302:	4649      	mov	r1, r9
 810c304:	2200      	movs	r2, #0
 810c306:	f7f4 fa0f 	bl	8100728 <__aeabi_dmul>
 810c30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c30c:	4680      	mov	r8, r0
 810c30e:	4689      	mov	r9, r1
 810c310:	b933      	cbnz	r3, 810c320 <_strtod_l+0xab8>
 810c312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c316:	9012      	str	r0, [sp, #72]	; 0x48
 810c318:	9313      	str	r3, [sp, #76]	; 0x4c
 810c31a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 810c31e:	e7dd      	b.n	810c2dc <_strtod_l+0xa74>
 810c320:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 810c324:	e7f9      	b.n	810c31a <_strtod_l+0xab2>
 810c326:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810c32a:	9b04      	ldr	r3, [sp, #16]
 810c32c:	2b00      	cmp	r3, #0
 810c32e:	d1a8      	bne.n	810c282 <_strtod_l+0xa1a>
 810c330:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c334:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810c336:	0d1b      	lsrs	r3, r3, #20
 810c338:	051b      	lsls	r3, r3, #20
 810c33a:	429a      	cmp	r2, r3
 810c33c:	d1a1      	bne.n	810c282 <_strtod_l+0xa1a>
 810c33e:	4640      	mov	r0, r8
 810c340:	4649      	mov	r1, r9
 810c342:	f7f4 fd39 	bl	8100db8 <__aeabi_d2lz>
 810c346:	f7f4 f9c1 	bl	81006cc <__aeabi_l2d>
 810c34a:	4602      	mov	r2, r0
 810c34c:	460b      	mov	r3, r1
 810c34e:	4640      	mov	r0, r8
 810c350:	4649      	mov	r1, r9
 810c352:	f7f4 f831 	bl	81003b8 <__aeabi_dsub>
 810c356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c358:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c35c:	ea43 030a 	orr.w	r3, r3, sl
 810c360:	4313      	orrs	r3, r2
 810c362:	4680      	mov	r8, r0
 810c364:	4689      	mov	r9, r1
 810c366:	d053      	beq.n	810c410 <_strtod_l+0xba8>
 810c368:	a335      	add	r3, pc, #212	; (adr r3, 810c440 <_strtod_l+0xbd8>)
 810c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c36e:	f7f4 fc4d 	bl	8100c0c <__aeabi_dcmplt>
 810c372:	2800      	cmp	r0, #0
 810c374:	f47f acce 	bne.w	810bd14 <_strtod_l+0x4ac>
 810c378:	a333      	add	r3, pc, #204	; (adr r3, 810c448 <_strtod_l+0xbe0>)
 810c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c37e:	4640      	mov	r0, r8
 810c380:	4649      	mov	r1, r9
 810c382:	f7f4 fc61 	bl	8100c48 <__aeabi_dcmpgt>
 810c386:	2800      	cmp	r0, #0
 810c388:	f43f af7b 	beq.w	810c282 <_strtod_l+0xa1a>
 810c38c:	e4c2      	b.n	810bd14 <_strtod_l+0x4ac>
 810c38e:	9b04      	ldr	r3, [sp, #16]
 810c390:	b333      	cbz	r3, 810c3e0 <_strtod_l+0xb78>
 810c392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810c394:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c398:	d822      	bhi.n	810c3e0 <_strtod_l+0xb78>
 810c39a:	a32d      	add	r3, pc, #180	; (adr r3, 810c450 <_strtod_l+0xbe8>)
 810c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c3a0:	4640      	mov	r0, r8
 810c3a2:	4649      	mov	r1, r9
 810c3a4:	f7f4 fc3c 	bl	8100c20 <__aeabi_dcmple>
 810c3a8:	b1a0      	cbz	r0, 810c3d4 <_strtod_l+0xb6c>
 810c3aa:	4649      	mov	r1, r9
 810c3ac:	4640      	mov	r0, r8
 810c3ae:	f7f4 fc93 	bl	8100cd8 <__aeabi_d2uiz>
 810c3b2:	2801      	cmp	r0, #1
 810c3b4:	bf38      	it	cc
 810c3b6:	2001      	movcc	r0, #1
 810c3b8:	f7f4 f93c 	bl	8100634 <__aeabi_ui2d>
 810c3bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c3be:	4680      	mov	r8, r0
 810c3c0:	4689      	mov	r9, r1
 810c3c2:	bb13      	cbnz	r3, 810c40a <_strtod_l+0xba2>
 810c3c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c3c8:	9014      	str	r0, [sp, #80]	; 0x50
 810c3ca:	9315      	str	r3, [sp, #84]	; 0x54
 810c3cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810c3d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810c3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c3d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810c3d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810c3dc:	1a9b      	subs	r3, r3, r2
 810c3de:	930d      	str	r3, [sp, #52]	; 0x34
 810c3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810c3e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810c3e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810c3ec:	f002 f946 	bl	810e67c <__ulp>
 810c3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810c3f4:	ec53 2b10 	vmov	r2, r3, d0
 810c3f8:	f7f4 f996 	bl	8100728 <__aeabi_dmul>
 810c3fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810c400:	f7f3 ffdc 	bl	81003bc <__adddf3>
 810c404:	4682      	mov	sl, r0
 810c406:	468b      	mov	fp, r1
 810c408:	e78f      	b.n	810c32a <_strtod_l+0xac2>
 810c40a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 810c40e:	e7dd      	b.n	810c3cc <_strtod_l+0xb64>
 810c410:	a311      	add	r3, pc, #68	; (adr r3, 810c458 <_strtod_l+0xbf0>)
 810c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c416:	f7f4 fbf9 	bl	8100c0c <__aeabi_dcmplt>
 810c41a:	e7b4      	b.n	810c386 <_strtod_l+0xb1e>
 810c41c:	2300      	movs	r3, #0
 810c41e:	930e      	str	r3, [sp, #56]	; 0x38
 810c420:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810c422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810c424:	6013      	str	r3, [r2, #0]
 810c426:	f7ff ba65 	b.w	810b8f4 <_strtod_l+0x8c>
 810c42a:	2b65      	cmp	r3, #101	; 0x65
 810c42c:	f43f ab5d 	beq.w	810baea <_strtod_l+0x282>
 810c430:	2b45      	cmp	r3, #69	; 0x45
 810c432:	f43f ab5a 	beq.w	810baea <_strtod_l+0x282>
 810c436:	2201      	movs	r2, #1
 810c438:	f7ff bb92 	b.w	810bb60 <_strtod_l+0x2f8>
 810c43c:	f3af 8000 	nop.w
 810c440:	94a03595 	.word	0x94a03595
 810c444:	3fdfffff 	.word	0x3fdfffff
 810c448:	35afe535 	.word	0x35afe535
 810c44c:	3fe00000 	.word	0x3fe00000
 810c450:	ffc00000 	.word	0xffc00000
 810c454:	41dfffff 	.word	0x41dfffff
 810c458:	94a03595 	.word	0x94a03595
 810c45c:	3fcfffff 	.word	0x3fcfffff
 810c460:	3ff00000 	.word	0x3ff00000
 810c464:	7ff00000 	.word	0x7ff00000
 810c468:	7fe00000 	.word	0x7fe00000
 810c46c:	7c9fffff 	.word	0x7c9fffff
 810c470:	3fe00000 	.word	0x3fe00000
 810c474:	bff00000 	.word	0xbff00000
 810c478:	7fefffff 	.word	0x7fefffff

0810c47c <_strtod_r>:
 810c47c:	4b01      	ldr	r3, [pc, #4]	; (810c484 <_strtod_r+0x8>)
 810c47e:	f7ff b9f3 	b.w	810b868 <_strtod_l>
 810c482:	bf00      	nop
 810c484:	10000124 	.word	0x10000124

0810c488 <_strtol_l.isra.0>:
 810c488:	2b01      	cmp	r3, #1
 810c48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c48e:	d001      	beq.n	810c494 <_strtol_l.isra.0+0xc>
 810c490:	2b24      	cmp	r3, #36	; 0x24
 810c492:	d906      	bls.n	810c4a2 <_strtol_l.isra.0+0x1a>
 810c494:	f7fe f88e 	bl	810a5b4 <__errno>
 810c498:	2316      	movs	r3, #22
 810c49a:	6003      	str	r3, [r0, #0]
 810c49c:	2000      	movs	r0, #0
 810c49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c4a2:	4f3a      	ldr	r7, [pc, #232]	; (810c58c <_strtol_l.isra.0+0x104>)
 810c4a4:	468e      	mov	lr, r1
 810c4a6:	4676      	mov	r6, lr
 810c4a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810c4ac:	5de5      	ldrb	r5, [r4, r7]
 810c4ae:	f015 0508 	ands.w	r5, r5, #8
 810c4b2:	d1f8      	bne.n	810c4a6 <_strtol_l.isra.0+0x1e>
 810c4b4:	2c2d      	cmp	r4, #45	; 0x2d
 810c4b6:	d134      	bne.n	810c522 <_strtol_l.isra.0+0x9a>
 810c4b8:	f89e 4000 	ldrb.w	r4, [lr]
 810c4bc:	f04f 0801 	mov.w	r8, #1
 810c4c0:	f106 0e02 	add.w	lr, r6, #2
 810c4c4:	2b00      	cmp	r3, #0
 810c4c6:	d05c      	beq.n	810c582 <_strtol_l.isra.0+0xfa>
 810c4c8:	2b10      	cmp	r3, #16
 810c4ca:	d10c      	bne.n	810c4e6 <_strtol_l.isra.0+0x5e>
 810c4cc:	2c30      	cmp	r4, #48	; 0x30
 810c4ce:	d10a      	bne.n	810c4e6 <_strtol_l.isra.0+0x5e>
 810c4d0:	f89e 4000 	ldrb.w	r4, [lr]
 810c4d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810c4d8:	2c58      	cmp	r4, #88	; 0x58
 810c4da:	d14d      	bne.n	810c578 <_strtol_l.isra.0+0xf0>
 810c4dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 810c4e0:	2310      	movs	r3, #16
 810c4e2:	f10e 0e02 	add.w	lr, lr, #2
 810c4e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 810c4ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 810c4ee:	2600      	movs	r6, #0
 810c4f0:	fbbc f9f3 	udiv	r9, ip, r3
 810c4f4:	4635      	mov	r5, r6
 810c4f6:	fb03 ca19 	mls	sl, r3, r9, ip
 810c4fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 810c4fe:	2f09      	cmp	r7, #9
 810c500:	d818      	bhi.n	810c534 <_strtol_l.isra.0+0xac>
 810c502:	463c      	mov	r4, r7
 810c504:	42a3      	cmp	r3, r4
 810c506:	dd24      	ble.n	810c552 <_strtol_l.isra.0+0xca>
 810c508:	2e00      	cmp	r6, #0
 810c50a:	db1f      	blt.n	810c54c <_strtol_l.isra.0+0xc4>
 810c50c:	45a9      	cmp	r9, r5
 810c50e:	d31d      	bcc.n	810c54c <_strtol_l.isra.0+0xc4>
 810c510:	d101      	bne.n	810c516 <_strtol_l.isra.0+0x8e>
 810c512:	45a2      	cmp	sl, r4
 810c514:	db1a      	blt.n	810c54c <_strtol_l.isra.0+0xc4>
 810c516:	fb05 4503 	mla	r5, r5, r3, r4
 810c51a:	2601      	movs	r6, #1
 810c51c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 810c520:	e7eb      	b.n	810c4fa <_strtol_l.isra.0+0x72>
 810c522:	2c2b      	cmp	r4, #43	; 0x2b
 810c524:	bf08      	it	eq
 810c526:	f89e 4000 	ldrbeq.w	r4, [lr]
 810c52a:	46a8      	mov	r8, r5
 810c52c:	bf08      	it	eq
 810c52e:	f106 0e02 	addeq.w	lr, r6, #2
 810c532:	e7c7      	b.n	810c4c4 <_strtol_l.isra.0+0x3c>
 810c534:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 810c538:	2f19      	cmp	r7, #25
 810c53a:	d801      	bhi.n	810c540 <_strtol_l.isra.0+0xb8>
 810c53c:	3c37      	subs	r4, #55	; 0x37
 810c53e:	e7e1      	b.n	810c504 <_strtol_l.isra.0+0x7c>
 810c540:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 810c544:	2f19      	cmp	r7, #25
 810c546:	d804      	bhi.n	810c552 <_strtol_l.isra.0+0xca>
 810c548:	3c57      	subs	r4, #87	; 0x57
 810c54a:	e7db      	b.n	810c504 <_strtol_l.isra.0+0x7c>
 810c54c:	f04f 36ff 	mov.w	r6, #4294967295
 810c550:	e7e4      	b.n	810c51c <_strtol_l.isra.0+0x94>
 810c552:	2e00      	cmp	r6, #0
 810c554:	da05      	bge.n	810c562 <_strtol_l.isra.0+0xda>
 810c556:	2322      	movs	r3, #34	; 0x22
 810c558:	6003      	str	r3, [r0, #0]
 810c55a:	4665      	mov	r5, ip
 810c55c:	b942      	cbnz	r2, 810c570 <_strtol_l.isra.0+0xe8>
 810c55e:	4628      	mov	r0, r5
 810c560:	e79d      	b.n	810c49e <_strtol_l.isra.0+0x16>
 810c562:	f1b8 0f00 	cmp.w	r8, #0
 810c566:	d000      	beq.n	810c56a <_strtol_l.isra.0+0xe2>
 810c568:	426d      	negs	r5, r5
 810c56a:	2a00      	cmp	r2, #0
 810c56c:	d0f7      	beq.n	810c55e <_strtol_l.isra.0+0xd6>
 810c56e:	b10e      	cbz	r6, 810c574 <_strtol_l.isra.0+0xec>
 810c570:	f10e 31ff 	add.w	r1, lr, #4294967295
 810c574:	6011      	str	r1, [r2, #0]
 810c576:	e7f2      	b.n	810c55e <_strtol_l.isra.0+0xd6>
 810c578:	2430      	movs	r4, #48	; 0x30
 810c57a:	2b00      	cmp	r3, #0
 810c57c:	d1b3      	bne.n	810c4e6 <_strtol_l.isra.0+0x5e>
 810c57e:	2308      	movs	r3, #8
 810c580:	e7b1      	b.n	810c4e6 <_strtol_l.isra.0+0x5e>
 810c582:	2c30      	cmp	r4, #48	; 0x30
 810c584:	d0a4      	beq.n	810c4d0 <_strtol_l.isra.0+0x48>
 810c586:	230a      	movs	r3, #10
 810c588:	e7ad      	b.n	810c4e6 <_strtol_l.isra.0+0x5e>
 810c58a:	bf00      	nop
 810c58c:	0810f219 	.word	0x0810f219

0810c590 <_strtol_r>:
 810c590:	f7ff bf7a 	b.w	810c488 <_strtol_l.isra.0>

0810c594 <__swbuf_r>:
 810c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c596:	460e      	mov	r6, r1
 810c598:	4614      	mov	r4, r2
 810c59a:	4605      	mov	r5, r0
 810c59c:	b118      	cbz	r0, 810c5a6 <__swbuf_r+0x12>
 810c59e:	6983      	ldr	r3, [r0, #24]
 810c5a0:	b90b      	cbnz	r3, 810c5a6 <__swbuf_r+0x12>
 810c5a2:	f001 f84f 	bl	810d644 <__sinit>
 810c5a6:	4b21      	ldr	r3, [pc, #132]	; (810c62c <__swbuf_r+0x98>)
 810c5a8:	429c      	cmp	r4, r3
 810c5aa:	d12b      	bne.n	810c604 <__swbuf_r+0x70>
 810c5ac:	686c      	ldr	r4, [r5, #4]
 810c5ae:	69a3      	ldr	r3, [r4, #24]
 810c5b0:	60a3      	str	r3, [r4, #8]
 810c5b2:	89a3      	ldrh	r3, [r4, #12]
 810c5b4:	071a      	lsls	r2, r3, #28
 810c5b6:	d52f      	bpl.n	810c618 <__swbuf_r+0x84>
 810c5b8:	6923      	ldr	r3, [r4, #16]
 810c5ba:	b36b      	cbz	r3, 810c618 <__swbuf_r+0x84>
 810c5bc:	6923      	ldr	r3, [r4, #16]
 810c5be:	6820      	ldr	r0, [r4, #0]
 810c5c0:	1ac0      	subs	r0, r0, r3
 810c5c2:	6963      	ldr	r3, [r4, #20]
 810c5c4:	b2f6      	uxtb	r6, r6
 810c5c6:	4283      	cmp	r3, r0
 810c5c8:	4637      	mov	r7, r6
 810c5ca:	dc04      	bgt.n	810c5d6 <__swbuf_r+0x42>
 810c5cc:	4621      	mov	r1, r4
 810c5ce:	4628      	mov	r0, r5
 810c5d0:	f000 ffa4 	bl	810d51c <_fflush_r>
 810c5d4:	bb30      	cbnz	r0, 810c624 <__swbuf_r+0x90>
 810c5d6:	68a3      	ldr	r3, [r4, #8]
 810c5d8:	3b01      	subs	r3, #1
 810c5da:	60a3      	str	r3, [r4, #8]
 810c5dc:	6823      	ldr	r3, [r4, #0]
 810c5de:	1c5a      	adds	r2, r3, #1
 810c5e0:	6022      	str	r2, [r4, #0]
 810c5e2:	701e      	strb	r6, [r3, #0]
 810c5e4:	6963      	ldr	r3, [r4, #20]
 810c5e6:	3001      	adds	r0, #1
 810c5e8:	4283      	cmp	r3, r0
 810c5ea:	d004      	beq.n	810c5f6 <__swbuf_r+0x62>
 810c5ec:	89a3      	ldrh	r3, [r4, #12]
 810c5ee:	07db      	lsls	r3, r3, #31
 810c5f0:	d506      	bpl.n	810c600 <__swbuf_r+0x6c>
 810c5f2:	2e0a      	cmp	r6, #10
 810c5f4:	d104      	bne.n	810c600 <__swbuf_r+0x6c>
 810c5f6:	4621      	mov	r1, r4
 810c5f8:	4628      	mov	r0, r5
 810c5fa:	f000 ff8f 	bl	810d51c <_fflush_r>
 810c5fe:	b988      	cbnz	r0, 810c624 <__swbuf_r+0x90>
 810c600:	4638      	mov	r0, r7
 810c602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c604:	4b0a      	ldr	r3, [pc, #40]	; (810c630 <__swbuf_r+0x9c>)
 810c606:	429c      	cmp	r4, r3
 810c608:	d101      	bne.n	810c60e <__swbuf_r+0x7a>
 810c60a:	68ac      	ldr	r4, [r5, #8]
 810c60c:	e7cf      	b.n	810c5ae <__swbuf_r+0x1a>
 810c60e:	4b09      	ldr	r3, [pc, #36]	; (810c634 <__swbuf_r+0xa0>)
 810c610:	429c      	cmp	r4, r3
 810c612:	bf08      	it	eq
 810c614:	68ec      	ldreq	r4, [r5, #12]
 810c616:	e7ca      	b.n	810c5ae <__swbuf_r+0x1a>
 810c618:	4621      	mov	r1, r4
 810c61a:	4628      	mov	r0, r5
 810c61c:	f000 f80c 	bl	810c638 <__swsetup_r>
 810c620:	2800      	cmp	r0, #0
 810c622:	d0cb      	beq.n	810c5bc <__swbuf_r+0x28>
 810c624:	f04f 37ff 	mov.w	r7, #4294967295
 810c628:	e7ea      	b.n	810c600 <__swbuf_r+0x6c>
 810c62a:	bf00      	nop
 810c62c:	0810f3d0 	.word	0x0810f3d0
 810c630:	0810f3f0 	.word	0x0810f3f0
 810c634:	0810f3b0 	.word	0x0810f3b0

0810c638 <__swsetup_r>:
 810c638:	4b32      	ldr	r3, [pc, #200]	; (810c704 <__swsetup_r+0xcc>)
 810c63a:	b570      	push	{r4, r5, r6, lr}
 810c63c:	681d      	ldr	r5, [r3, #0]
 810c63e:	4606      	mov	r6, r0
 810c640:	460c      	mov	r4, r1
 810c642:	b125      	cbz	r5, 810c64e <__swsetup_r+0x16>
 810c644:	69ab      	ldr	r3, [r5, #24]
 810c646:	b913      	cbnz	r3, 810c64e <__swsetup_r+0x16>
 810c648:	4628      	mov	r0, r5
 810c64a:	f000 fffb 	bl	810d644 <__sinit>
 810c64e:	4b2e      	ldr	r3, [pc, #184]	; (810c708 <__swsetup_r+0xd0>)
 810c650:	429c      	cmp	r4, r3
 810c652:	d10f      	bne.n	810c674 <__swsetup_r+0x3c>
 810c654:	686c      	ldr	r4, [r5, #4]
 810c656:	89a3      	ldrh	r3, [r4, #12]
 810c658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810c65c:	0719      	lsls	r1, r3, #28
 810c65e:	d42c      	bmi.n	810c6ba <__swsetup_r+0x82>
 810c660:	06dd      	lsls	r5, r3, #27
 810c662:	d411      	bmi.n	810c688 <__swsetup_r+0x50>
 810c664:	2309      	movs	r3, #9
 810c666:	6033      	str	r3, [r6, #0]
 810c668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810c66c:	81a3      	strh	r3, [r4, #12]
 810c66e:	f04f 30ff 	mov.w	r0, #4294967295
 810c672:	e03e      	b.n	810c6f2 <__swsetup_r+0xba>
 810c674:	4b25      	ldr	r3, [pc, #148]	; (810c70c <__swsetup_r+0xd4>)
 810c676:	429c      	cmp	r4, r3
 810c678:	d101      	bne.n	810c67e <__swsetup_r+0x46>
 810c67a:	68ac      	ldr	r4, [r5, #8]
 810c67c:	e7eb      	b.n	810c656 <__swsetup_r+0x1e>
 810c67e:	4b24      	ldr	r3, [pc, #144]	; (810c710 <__swsetup_r+0xd8>)
 810c680:	429c      	cmp	r4, r3
 810c682:	bf08      	it	eq
 810c684:	68ec      	ldreq	r4, [r5, #12]
 810c686:	e7e6      	b.n	810c656 <__swsetup_r+0x1e>
 810c688:	0758      	lsls	r0, r3, #29
 810c68a:	d512      	bpl.n	810c6b2 <__swsetup_r+0x7a>
 810c68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c68e:	b141      	cbz	r1, 810c6a2 <__swsetup_r+0x6a>
 810c690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c694:	4299      	cmp	r1, r3
 810c696:	d002      	beq.n	810c69e <__swsetup_r+0x66>
 810c698:	4630      	mov	r0, r6
 810c69a:	f7fd ffed 	bl	810a678 <_free_r>
 810c69e:	2300      	movs	r3, #0
 810c6a0:	6363      	str	r3, [r4, #52]	; 0x34
 810c6a2:	89a3      	ldrh	r3, [r4, #12]
 810c6a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810c6a8:	81a3      	strh	r3, [r4, #12]
 810c6aa:	2300      	movs	r3, #0
 810c6ac:	6063      	str	r3, [r4, #4]
 810c6ae:	6923      	ldr	r3, [r4, #16]
 810c6b0:	6023      	str	r3, [r4, #0]
 810c6b2:	89a3      	ldrh	r3, [r4, #12]
 810c6b4:	f043 0308 	orr.w	r3, r3, #8
 810c6b8:	81a3      	strh	r3, [r4, #12]
 810c6ba:	6923      	ldr	r3, [r4, #16]
 810c6bc:	b94b      	cbnz	r3, 810c6d2 <__swsetup_r+0x9a>
 810c6be:	89a3      	ldrh	r3, [r4, #12]
 810c6c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810c6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810c6c8:	d003      	beq.n	810c6d2 <__swsetup_r+0x9a>
 810c6ca:	4621      	mov	r1, r4
 810c6cc:	4630      	mov	r0, r6
 810c6ce:	f001 fbf1 	bl	810deb4 <__smakebuf_r>
 810c6d2:	89a0      	ldrh	r0, [r4, #12]
 810c6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810c6d8:	f010 0301 	ands.w	r3, r0, #1
 810c6dc:	d00a      	beq.n	810c6f4 <__swsetup_r+0xbc>
 810c6de:	2300      	movs	r3, #0
 810c6e0:	60a3      	str	r3, [r4, #8]
 810c6e2:	6963      	ldr	r3, [r4, #20]
 810c6e4:	425b      	negs	r3, r3
 810c6e6:	61a3      	str	r3, [r4, #24]
 810c6e8:	6923      	ldr	r3, [r4, #16]
 810c6ea:	b943      	cbnz	r3, 810c6fe <__swsetup_r+0xc6>
 810c6ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810c6f0:	d1ba      	bne.n	810c668 <__swsetup_r+0x30>
 810c6f2:	bd70      	pop	{r4, r5, r6, pc}
 810c6f4:	0781      	lsls	r1, r0, #30
 810c6f6:	bf58      	it	pl
 810c6f8:	6963      	ldrpl	r3, [r4, #20]
 810c6fa:	60a3      	str	r3, [r4, #8]
 810c6fc:	e7f4      	b.n	810c6e8 <__swsetup_r+0xb0>
 810c6fe:	2000      	movs	r0, #0
 810c700:	e7f7      	b.n	810c6f2 <__swsetup_r+0xba>
 810c702:	bf00      	nop
 810c704:	100000bc 	.word	0x100000bc
 810c708:	0810f3d0 	.word	0x0810f3d0
 810c70c:	0810f3f0 	.word	0x0810f3f0
 810c710:	0810f3b0 	.word	0x0810f3b0

0810c714 <abort>:
 810c714:	b508      	push	{r3, lr}
 810c716:	2006      	movs	r0, #6
 810c718:	f002 fab8 	bl	810ec8c <raise>
 810c71c:	2001      	movs	r0, #1
 810c71e:	f7f5 f84f 	bl	81017c0 <_exit>

0810c722 <quorem>:
 810c722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c726:	6903      	ldr	r3, [r0, #16]
 810c728:	690c      	ldr	r4, [r1, #16]
 810c72a:	42a3      	cmp	r3, r4
 810c72c:	4607      	mov	r7, r0
 810c72e:	f2c0 8081 	blt.w	810c834 <quorem+0x112>
 810c732:	3c01      	subs	r4, #1
 810c734:	f101 0814 	add.w	r8, r1, #20
 810c738:	f100 0514 	add.w	r5, r0, #20
 810c73c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810c740:	9301      	str	r3, [sp, #4]
 810c742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810c746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810c74a:	3301      	adds	r3, #1
 810c74c:	429a      	cmp	r2, r3
 810c74e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810c752:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810c756:	fbb2 f6f3 	udiv	r6, r2, r3
 810c75a:	d331      	bcc.n	810c7c0 <quorem+0x9e>
 810c75c:	f04f 0e00 	mov.w	lr, #0
 810c760:	4640      	mov	r0, r8
 810c762:	46ac      	mov	ip, r5
 810c764:	46f2      	mov	sl, lr
 810c766:	f850 2b04 	ldr.w	r2, [r0], #4
 810c76a:	b293      	uxth	r3, r2
 810c76c:	fb06 e303 	mla	r3, r6, r3, lr
 810c770:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810c774:	b29b      	uxth	r3, r3
 810c776:	ebaa 0303 	sub.w	r3, sl, r3
 810c77a:	0c12      	lsrs	r2, r2, #16
 810c77c:	f8dc a000 	ldr.w	sl, [ip]
 810c780:	fb06 e202 	mla	r2, r6, r2, lr
 810c784:	fa13 f38a 	uxtah	r3, r3, sl
 810c788:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810c78c:	fa1f fa82 	uxth.w	sl, r2
 810c790:	f8dc 2000 	ldr.w	r2, [ip]
 810c794:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 810c798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810c79c:	b29b      	uxth	r3, r3
 810c79e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c7a2:	4581      	cmp	r9, r0
 810c7a4:	f84c 3b04 	str.w	r3, [ip], #4
 810c7a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810c7ac:	d2db      	bcs.n	810c766 <quorem+0x44>
 810c7ae:	f855 300b 	ldr.w	r3, [r5, fp]
 810c7b2:	b92b      	cbnz	r3, 810c7c0 <quorem+0x9e>
 810c7b4:	9b01      	ldr	r3, [sp, #4]
 810c7b6:	3b04      	subs	r3, #4
 810c7b8:	429d      	cmp	r5, r3
 810c7ba:	461a      	mov	r2, r3
 810c7bc:	d32e      	bcc.n	810c81c <quorem+0xfa>
 810c7be:	613c      	str	r4, [r7, #16]
 810c7c0:	4638      	mov	r0, r7
 810c7c2:	f001 feb7 	bl	810e534 <__mcmp>
 810c7c6:	2800      	cmp	r0, #0
 810c7c8:	db24      	blt.n	810c814 <quorem+0xf2>
 810c7ca:	3601      	adds	r6, #1
 810c7cc:	4628      	mov	r0, r5
 810c7ce:	f04f 0c00 	mov.w	ip, #0
 810c7d2:	f858 2b04 	ldr.w	r2, [r8], #4
 810c7d6:	f8d0 e000 	ldr.w	lr, [r0]
 810c7da:	b293      	uxth	r3, r2
 810c7dc:	ebac 0303 	sub.w	r3, ip, r3
 810c7e0:	0c12      	lsrs	r2, r2, #16
 810c7e2:	fa13 f38e 	uxtah	r3, r3, lr
 810c7e6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810c7ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810c7ee:	b29b      	uxth	r3, r3
 810c7f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c7f4:	45c1      	cmp	r9, r8
 810c7f6:	f840 3b04 	str.w	r3, [r0], #4
 810c7fa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810c7fe:	d2e8      	bcs.n	810c7d2 <quorem+0xb0>
 810c800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810c804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810c808:	b922      	cbnz	r2, 810c814 <quorem+0xf2>
 810c80a:	3b04      	subs	r3, #4
 810c80c:	429d      	cmp	r5, r3
 810c80e:	461a      	mov	r2, r3
 810c810:	d30a      	bcc.n	810c828 <quorem+0x106>
 810c812:	613c      	str	r4, [r7, #16]
 810c814:	4630      	mov	r0, r6
 810c816:	b003      	add	sp, #12
 810c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c81c:	6812      	ldr	r2, [r2, #0]
 810c81e:	3b04      	subs	r3, #4
 810c820:	2a00      	cmp	r2, #0
 810c822:	d1cc      	bne.n	810c7be <quorem+0x9c>
 810c824:	3c01      	subs	r4, #1
 810c826:	e7c7      	b.n	810c7b8 <quorem+0x96>
 810c828:	6812      	ldr	r2, [r2, #0]
 810c82a:	3b04      	subs	r3, #4
 810c82c:	2a00      	cmp	r2, #0
 810c82e:	d1f0      	bne.n	810c812 <quorem+0xf0>
 810c830:	3c01      	subs	r4, #1
 810c832:	e7eb      	b.n	810c80c <quorem+0xea>
 810c834:	2000      	movs	r0, #0
 810c836:	e7ee      	b.n	810c816 <quorem+0xf4>

0810c838 <_dtoa_r>:
 810c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c83c:	ed2d 8b02 	vpush	{d8}
 810c840:	ec57 6b10 	vmov	r6, r7, d0
 810c844:	b095      	sub	sp, #84	; 0x54
 810c846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810c848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810c84c:	9105      	str	r1, [sp, #20]
 810c84e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 810c852:	4604      	mov	r4, r0
 810c854:	9209      	str	r2, [sp, #36]	; 0x24
 810c856:	930f      	str	r3, [sp, #60]	; 0x3c
 810c858:	b975      	cbnz	r5, 810c878 <_dtoa_r+0x40>
 810c85a:	2010      	movs	r0, #16
 810c85c:	f7fd fee6 	bl	810a62c <malloc>
 810c860:	4602      	mov	r2, r0
 810c862:	6260      	str	r0, [r4, #36]	; 0x24
 810c864:	b920      	cbnz	r0, 810c870 <_dtoa_r+0x38>
 810c866:	4bb2      	ldr	r3, [pc, #712]	; (810cb30 <_dtoa_r+0x2f8>)
 810c868:	21ea      	movs	r1, #234	; 0xea
 810c86a:	48b2      	ldr	r0, [pc, #712]	; (810cb34 <_dtoa_r+0x2fc>)
 810c86c:	f7fd fe84 	bl	810a578 <__assert_func>
 810c870:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810c874:	6005      	str	r5, [r0, #0]
 810c876:	60c5      	str	r5, [r0, #12]
 810c878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c87a:	6819      	ldr	r1, [r3, #0]
 810c87c:	b151      	cbz	r1, 810c894 <_dtoa_r+0x5c>
 810c87e:	685a      	ldr	r2, [r3, #4]
 810c880:	604a      	str	r2, [r1, #4]
 810c882:	2301      	movs	r3, #1
 810c884:	4093      	lsls	r3, r2
 810c886:	608b      	str	r3, [r1, #8]
 810c888:	4620      	mov	r0, r4
 810c88a:	f001 fbcb 	bl	810e024 <_Bfree>
 810c88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c890:	2200      	movs	r2, #0
 810c892:	601a      	str	r2, [r3, #0]
 810c894:	1e3b      	subs	r3, r7, #0
 810c896:	bfb9      	ittee	lt
 810c898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810c89c:	9303      	strlt	r3, [sp, #12]
 810c89e:	2300      	movge	r3, #0
 810c8a0:	f8c8 3000 	strge.w	r3, [r8]
 810c8a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810c8a8:	4ba3      	ldr	r3, [pc, #652]	; (810cb38 <_dtoa_r+0x300>)
 810c8aa:	bfbc      	itt	lt
 810c8ac:	2201      	movlt	r2, #1
 810c8ae:	f8c8 2000 	strlt.w	r2, [r8]
 810c8b2:	ea33 0309 	bics.w	r3, r3, r9
 810c8b6:	d11b      	bne.n	810c8f0 <_dtoa_r+0xb8>
 810c8b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c8ba:	f242 730f 	movw	r3, #9999	; 0x270f
 810c8be:	6013      	str	r3, [r2, #0]
 810c8c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c8c4:	4333      	orrs	r3, r6
 810c8c6:	f000 857a 	beq.w	810d3be <_dtoa_r+0xb86>
 810c8ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c8cc:	b963      	cbnz	r3, 810c8e8 <_dtoa_r+0xb0>
 810c8ce:	4b9b      	ldr	r3, [pc, #620]	; (810cb3c <_dtoa_r+0x304>)
 810c8d0:	e024      	b.n	810c91c <_dtoa_r+0xe4>
 810c8d2:	4b9b      	ldr	r3, [pc, #620]	; (810cb40 <_dtoa_r+0x308>)
 810c8d4:	9300      	str	r3, [sp, #0]
 810c8d6:	3308      	adds	r3, #8
 810c8d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810c8da:	6013      	str	r3, [r2, #0]
 810c8dc:	9800      	ldr	r0, [sp, #0]
 810c8de:	b015      	add	sp, #84	; 0x54
 810c8e0:	ecbd 8b02 	vpop	{d8}
 810c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c8e8:	4b94      	ldr	r3, [pc, #592]	; (810cb3c <_dtoa_r+0x304>)
 810c8ea:	9300      	str	r3, [sp, #0]
 810c8ec:	3303      	adds	r3, #3
 810c8ee:	e7f3      	b.n	810c8d8 <_dtoa_r+0xa0>
 810c8f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 810c8f4:	2200      	movs	r2, #0
 810c8f6:	ec51 0b17 	vmov	r0, r1, d7
 810c8fa:	2300      	movs	r3, #0
 810c8fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 810c900:	f7f4 f97a 	bl	8100bf8 <__aeabi_dcmpeq>
 810c904:	4680      	mov	r8, r0
 810c906:	b158      	cbz	r0, 810c920 <_dtoa_r+0xe8>
 810c908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810c90a:	2301      	movs	r3, #1
 810c90c:	6013      	str	r3, [r2, #0]
 810c90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c910:	2b00      	cmp	r3, #0
 810c912:	f000 8551 	beq.w	810d3b8 <_dtoa_r+0xb80>
 810c916:	488b      	ldr	r0, [pc, #556]	; (810cb44 <_dtoa_r+0x30c>)
 810c918:	6018      	str	r0, [r3, #0]
 810c91a:	1e43      	subs	r3, r0, #1
 810c91c:	9300      	str	r3, [sp, #0]
 810c91e:	e7dd      	b.n	810c8dc <_dtoa_r+0xa4>
 810c920:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810c924:	aa12      	add	r2, sp, #72	; 0x48
 810c926:	a913      	add	r1, sp, #76	; 0x4c
 810c928:	4620      	mov	r0, r4
 810c92a:	f001 ff23 	bl	810e774 <__d2b>
 810c92e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c932:	4683      	mov	fp, r0
 810c934:	2d00      	cmp	r5, #0
 810c936:	d07c      	beq.n	810ca32 <_dtoa_r+0x1fa>
 810c938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c93a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 810c93e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810c942:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 810c946:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810c94a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810c94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810c952:	4b7d      	ldr	r3, [pc, #500]	; (810cb48 <_dtoa_r+0x310>)
 810c954:	2200      	movs	r2, #0
 810c956:	4630      	mov	r0, r6
 810c958:	4639      	mov	r1, r7
 810c95a:	f7f3 fd2d 	bl	81003b8 <__aeabi_dsub>
 810c95e:	a36e      	add	r3, pc, #440	; (adr r3, 810cb18 <_dtoa_r+0x2e0>)
 810c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c964:	f7f3 fee0 	bl	8100728 <__aeabi_dmul>
 810c968:	a36d      	add	r3, pc, #436	; (adr r3, 810cb20 <_dtoa_r+0x2e8>)
 810c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c96e:	f7f3 fd25 	bl	81003bc <__adddf3>
 810c972:	4606      	mov	r6, r0
 810c974:	4628      	mov	r0, r5
 810c976:	460f      	mov	r7, r1
 810c978:	f7f3 fe6c 	bl	8100654 <__aeabi_i2d>
 810c97c:	a36a      	add	r3, pc, #424	; (adr r3, 810cb28 <_dtoa_r+0x2f0>)
 810c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c982:	f7f3 fed1 	bl	8100728 <__aeabi_dmul>
 810c986:	4602      	mov	r2, r0
 810c988:	460b      	mov	r3, r1
 810c98a:	4630      	mov	r0, r6
 810c98c:	4639      	mov	r1, r7
 810c98e:	f7f3 fd15 	bl	81003bc <__adddf3>
 810c992:	4606      	mov	r6, r0
 810c994:	460f      	mov	r7, r1
 810c996:	f7f4 f977 	bl	8100c88 <__aeabi_d2iz>
 810c99a:	2200      	movs	r2, #0
 810c99c:	4682      	mov	sl, r0
 810c99e:	2300      	movs	r3, #0
 810c9a0:	4630      	mov	r0, r6
 810c9a2:	4639      	mov	r1, r7
 810c9a4:	f7f4 f932 	bl	8100c0c <__aeabi_dcmplt>
 810c9a8:	b148      	cbz	r0, 810c9be <_dtoa_r+0x186>
 810c9aa:	4650      	mov	r0, sl
 810c9ac:	f7f3 fe52 	bl	8100654 <__aeabi_i2d>
 810c9b0:	4632      	mov	r2, r6
 810c9b2:	463b      	mov	r3, r7
 810c9b4:	f7f4 f920 	bl	8100bf8 <__aeabi_dcmpeq>
 810c9b8:	b908      	cbnz	r0, 810c9be <_dtoa_r+0x186>
 810c9ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c9be:	f1ba 0f16 	cmp.w	sl, #22
 810c9c2:	d854      	bhi.n	810ca6e <_dtoa_r+0x236>
 810c9c4:	4b61      	ldr	r3, [pc, #388]	; (810cb4c <_dtoa_r+0x314>)
 810c9c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810c9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810c9d2:	f7f4 f91b 	bl	8100c0c <__aeabi_dcmplt>
 810c9d6:	2800      	cmp	r0, #0
 810c9d8:	d04b      	beq.n	810ca72 <_dtoa_r+0x23a>
 810c9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c9de:	2300      	movs	r3, #0
 810c9e0:	930e      	str	r3, [sp, #56]	; 0x38
 810c9e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810c9e4:	1b5d      	subs	r5, r3, r5
 810c9e6:	1e6b      	subs	r3, r5, #1
 810c9e8:	9304      	str	r3, [sp, #16]
 810c9ea:	bf43      	ittte	mi
 810c9ec:	2300      	movmi	r3, #0
 810c9ee:	f1c5 0801 	rsbmi	r8, r5, #1
 810c9f2:	9304      	strmi	r3, [sp, #16]
 810c9f4:	f04f 0800 	movpl.w	r8, #0
 810c9f8:	f1ba 0f00 	cmp.w	sl, #0
 810c9fc:	db3b      	blt.n	810ca76 <_dtoa_r+0x23e>
 810c9fe:	9b04      	ldr	r3, [sp, #16]
 810ca00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 810ca04:	4453      	add	r3, sl
 810ca06:	9304      	str	r3, [sp, #16]
 810ca08:	2300      	movs	r3, #0
 810ca0a:	9306      	str	r3, [sp, #24]
 810ca0c:	9b05      	ldr	r3, [sp, #20]
 810ca0e:	2b09      	cmp	r3, #9
 810ca10:	d869      	bhi.n	810cae6 <_dtoa_r+0x2ae>
 810ca12:	2b05      	cmp	r3, #5
 810ca14:	bfc4      	itt	gt
 810ca16:	3b04      	subgt	r3, #4
 810ca18:	9305      	strgt	r3, [sp, #20]
 810ca1a:	9b05      	ldr	r3, [sp, #20]
 810ca1c:	f1a3 0302 	sub.w	r3, r3, #2
 810ca20:	bfcc      	ite	gt
 810ca22:	2500      	movgt	r5, #0
 810ca24:	2501      	movle	r5, #1
 810ca26:	2b03      	cmp	r3, #3
 810ca28:	d869      	bhi.n	810cafe <_dtoa_r+0x2c6>
 810ca2a:	e8df f003 	tbb	[pc, r3]
 810ca2e:	4e2c      	.short	0x4e2c
 810ca30:	5a4c      	.short	0x5a4c
 810ca32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 810ca36:	441d      	add	r5, r3
 810ca38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810ca3c:	2b20      	cmp	r3, #32
 810ca3e:	bfc1      	itttt	gt
 810ca40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810ca44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810ca48:	fa09 f303 	lslgt.w	r3, r9, r3
 810ca4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 810ca50:	bfda      	itte	le
 810ca52:	f1c3 0320 	rsble	r3, r3, #32
 810ca56:	fa06 f003 	lslle.w	r0, r6, r3
 810ca5a:	4318      	orrgt	r0, r3
 810ca5c:	f7f3 fdea 	bl	8100634 <__aeabi_ui2d>
 810ca60:	2301      	movs	r3, #1
 810ca62:	4606      	mov	r6, r0
 810ca64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810ca68:	3d01      	subs	r5, #1
 810ca6a:	9310      	str	r3, [sp, #64]	; 0x40
 810ca6c:	e771      	b.n	810c952 <_dtoa_r+0x11a>
 810ca6e:	2301      	movs	r3, #1
 810ca70:	e7b6      	b.n	810c9e0 <_dtoa_r+0x1a8>
 810ca72:	900e      	str	r0, [sp, #56]	; 0x38
 810ca74:	e7b5      	b.n	810c9e2 <_dtoa_r+0x1aa>
 810ca76:	f1ca 0300 	rsb	r3, sl, #0
 810ca7a:	9306      	str	r3, [sp, #24]
 810ca7c:	2300      	movs	r3, #0
 810ca7e:	eba8 080a 	sub.w	r8, r8, sl
 810ca82:	930d      	str	r3, [sp, #52]	; 0x34
 810ca84:	e7c2      	b.n	810ca0c <_dtoa_r+0x1d4>
 810ca86:	2300      	movs	r3, #0
 810ca88:	9308      	str	r3, [sp, #32]
 810ca8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ca8c:	2b00      	cmp	r3, #0
 810ca8e:	dc39      	bgt.n	810cb04 <_dtoa_r+0x2cc>
 810ca90:	f04f 0901 	mov.w	r9, #1
 810ca94:	f8cd 9004 	str.w	r9, [sp, #4]
 810ca98:	464b      	mov	r3, r9
 810ca9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810ca9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810caa0:	2200      	movs	r2, #0
 810caa2:	6042      	str	r2, [r0, #4]
 810caa4:	2204      	movs	r2, #4
 810caa6:	f102 0614 	add.w	r6, r2, #20
 810caaa:	429e      	cmp	r6, r3
 810caac:	6841      	ldr	r1, [r0, #4]
 810caae:	d92f      	bls.n	810cb10 <_dtoa_r+0x2d8>
 810cab0:	4620      	mov	r0, r4
 810cab2:	f001 fa77 	bl	810dfa4 <_Balloc>
 810cab6:	9000      	str	r0, [sp, #0]
 810cab8:	2800      	cmp	r0, #0
 810caba:	d14b      	bne.n	810cb54 <_dtoa_r+0x31c>
 810cabc:	4b24      	ldr	r3, [pc, #144]	; (810cb50 <_dtoa_r+0x318>)
 810cabe:	4602      	mov	r2, r0
 810cac0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810cac4:	e6d1      	b.n	810c86a <_dtoa_r+0x32>
 810cac6:	2301      	movs	r3, #1
 810cac8:	e7de      	b.n	810ca88 <_dtoa_r+0x250>
 810caca:	2300      	movs	r3, #0
 810cacc:	9308      	str	r3, [sp, #32]
 810cace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cad0:	eb0a 0903 	add.w	r9, sl, r3
 810cad4:	f109 0301 	add.w	r3, r9, #1
 810cad8:	2b01      	cmp	r3, #1
 810cada:	9301      	str	r3, [sp, #4]
 810cadc:	bfb8      	it	lt
 810cade:	2301      	movlt	r3, #1
 810cae0:	e7dd      	b.n	810ca9e <_dtoa_r+0x266>
 810cae2:	2301      	movs	r3, #1
 810cae4:	e7f2      	b.n	810cacc <_dtoa_r+0x294>
 810cae6:	2501      	movs	r5, #1
 810cae8:	2300      	movs	r3, #0
 810caea:	9305      	str	r3, [sp, #20]
 810caec:	9508      	str	r5, [sp, #32]
 810caee:	f04f 39ff 	mov.w	r9, #4294967295
 810caf2:	2200      	movs	r2, #0
 810caf4:	f8cd 9004 	str.w	r9, [sp, #4]
 810caf8:	2312      	movs	r3, #18
 810cafa:	9209      	str	r2, [sp, #36]	; 0x24
 810cafc:	e7cf      	b.n	810ca9e <_dtoa_r+0x266>
 810cafe:	2301      	movs	r3, #1
 810cb00:	9308      	str	r3, [sp, #32]
 810cb02:	e7f4      	b.n	810caee <_dtoa_r+0x2b6>
 810cb04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 810cb08:	f8cd 9004 	str.w	r9, [sp, #4]
 810cb0c:	464b      	mov	r3, r9
 810cb0e:	e7c6      	b.n	810ca9e <_dtoa_r+0x266>
 810cb10:	3101      	adds	r1, #1
 810cb12:	6041      	str	r1, [r0, #4]
 810cb14:	0052      	lsls	r2, r2, #1
 810cb16:	e7c6      	b.n	810caa6 <_dtoa_r+0x26e>
 810cb18:	636f4361 	.word	0x636f4361
 810cb1c:	3fd287a7 	.word	0x3fd287a7
 810cb20:	8b60c8b3 	.word	0x8b60c8b3
 810cb24:	3fc68a28 	.word	0x3fc68a28
 810cb28:	509f79fb 	.word	0x509f79fb
 810cb2c:	3fd34413 	.word	0x3fd34413
 810cb30:	0810f326 	.word	0x0810f326
 810cb34:	0810f33d 	.word	0x0810f33d
 810cb38:	7ff00000 	.word	0x7ff00000
 810cb3c:	0810f322 	.word	0x0810f322
 810cb40:	0810f319 	.word	0x0810f319
 810cb44:	0810f19a 	.word	0x0810f19a
 810cb48:	3ff80000 	.word	0x3ff80000
 810cb4c:	0810f518 	.word	0x0810f518
 810cb50:	0810f39c 	.word	0x0810f39c
 810cb54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cb56:	9a00      	ldr	r2, [sp, #0]
 810cb58:	601a      	str	r2, [r3, #0]
 810cb5a:	9b01      	ldr	r3, [sp, #4]
 810cb5c:	2b0e      	cmp	r3, #14
 810cb5e:	f200 80ad 	bhi.w	810ccbc <_dtoa_r+0x484>
 810cb62:	2d00      	cmp	r5, #0
 810cb64:	f000 80aa 	beq.w	810ccbc <_dtoa_r+0x484>
 810cb68:	f1ba 0f00 	cmp.w	sl, #0
 810cb6c:	dd36      	ble.n	810cbdc <_dtoa_r+0x3a4>
 810cb6e:	4ac3      	ldr	r2, [pc, #780]	; (810ce7c <_dtoa_r+0x644>)
 810cb70:	f00a 030f 	and.w	r3, sl, #15
 810cb74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810cb78:	ed93 7b00 	vldr	d7, [r3]
 810cb7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 810cb80:	ea4f 172a 	mov.w	r7, sl, asr #4
 810cb84:	eeb0 8a47 	vmov.f32	s16, s14
 810cb88:	eef0 8a67 	vmov.f32	s17, s15
 810cb8c:	d016      	beq.n	810cbbc <_dtoa_r+0x384>
 810cb8e:	4bbc      	ldr	r3, [pc, #752]	; (810ce80 <_dtoa_r+0x648>)
 810cb90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810cb94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810cb98:	f7f3 fef0 	bl	810097c <__aeabi_ddiv>
 810cb9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810cba0:	f007 070f 	and.w	r7, r7, #15
 810cba4:	2503      	movs	r5, #3
 810cba6:	4eb6      	ldr	r6, [pc, #728]	; (810ce80 <_dtoa_r+0x648>)
 810cba8:	b957      	cbnz	r7, 810cbc0 <_dtoa_r+0x388>
 810cbaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810cbae:	ec53 2b18 	vmov	r2, r3, d8
 810cbb2:	f7f3 fee3 	bl	810097c <__aeabi_ddiv>
 810cbb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810cbba:	e029      	b.n	810cc10 <_dtoa_r+0x3d8>
 810cbbc:	2502      	movs	r5, #2
 810cbbe:	e7f2      	b.n	810cba6 <_dtoa_r+0x36e>
 810cbc0:	07f9      	lsls	r1, r7, #31
 810cbc2:	d508      	bpl.n	810cbd6 <_dtoa_r+0x39e>
 810cbc4:	ec51 0b18 	vmov	r0, r1, d8
 810cbc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 810cbcc:	f7f3 fdac 	bl	8100728 <__aeabi_dmul>
 810cbd0:	ec41 0b18 	vmov	d8, r0, r1
 810cbd4:	3501      	adds	r5, #1
 810cbd6:	107f      	asrs	r7, r7, #1
 810cbd8:	3608      	adds	r6, #8
 810cbda:	e7e5      	b.n	810cba8 <_dtoa_r+0x370>
 810cbdc:	f000 80a6 	beq.w	810cd2c <_dtoa_r+0x4f4>
 810cbe0:	f1ca 0600 	rsb	r6, sl, #0
 810cbe4:	4ba5      	ldr	r3, [pc, #660]	; (810ce7c <_dtoa_r+0x644>)
 810cbe6:	4fa6      	ldr	r7, [pc, #664]	; (810ce80 <_dtoa_r+0x648>)
 810cbe8:	f006 020f 	and.w	r2, r6, #15
 810cbec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810cbf8:	f7f3 fd96 	bl	8100728 <__aeabi_dmul>
 810cbfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810cc00:	1136      	asrs	r6, r6, #4
 810cc02:	2300      	movs	r3, #0
 810cc04:	2502      	movs	r5, #2
 810cc06:	2e00      	cmp	r6, #0
 810cc08:	f040 8085 	bne.w	810cd16 <_dtoa_r+0x4de>
 810cc0c:	2b00      	cmp	r3, #0
 810cc0e:	d1d2      	bne.n	810cbb6 <_dtoa_r+0x37e>
 810cc10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810cc12:	2b00      	cmp	r3, #0
 810cc14:	f000 808c 	beq.w	810cd30 <_dtoa_r+0x4f8>
 810cc18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810cc1c:	4b99      	ldr	r3, [pc, #612]	; (810ce84 <_dtoa_r+0x64c>)
 810cc1e:	2200      	movs	r2, #0
 810cc20:	4630      	mov	r0, r6
 810cc22:	4639      	mov	r1, r7
 810cc24:	f7f3 fff2 	bl	8100c0c <__aeabi_dcmplt>
 810cc28:	2800      	cmp	r0, #0
 810cc2a:	f000 8081 	beq.w	810cd30 <_dtoa_r+0x4f8>
 810cc2e:	9b01      	ldr	r3, [sp, #4]
 810cc30:	2b00      	cmp	r3, #0
 810cc32:	d07d      	beq.n	810cd30 <_dtoa_r+0x4f8>
 810cc34:	f1b9 0f00 	cmp.w	r9, #0
 810cc38:	dd3c      	ble.n	810ccb4 <_dtoa_r+0x47c>
 810cc3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 810cc3e:	9307      	str	r3, [sp, #28]
 810cc40:	2200      	movs	r2, #0
 810cc42:	4b91      	ldr	r3, [pc, #580]	; (810ce88 <_dtoa_r+0x650>)
 810cc44:	4630      	mov	r0, r6
 810cc46:	4639      	mov	r1, r7
 810cc48:	f7f3 fd6e 	bl	8100728 <__aeabi_dmul>
 810cc4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810cc50:	3501      	adds	r5, #1
 810cc52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 810cc56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810cc5a:	4628      	mov	r0, r5
 810cc5c:	f7f3 fcfa 	bl	8100654 <__aeabi_i2d>
 810cc60:	4632      	mov	r2, r6
 810cc62:	463b      	mov	r3, r7
 810cc64:	f7f3 fd60 	bl	8100728 <__aeabi_dmul>
 810cc68:	4b88      	ldr	r3, [pc, #544]	; (810ce8c <_dtoa_r+0x654>)
 810cc6a:	2200      	movs	r2, #0
 810cc6c:	f7f3 fba6 	bl	81003bc <__adddf3>
 810cc70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810cc74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810cc78:	9303      	str	r3, [sp, #12]
 810cc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810cc7c:	2b00      	cmp	r3, #0
 810cc7e:	d15c      	bne.n	810cd3a <_dtoa_r+0x502>
 810cc80:	4b83      	ldr	r3, [pc, #524]	; (810ce90 <_dtoa_r+0x658>)
 810cc82:	2200      	movs	r2, #0
 810cc84:	4630      	mov	r0, r6
 810cc86:	4639      	mov	r1, r7
 810cc88:	f7f3 fb96 	bl	81003b8 <__aeabi_dsub>
 810cc8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810cc90:	4606      	mov	r6, r0
 810cc92:	460f      	mov	r7, r1
 810cc94:	f7f3 ffd8 	bl	8100c48 <__aeabi_dcmpgt>
 810cc98:	2800      	cmp	r0, #0
 810cc9a:	f040 8296 	bne.w	810d1ca <_dtoa_r+0x992>
 810cc9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810cca2:	4630      	mov	r0, r6
 810cca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810cca8:	4639      	mov	r1, r7
 810ccaa:	f7f3 ffaf 	bl	8100c0c <__aeabi_dcmplt>
 810ccae:	2800      	cmp	r0, #0
 810ccb0:	f040 8288 	bne.w	810d1c4 <_dtoa_r+0x98c>
 810ccb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810ccb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810ccbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810ccbe:	2b00      	cmp	r3, #0
 810ccc0:	f2c0 8158 	blt.w	810cf74 <_dtoa_r+0x73c>
 810ccc4:	f1ba 0f0e 	cmp.w	sl, #14
 810ccc8:	f300 8154 	bgt.w	810cf74 <_dtoa_r+0x73c>
 810cccc:	4b6b      	ldr	r3, [pc, #428]	; (810ce7c <_dtoa_r+0x644>)
 810ccce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810ccd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 810ccd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ccd8:	2b00      	cmp	r3, #0
 810ccda:	f280 80e3 	bge.w	810cea4 <_dtoa_r+0x66c>
 810ccde:	9b01      	ldr	r3, [sp, #4]
 810cce0:	2b00      	cmp	r3, #0
 810cce2:	f300 80df 	bgt.w	810cea4 <_dtoa_r+0x66c>
 810cce6:	f040 826d 	bne.w	810d1c4 <_dtoa_r+0x98c>
 810ccea:	4b69      	ldr	r3, [pc, #420]	; (810ce90 <_dtoa_r+0x658>)
 810ccec:	2200      	movs	r2, #0
 810ccee:	4640      	mov	r0, r8
 810ccf0:	4649      	mov	r1, r9
 810ccf2:	f7f3 fd19 	bl	8100728 <__aeabi_dmul>
 810ccf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810ccfa:	f7f3 ff9b 	bl	8100c34 <__aeabi_dcmpge>
 810ccfe:	9e01      	ldr	r6, [sp, #4]
 810cd00:	4637      	mov	r7, r6
 810cd02:	2800      	cmp	r0, #0
 810cd04:	f040 8243 	bne.w	810d18e <_dtoa_r+0x956>
 810cd08:	9d00      	ldr	r5, [sp, #0]
 810cd0a:	2331      	movs	r3, #49	; 0x31
 810cd0c:	f805 3b01 	strb.w	r3, [r5], #1
 810cd10:	f10a 0a01 	add.w	sl, sl, #1
 810cd14:	e23f      	b.n	810d196 <_dtoa_r+0x95e>
 810cd16:	07f2      	lsls	r2, r6, #31
 810cd18:	d505      	bpl.n	810cd26 <_dtoa_r+0x4ee>
 810cd1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810cd1e:	f7f3 fd03 	bl	8100728 <__aeabi_dmul>
 810cd22:	3501      	adds	r5, #1
 810cd24:	2301      	movs	r3, #1
 810cd26:	1076      	asrs	r6, r6, #1
 810cd28:	3708      	adds	r7, #8
 810cd2a:	e76c      	b.n	810cc06 <_dtoa_r+0x3ce>
 810cd2c:	2502      	movs	r5, #2
 810cd2e:	e76f      	b.n	810cc10 <_dtoa_r+0x3d8>
 810cd30:	9b01      	ldr	r3, [sp, #4]
 810cd32:	f8cd a01c 	str.w	sl, [sp, #28]
 810cd36:	930c      	str	r3, [sp, #48]	; 0x30
 810cd38:	e78d      	b.n	810cc56 <_dtoa_r+0x41e>
 810cd3a:	9900      	ldr	r1, [sp, #0]
 810cd3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 810cd3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cd40:	4b4e      	ldr	r3, [pc, #312]	; (810ce7c <_dtoa_r+0x644>)
 810cd42:	ed9d 7b02 	vldr	d7, [sp, #8]
 810cd46:	4401      	add	r1, r0
 810cd48:	9102      	str	r1, [sp, #8]
 810cd4a:	9908      	ldr	r1, [sp, #32]
 810cd4c:	eeb0 8a47 	vmov.f32	s16, s14
 810cd50:	eef0 8a67 	vmov.f32	s17, s15
 810cd54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810cd58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810cd5c:	2900      	cmp	r1, #0
 810cd5e:	d045      	beq.n	810cdec <_dtoa_r+0x5b4>
 810cd60:	494c      	ldr	r1, [pc, #304]	; (810ce94 <_dtoa_r+0x65c>)
 810cd62:	2000      	movs	r0, #0
 810cd64:	f7f3 fe0a 	bl	810097c <__aeabi_ddiv>
 810cd68:	ec53 2b18 	vmov	r2, r3, d8
 810cd6c:	f7f3 fb24 	bl	81003b8 <__aeabi_dsub>
 810cd70:	9d00      	ldr	r5, [sp, #0]
 810cd72:	ec41 0b18 	vmov	d8, r0, r1
 810cd76:	4639      	mov	r1, r7
 810cd78:	4630      	mov	r0, r6
 810cd7a:	f7f3 ff85 	bl	8100c88 <__aeabi_d2iz>
 810cd7e:	900c      	str	r0, [sp, #48]	; 0x30
 810cd80:	f7f3 fc68 	bl	8100654 <__aeabi_i2d>
 810cd84:	4602      	mov	r2, r0
 810cd86:	460b      	mov	r3, r1
 810cd88:	4630      	mov	r0, r6
 810cd8a:	4639      	mov	r1, r7
 810cd8c:	f7f3 fb14 	bl	81003b8 <__aeabi_dsub>
 810cd90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810cd92:	3330      	adds	r3, #48	; 0x30
 810cd94:	f805 3b01 	strb.w	r3, [r5], #1
 810cd98:	ec53 2b18 	vmov	r2, r3, d8
 810cd9c:	4606      	mov	r6, r0
 810cd9e:	460f      	mov	r7, r1
 810cda0:	f7f3 ff34 	bl	8100c0c <__aeabi_dcmplt>
 810cda4:	2800      	cmp	r0, #0
 810cda6:	d165      	bne.n	810ce74 <_dtoa_r+0x63c>
 810cda8:	4632      	mov	r2, r6
 810cdaa:	463b      	mov	r3, r7
 810cdac:	4935      	ldr	r1, [pc, #212]	; (810ce84 <_dtoa_r+0x64c>)
 810cdae:	2000      	movs	r0, #0
 810cdb0:	f7f3 fb02 	bl	81003b8 <__aeabi_dsub>
 810cdb4:	ec53 2b18 	vmov	r2, r3, d8
 810cdb8:	f7f3 ff28 	bl	8100c0c <__aeabi_dcmplt>
 810cdbc:	2800      	cmp	r0, #0
 810cdbe:	f040 80b9 	bne.w	810cf34 <_dtoa_r+0x6fc>
 810cdc2:	9b02      	ldr	r3, [sp, #8]
 810cdc4:	429d      	cmp	r5, r3
 810cdc6:	f43f af75 	beq.w	810ccb4 <_dtoa_r+0x47c>
 810cdca:	4b2f      	ldr	r3, [pc, #188]	; (810ce88 <_dtoa_r+0x650>)
 810cdcc:	ec51 0b18 	vmov	r0, r1, d8
 810cdd0:	2200      	movs	r2, #0
 810cdd2:	f7f3 fca9 	bl	8100728 <__aeabi_dmul>
 810cdd6:	4b2c      	ldr	r3, [pc, #176]	; (810ce88 <_dtoa_r+0x650>)
 810cdd8:	ec41 0b18 	vmov	d8, r0, r1
 810cddc:	2200      	movs	r2, #0
 810cdde:	4630      	mov	r0, r6
 810cde0:	4639      	mov	r1, r7
 810cde2:	f7f3 fca1 	bl	8100728 <__aeabi_dmul>
 810cde6:	4606      	mov	r6, r0
 810cde8:	460f      	mov	r7, r1
 810cdea:	e7c4      	b.n	810cd76 <_dtoa_r+0x53e>
 810cdec:	ec51 0b17 	vmov	r0, r1, d7
 810cdf0:	f7f3 fc9a 	bl	8100728 <__aeabi_dmul>
 810cdf4:	9b02      	ldr	r3, [sp, #8]
 810cdf6:	9d00      	ldr	r5, [sp, #0]
 810cdf8:	930c      	str	r3, [sp, #48]	; 0x30
 810cdfa:	ec41 0b18 	vmov	d8, r0, r1
 810cdfe:	4639      	mov	r1, r7
 810ce00:	4630      	mov	r0, r6
 810ce02:	f7f3 ff41 	bl	8100c88 <__aeabi_d2iz>
 810ce06:	9011      	str	r0, [sp, #68]	; 0x44
 810ce08:	f7f3 fc24 	bl	8100654 <__aeabi_i2d>
 810ce0c:	4602      	mov	r2, r0
 810ce0e:	460b      	mov	r3, r1
 810ce10:	4630      	mov	r0, r6
 810ce12:	4639      	mov	r1, r7
 810ce14:	f7f3 fad0 	bl	81003b8 <__aeabi_dsub>
 810ce18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810ce1a:	3330      	adds	r3, #48	; 0x30
 810ce1c:	f805 3b01 	strb.w	r3, [r5], #1
 810ce20:	9b02      	ldr	r3, [sp, #8]
 810ce22:	429d      	cmp	r5, r3
 810ce24:	4606      	mov	r6, r0
 810ce26:	460f      	mov	r7, r1
 810ce28:	f04f 0200 	mov.w	r2, #0
 810ce2c:	d134      	bne.n	810ce98 <_dtoa_r+0x660>
 810ce2e:	4b19      	ldr	r3, [pc, #100]	; (810ce94 <_dtoa_r+0x65c>)
 810ce30:	ec51 0b18 	vmov	r0, r1, d8
 810ce34:	f7f3 fac2 	bl	81003bc <__adddf3>
 810ce38:	4602      	mov	r2, r0
 810ce3a:	460b      	mov	r3, r1
 810ce3c:	4630      	mov	r0, r6
 810ce3e:	4639      	mov	r1, r7
 810ce40:	f7f3 ff02 	bl	8100c48 <__aeabi_dcmpgt>
 810ce44:	2800      	cmp	r0, #0
 810ce46:	d175      	bne.n	810cf34 <_dtoa_r+0x6fc>
 810ce48:	ec53 2b18 	vmov	r2, r3, d8
 810ce4c:	4911      	ldr	r1, [pc, #68]	; (810ce94 <_dtoa_r+0x65c>)
 810ce4e:	2000      	movs	r0, #0
 810ce50:	f7f3 fab2 	bl	81003b8 <__aeabi_dsub>
 810ce54:	4602      	mov	r2, r0
 810ce56:	460b      	mov	r3, r1
 810ce58:	4630      	mov	r0, r6
 810ce5a:	4639      	mov	r1, r7
 810ce5c:	f7f3 fed6 	bl	8100c0c <__aeabi_dcmplt>
 810ce60:	2800      	cmp	r0, #0
 810ce62:	f43f af27 	beq.w	810ccb4 <_dtoa_r+0x47c>
 810ce66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810ce68:	1e6b      	subs	r3, r5, #1
 810ce6a:	930c      	str	r3, [sp, #48]	; 0x30
 810ce6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810ce70:	2b30      	cmp	r3, #48	; 0x30
 810ce72:	d0f8      	beq.n	810ce66 <_dtoa_r+0x62e>
 810ce74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810ce78:	e04a      	b.n	810cf10 <_dtoa_r+0x6d8>
 810ce7a:	bf00      	nop
 810ce7c:	0810f518 	.word	0x0810f518
 810ce80:	0810f4f0 	.word	0x0810f4f0
 810ce84:	3ff00000 	.word	0x3ff00000
 810ce88:	40240000 	.word	0x40240000
 810ce8c:	401c0000 	.word	0x401c0000
 810ce90:	40140000 	.word	0x40140000
 810ce94:	3fe00000 	.word	0x3fe00000
 810ce98:	4baf      	ldr	r3, [pc, #700]	; (810d158 <_dtoa_r+0x920>)
 810ce9a:	f7f3 fc45 	bl	8100728 <__aeabi_dmul>
 810ce9e:	4606      	mov	r6, r0
 810cea0:	460f      	mov	r7, r1
 810cea2:	e7ac      	b.n	810cdfe <_dtoa_r+0x5c6>
 810cea4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810cea8:	9d00      	ldr	r5, [sp, #0]
 810ceaa:	4642      	mov	r2, r8
 810ceac:	464b      	mov	r3, r9
 810ceae:	4630      	mov	r0, r6
 810ceb0:	4639      	mov	r1, r7
 810ceb2:	f7f3 fd63 	bl	810097c <__aeabi_ddiv>
 810ceb6:	f7f3 fee7 	bl	8100c88 <__aeabi_d2iz>
 810ceba:	9002      	str	r0, [sp, #8]
 810cebc:	f7f3 fbca 	bl	8100654 <__aeabi_i2d>
 810cec0:	4642      	mov	r2, r8
 810cec2:	464b      	mov	r3, r9
 810cec4:	f7f3 fc30 	bl	8100728 <__aeabi_dmul>
 810cec8:	4602      	mov	r2, r0
 810ceca:	460b      	mov	r3, r1
 810cecc:	4630      	mov	r0, r6
 810cece:	4639      	mov	r1, r7
 810ced0:	f7f3 fa72 	bl	81003b8 <__aeabi_dsub>
 810ced4:	9e02      	ldr	r6, [sp, #8]
 810ced6:	9f01      	ldr	r7, [sp, #4]
 810ced8:	3630      	adds	r6, #48	; 0x30
 810ceda:	f805 6b01 	strb.w	r6, [r5], #1
 810cede:	9e00      	ldr	r6, [sp, #0]
 810cee0:	1bae      	subs	r6, r5, r6
 810cee2:	42b7      	cmp	r7, r6
 810cee4:	4602      	mov	r2, r0
 810cee6:	460b      	mov	r3, r1
 810cee8:	d137      	bne.n	810cf5a <_dtoa_r+0x722>
 810ceea:	f7f3 fa67 	bl	81003bc <__adddf3>
 810ceee:	4642      	mov	r2, r8
 810cef0:	464b      	mov	r3, r9
 810cef2:	4606      	mov	r6, r0
 810cef4:	460f      	mov	r7, r1
 810cef6:	f7f3 fea7 	bl	8100c48 <__aeabi_dcmpgt>
 810cefa:	b9c8      	cbnz	r0, 810cf30 <_dtoa_r+0x6f8>
 810cefc:	4642      	mov	r2, r8
 810cefe:	464b      	mov	r3, r9
 810cf00:	4630      	mov	r0, r6
 810cf02:	4639      	mov	r1, r7
 810cf04:	f7f3 fe78 	bl	8100bf8 <__aeabi_dcmpeq>
 810cf08:	b110      	cbz	r0, 810cf10 <_dtoa_r+0x6d8>
 810cf0a:	9b02      	ldr	r3, [sp, #8]
 810cf0c:	07d9      	lsls	r1, r3, #31
 810cf0e:	d40f      	bmi.n	810cf30 <_dtoa_r+0x6f8>
 810cf10:	4620      	mov	r0, r4
 810cf12:	4659      	mov	r1, fp
 810cf14:	f001 f886 	bl	810e024 <_Bfree>
 810cf18:	2300      	movs	r3, #0
 810cf1a:	702b      	strb	r3, [r5, #0]
 810cf1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810cf1e:	f10a 0001 	add.w	r0, sl, #1
 810cf22:	6018      	str	r0, [r3, #0]
 810cf24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cf26:	2b00      	cmp	r3, #0
 810cf28:	f43f acd8 	beq.w	810c8dc <_dtoa_r+0xa4>
 810cf2c:	601d      	str	r5, [r3, #0]
 810cf2e:	e4d5      	b.n	810c8dc <_dtoa_r+0xa4>
 810cf30:	f8cd a01c 	str.w	sl, [sp, #28]
 810cf34:	462b      	mov	r3, r5
 810cf36:	461d      	mov	r5, r3
 810cf38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810cf3c:	2a39      	cmp	r2, #57	; 0x39
 810cf3e:	d108      	bne.n	810cf52 <_dtoa_r+0x71a>
 810cf40:	9a00      	ldr	r2, [sp, #0]
 810cf42:	429a      	cmp	r2, r3
 810cf44:	d1f7      	bne.n	810cf36 <_dtoa_r+0x6fe>
 810cf46:	9a07      	ldr	r2, [sp, #28]
 810cf48:	9900      	ldr	r1, [sp, #0]
 810cf4a:	3201      	adds	r2, #1
 810cf4c:	9207      	str	r2, [sp, #28]
 810cf4e:	2230      	movs	r2, #48	; 0x30
 810cf50:	700a      	strb	r2, [r1, #0]
 810cf52:	781a      	ldrb	r2, [r3, #0]
 810cf54:	3201      	adds	r2, #1
 810cf56:	701a      	strb	r2, [r3, #0]
 810cf58:	e78c      	b.n	810ce74 <_dtoa_r+0x63c>
 810cf5a:	4b7f      	ldr	r3, [pc, #508]	; (810d158 <_dtoa_r+0x920>)
 810cf5c:	2200      	movs	r2, #0
 810cf5e:	f7f3 fbe3 	bl	8100728 <__aeabi_dmul>
 810cf62:	2200      	movs	r2, #0
 810cf64:	2300      	movs	r3, #0
 810cf66:	4606      	mov	r6, r0
 810cf68:	460f      	mov	r7, r1
 810cf6a:	f7f3 fe45 	bl	8100bf8 <__aeabi_dcmpeq>
 810cf6e:	2800      	cmp	r0, #0
 810cf70:	d09b      	beq.n	810ceaa <_dtoa_r+0x672>
 810cf72:	e7cd      	b.n	810cf10 <_dtoa_r+0x6d8>
 810cf74:	9a08      	ldr	r2, [sp, #32]
 810cf76:	2a00      	cmp	r2, #0
 810cf78:	f000 80c4 	beq.w	810d104 <_dtoa_r+0x8cc>
 810cf7c:	9a05      	ldr	r2, [sp, #20]
 810cf7e:	2a01      	cmp	r2, #1
 810cf80:	f300 80a8 	bgt.w	810d0d4 <_dtoa_r+0x89c>
 810cf84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 810cf86:	2a00      	cmp	r2, #0
 810cf88:	f000 80a0 	beq.w	810d0cc <_dtoa_r+0x894>
 810cf8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810cf90:	9e06      	ldr	r6, [sp, #24]
 810cf92:	4645      	mov	r5, r8
 810cf94:	9a04      	ldr	r2, [sp, #16]
 810cf96:	2101      	movs	r1, #1
 810cf98:	441a      	add	r2, r3
 810cf9a:	4620      	mov	r0, r4
 810cf9c:	4498      	add	r8, r3
 810cf9e:	9204      	str	r2, [sp, #16]
 810cfa0:	f001 f946 	bl	810e230 <__i2b>
 810cfa4:	4607      	mov	r7, r0
 810cfa6:	2d00      	cmp	r5, #0
 810cfa8:	dd0b      	ble.n	810cfc2 <_dtoa_r+0x78a>
 810cfaa:	9b04      	ldr	r3, [sp, #16]
 810cfac:	2b00      	cmp	r3, #0
 810cfae:	dd08      	ble.n	810cfc2 <_dtoa_r+0x78a>
 810cfb0:	42ab      	cmp	r3, r5
 810cfb2:	9a04      	ldr	r2, [sp, #16]
 810cfb4:	bfa8      	it	ge
 810cfb6:	462b      	movge	r3, r5
 810cfb8:	eba8 0803 	sub.w	r8, r8, r3
 810cfbc:	1aed      	subs	r5, r5, r3
 810cfbe:	1ad3      	subs	r3, r2, r3
 810cfc0:	9304      	str	r3, [sp, #16]
 810cfc2:	9b06      	ldr	r3, [sp, #24]
 810cfc4:	b1fb      	cbz	r3, 810d006 <_dtoa_r+0x7ce>
 810cfc6:	9b08      	ldr	r3, [sp, #32]
 810cfc8:	2b00      	cmp	r3, #0
 810cfca:	f000 809f 	beq.w	810d10c <_dtoa_r+0x8d4>
 810cfce:	2e00      	cmp	r6, #0
 810cfd0:	dd11      	ble.n	810cff6 <_dtoa_r+0x7be>
 810cfd2:	4639      	mov	r1, r7
 810cfd4:	4632      	mov	r2, r6
 810cfd6:	4620      	mov	r0, r4
 810cfd8:	f001 f9e6 	bl	810e3a8 <__pow5mult>
 810cfdc:	465a      	mov	r2, fp
 810cfde:	4601      	mov	r1, r0
 810cfe0:	4607      	mov	r7, r0
 810cfe2:	4620      	mov	r0, r4
 810cfe4:	f001 f93a 	bl	810e25c <__multiply>
 810cfe8:	4659      	mov	r1, fp
 810cfea:	9007      	str	r0, [sp, #28]
 810cfec:	4620      	mov	r0, r4
 810cfee:	f001 f819 	bl	810e024 <_Bfree>
 810cff2:	9b07      	ldr	r3, [sp, #28]
 810cff4:	469b      	mov	fp, r3
 810cff6:	9b06      	ldr	r3, [sp, #24]
 810cff8:	1b9a      	subs	r2, r3, r6
 810cffa:	d004      	beq.n	810d006 <_dtoa_r+0x7ce>
 810cffc:	4659      	mov	r1, fp
 810cffe:	4620      	mov	r0, r4
 810d000:	f001 f9d2 	bl	810e3a8 <__pow5mult>
 810d004:	4683      	mov	fp, r0
 810d006:	2101      	movs	r1, #1
 810d008:	4620      	mov	r0, r4
 810d00a:	f001 f911 	bl	810e230 <__i2b>
 810d00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d010:	2b00      	cmp	r3, #0
 810d012:	4606      	mov	r6, r0
 810d014:	dd7c      	ble.n	810d110 <_dtoa_r+0x8d8>
 810d016:	461a      	mov	r2, r3
 810d018:	4601      	mov	r1, r0
 810d01a:	4620      	mov	r0, r4
 810d01c:	f001 f9c4 	bl	810e3a8 <__pow5mult>
 810d020:	9b05      	ldr	r3, [sp, #20]
 810d022:	2b01      	cmp	r3, #1
 810d024:	4606      	mov	r6, r0
 810d026:	dd76      	ble.n	810d116 <_dtoa_r+0x8de>
 810d028:	2300      	movs	r3, #0
 810d02a:	9306      	str	r3, [sp, #24]
 810d02c:	6933      	ldr	r3, [r6, #16]
 810d02e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810d032:	6918      	ldr	r0, [r3, #16]
 810d034:	f001 f8ac 	bl	810e190 <__hi0bits>
 810d038:	f1c0 0020 	rsb	r0, r0, #32
 810d03c:	9b04      	ldr	r3, [sp, #16]
 810d03e:	4418      	add	r0, r3
 810d040:	f010 001f 	ands.w	r0, r0, #31
 810d044:	f000 8086 	beq.w	810d154 <_dtoa_r+0x91c>
 810d048:	f1c0 0320 	rsb	r3, r0, #32
 810d04c:	2b04      	cmp	r3, #4
 810d04e:	dd7f      	ble.n	810d150 <_dtoa_r+0x918>
 810d050:	f1c0 001c 	rsb	r0, r0, #28
 810d054:	9b04      	ldr	r3, [sp, #16]
 810d056:	4403      	add	r3, r0
 810d058:	4480      	add	r8, r0
 810d05a:	4405      	add	r5, r0
 810d05c:	9304      	str	r3, [sp, #16]
 810d05e:	f1b8 0f00 	cmp.w	r8, #0
 810d062:	dd05      	ble.n	810d070 <_dtoa_r+0x838>
 810d064:	4659      	mov	r1, fp
 810d066:	4642      	mov	r2, r8
 810d068:	4620      	mov	r0, r4
 810d06a:	f001 f9f7 	bl	810e45c <__lshift>
 810d06e:	4683      	mov	fp, r0
 810d070:	9b04      	ldr	r3, [sp, #16]
 810d072:	2b00      	cmp	r3, #0
 810d074:	dd05      	ble.n	810d082 <_dtoa_r+0x84a>
 810d076:	4631      	mov	r1, r6
 810d078:	461a      	mov	r2, r3
 810d07a:	4620      	mov	r0, r4
 810d07c:	f001 f9ee 	bl	810e45c <__lshift>
 810d080:	4606      	mov	r6, r0
 810d082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810d084:	2b00      	cmp	r3, #0
 810d086:	d069      	beq.n	810d15c <_dtoa_r+0x924>
 810d088:	4631      	mov	r1, r6
 810d08a:	4658      	mov	r0, fp
 810d08c:	f001 fa52 	bl	810e534 <__mcmp>
 810d090:	2800      	cmp	r0, #0
 810d092:	da63      	bge.n	810d15c <_dtoa_r+0x924>
 810d094:	2300      	movs	r3, #0
 810d096:	4659      	mov	r1, fp
 810d098:	220a      	movs	r2, #10
 810d09a:	4620      	mov	r0, r4
 810d09c:	f000 ffe4 	bl	810e068 <__multadd>
 810d0a0:	9b08      	ldr	r3, [sp, #32]
 810d0a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810d0a6:	4683      	mov	fp, r0
 810d0a8:	2b00      	cmp	r3, #0
 810d0aa:	f000 818f 	beq.w	810d3cc <_dtoa_r+0xb94>
 810d0ae:	4639      	mov	r1, r7
 810d0b0:	2300      	movs	r3, #0
 810d0b2:	220a      	movs	r2, #10
 810d0b4:	4620      	mov	r0, r4
 810d0b6:	f000 ffd7 	bl	810e068 <__multadd>
 810d0ba:	f1b9 0f00 	cmp.w	r9, #0
 810d0be:	4607      	mov	r7, r0
 810d0c0:	f300 808e 	bgt.w	810d1e0 <_dtoa_r+0x9a8>
 810d0c4:	9b05      	ldr	r3, [sp, #20]
 810d0c6:	2b02      	cmp	r3, #2
 810d0c8:	dc50      	bgt.n	810d16c <_dtoa_r+0x934>
 810d0ca:	e089      	b.n	810d1e0 <_dtoa_r+0x9a8>
 810d0cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810d0ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810d0d2:	e75d      	b.n	810cf90 <_dtoa_r+0x758>
 810d0d4:	9b01      	ldr	r3, [sp, #4]
 810d0d6:	1e5e      	subs	r6, r3, #1
 810d0d8:	9b06      	ldr	r3, [sp, #24]
 810d0da:	42b3      	cmp	r3, r6
 810d0dc:	bfbf      	itttt	lt
 810d0de:	9b06      	ldrlt	r3, [sp, #24]
 810d0e0:	9606      	strlt	r6, [sp, #24]
 810d0e2:	1af2      	sublt	r2, r6, r3
 810d0e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 810d0e6:	bfb6      	itet	lt
 810d0e8:	189b      	addlt	r3, r3, r2
 810d0ea:	1b9e      	subge	r6, r3, r6
 810d0ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 810d0ee:	9b01      	ldr	r3, [sp, #4]
 810d0f0:	bfb8      	it	lt
 810d0f2:	2600      	movlt	r6, #0
 810d0f4:	2b00      	cmp	r3, #0
 810d0f6:	bfb5      	itete	lt
 810d0f8:	eba8 0503 	sublt.w	r5, r8, r3
 810d0fc:	9b01      	ldrge	r3, [sp, #4]
 810d0fe:	2300      	movlt	r3, #0
 810d100:	4645      	movge	r5, r8
 810d102:	e747      	b.n	810cf94 <_dtoa_r+0x75c>
 810d104:	9e06      	ldr	r6, [sp, #24]
 810d106:	9f08      	ldr	r7, [sp, #32]
 810d108:	4645      	mov	r5, r8
 810d10a:	e74c      	b.n	810cfa6 <_dtoa_r+0x76e>
 810d10c:	9a06      	ldr	r2, [sp, #24]
 810d10e:	e775      	b.n	810cffc <_dtoa_r+0x7c4>
 810d110:	9b05      	ldr	r3, [sp, #20]
 810d112:	2b01      	cmp	r3, #1
 810d114:	dc18      	bgt.n	810d148 <_dtoa_r+0x910>
 810d116:	9b02      	ldr	r3, [sp, #8]
 810d118:	b9b3      	cbnz	r3, 810d148 <_dtoa_r+0x910>
 810d11a:	9b03      	ldr	r3, [sp, #12]
 810d11c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d120:	b9a3      	cbnz	r3, 810d14c <_dtoa_r+0x914>
 810d122:	9b03      	ldr	r3, [sp, #12]
 810d124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810d128:	0d1b      	lsrs	r3, r3, #20
 810d12a:	051b      	lsls	r3, r3, #20
 810d12c:	b12b      	cbz	r3, 810d13a <_dtoa_r+0x902>
 810d12e:	9b04      	ldr	r3, [sp, #16]
 810d130:	3301      	adds	r3, #1
 810d132:	9304      	str	r3, [sp, #16]
 810d134:	f108 0801 	add.w	r8, r8, #1
 810d138:	2301      	movs	r3, #1
 810d13a:	9306      	str	r3, [sp, #24]
 810d13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d13e:	2b00      	cmp	r3, #0
 810d140:	f47f af74 	bne.w	810d02c <_dtoa_r+0x7f4>
 810d144:	2001      	movs	r0, #1
 810d146:	e779      	b.n	810d03c <_dtoa_r+0x804>
 810d148:	2300      	movs	r3, #0
 810d14a:	e7f6      	b.n	810d13a <_dtoa_r+0x902>
 810d14c:	9b02      	ldr	r3, [sp, #8]
 810d14e:	e7f4      	b.n	810d13a <_dtoa_r+0x902>
 810d150:	d085      	beq.n	810d05e <_dtoa_r+0x826>
 810d152:	4618      	mov	r0, r3
 810d154:	301c      	adds	r0, #28
 810d156:	e77d      	b.n	810d054 <_dtoa_r+0x81c>
 810d158:	40240000 	.word	0x40240000
 810d15c:	9b01      	ldr	r3, [sp, #4]
 810d15e:	2b00      	cmp	r3, #0
 810d160:	dc38      	bgt.n	810d1d4 <_dtoa_r+0x99c>
 810d162:	9b05      	ldr	r3, [sp, #20]
 810d164:	2b02      	cmp	r3, #2
 810d166:	dd35      	ble.n	810d1d4 <_dtoa_r+0x99c>
 810d168:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810d16c:	f1b9 0f00 	cmp.w	r9, #0
 810d170:	d10d      	bne.n	810d18e <_dtoa_r+0x956>
 810d172:	4631      	mov	r1, r6
 810d174:	464b      	mov	r3, r9
 810d176:	2205      	movs	r2, #5
 810d178:	4620      	mov	r0, r4
 810d17a:	f000 ff75 	bl	810e068 <__multadd>
 810d17e:	4601      	mov	r1, r0
 810d180:	4606      	mov	r6, r0
 810d182:	4658      	mov	r0, fp
 810d184:	f001 f9d6 	bl	810e534 <__mcmp>
 810d188:	2800      	cmp	r0, #0
 810d18a:	f73f adbd 	bgt.w	810cd08 <_dtoa_r+0x4d0>
 810d18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d190:	9d00      	ldr	r5, [sp, #0]
 810d192:	ea6f 0a03 	mvn.w	sl, r3
 810d196:	f04f 0800 	mov.w	r8, #0
 810d19a:	4631      	mov	r1, r6
 810d19c:	4620      	mov	r0, r4
 810d19e:	f000 ff41 	bl	810e024 <_Bfree>
 810d1a2:	2f00      	cmp	r7, #0
 810d1a4:	f43f aeb4 	beq.w	810cf10 <_dtoa_r+0x6d8>
 810d1a8:	f1b8 0f00 	cmp.w	r8, #0
 810d1ac:	d005      	beq.n	810d1ba <_dtoa_r+0x982>
 810d1ae:	45b8      	cmp	r8, r7
 810d1b0:	d003      	beq.n	810d1ba <_dtoa_r+0x982>
 810d1b2:	4641      	mov	r1, r8
 810d1b4:	4620      	mov	r0, r4
 810d1b6:	f000 ff35 	bl	810e024 <_Bfree>
 810d1ba:	4639      	mov	r1, r7
 810d1bc:	4620      	mov	r0, r4
 810d1be:	f000 ff31 	bl	810e024 <_Bfree>
 810d1c2:	e6a5      	b.n	810cf10 <_dtoa_r+0x6d8>
 810d1c4:	2600      	movs	r6, #0
 810d1c6:	4637      	mov	r7, r6
 810d1c8:	e7e1      	b.n	810d18e <_dtoa_r+0x956>
 810d1ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 810d1cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810d1d0:	4637      	mov	r7, r6
 810d1d2:	e599      	b.n	810cd08 <_dtoa_r+0x4d0>
 810d1d4:	9b08      	ldr	r3, [sp, #32]
 810d1d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810d1da:	2b00      	cmp	r3, #0
 810d1dc:	f000 80fd 	beq.w	810d3da <_dtoa_r+0xba2>
 810d1e0:	2d00      	cmp	r5, #0
 810d1e2:	dd05      	ble.n	810d1f0 <_dtoa_r+0x9b8>
 810d1e4:	4639      	mov	r1, r7
 810d1e6:	462a      	mov	r2, r5
 810d1e8:	4620      	mov	r0, r4
 810d1ea:	f001 f937 	bl	810e45c <__lshift>
 810d1ee:	4607      	mov	r7, r0
 810d1f0:	9b06      	ldr	r3, [sp, #24]
 810d1f2:	2b00      	cmp	r3, #0
 810d1f4:	d05c      	beq.n	810d2b0 <_dtoa_r+0xa78>
 810d1f6:	6879      	ldr	r1, [r7, #4]
 810d1f8:	4620      	mov	r0, r4
 810d1fa:	f000 fed3 	bl	810dfa4 <_Balloc>
 810d1fe:	4605      	mov	r5, r0
 810d200:	b928      	cbnz	r0, 810d20e <_dtoa_r+0x9d6>
 810d202:	4b80      	ldr	r3, [pc, #512]	; (810d404 <_dtoa_r+0xbcc>)
 810d204:	4602      	mov	r2, r0
 810d206:	f240 21ea 	movw	r1, #746	; 0x2ea
 810d20a:	f7ff bb2e 	b.w	810c86a <_dtoa_r+0x32>
 810d20e:	693a      	ldr	r2, [r7, #16]
 810d210:	3202      	adds	r2, #2
 810d212:	0092      	lsls	r2, r2, #2
 810d214:	f107 010c 	add.w	r1, r7, #12
 810d218:	300c      	adds	r0, #12
 810d21a:	f7fd fa17 	bl	810a64c <memcpy>
 810d21e:	2201      	movs	r2, #1
 810d220:	4629      	mov	r1, r5
 810d222:	4620      	mov	r0, r4
 810d224:	f001 f91a 	bl	810e45c <__lshift>
 810d228:	9b00      	ldr	r3, [sp, #0]
 810d22a:	3301      	adds	r3, #1
 810d22c:	9301      	str	r3, [sp, #4]
 810d22e:	9b00      	ldr	r3, [sp, #0]
 810d230:	444b      	add	r3, r9
 810d232:	9307      	str	r3, [sp, #28]
 810d234:	9b02      	ldr	r3, [sp, #8]
 810d236:	f003 0301 	and.w	r3, r3, #1
 810d23a:	46b8      	mov	r8, r7
 810d23c:	9306      	str	r3, [sp, #24]
 810d23e:	4607      	mov	r7, r0
 810d240:	9b01      	ldr	r3, [sp, #4]
 810d242:	4631      	mov	r1, r6
 810d244:	3b01      	subs	r3, #1
 810d246:	4658      	mov	r0, fp
 810d248:	9302      	str	r3, [sp, #8]
 810d24a:	f7ff fa6a 	bl	810c722 <quorem>
 810d24e:	4603      	mov	r3, r0
 810d250:	3330      	adds	r3, #48	; 0x30
 810d252:	9004      	str	r0, [sp, #16]
 810d254:	4641      	mov	r1, r8
 810d256:	4658      	mov	r0, fp
 810d258:	9308      	str	r3, [sp, #32]
 810d25a:	f001 f96b 	bl	810e534 <__mcmp>
 810d25e:	463a      	mov	r2, r7
 810d260:	4681      	mov	r9, r0
 810d262:	4631      	mov	r1, r6
 810d264:	4620      	mov	r0, r4
 810d266:	f001 f981 	bl	810e56c <__mdiff>
 810d26a:	68c2      	ldr	r2, [r0, #12]
 810d26c:	9b08      	ldr	r3, [sp, #32]
 810d26e:	4605      	mov	r5, r0
 810d270:	bb02      	cbnz	r2, 810d2b4 <_dtoa_r+0xa7c>
 810d272:	4601      	mov	r1, r0
 810d274:	4658      	mov	r0, fp
 810d276:	f001 f95d 	bl	810e534 <__mcmp>
 810d27a:	9b08      	ldr	r3, [sp, #32]
 810d27c:	4602      	mov	r2, r0
 810d27e:	4629      	mov	r1, r5
 810d280:	4620      	mov	r0, r4
 810d282:	e9cd 3208 	strd	r3, r2, [sp, #32]
 810d286:	f000 fecd 	bl	810e024 <_Bfree>
 810d28a:	9b05      	ldr	r3, [sp, #20]
 810d28c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d28e:	9d01      	ldr	r5, [sp, #4]
 810d290:	ea43 0102 	orr.w	r1, r3, r2
 810d294:	9b06      	ldr	r3, [sp, #24]
 810d296:	430b      	orrs	r3, r1
 810d298:	9b08      	ldr	r3, [sp, #32]
 810d29a:	d10d      	bne.n	810d2b8 <_dtoa_r+0xa80>
 810d29c:	2b39      	cmp	r3, #57	; 0x39
 810d29e:	d029      	beq.n	810d2f4 <_dtoa_r+0xabc>
 810d2a0:	f1b9 0f00 	cmp.w	r9, #0
 810d2a4:	dd01      	ble.n	810d2aa <_dtoa_r+0xa72>
 810d2a6:	9b04      	ldr	r3, [sp, #16]
 810d2a8:	3331      	adds	r3, #49	; 0x31
 810d2aa:	9a02      	ldr	r2, [sp, #8]
 810d2ac:	7013      	strb	r3, [r2, #0]
 810d2ae:	e774      	b.n	810d19a <_dtoa_r+0x962>
 810d2b0:	4638      	mov	r0, r7
 810d2b2:	e7b9      	b.n	810d228 <_dtoa_r+0x9f0>
 810d2b4:	2201      	movs	r2, #1
 810d2b6:	e7e2      	b.n	810d27e <_dtoa_r+0xa46>
 810d2b8:	f1b9 0f00 	cmp.w	r9, #0
 810d2bc:	db06      	blt.n	810d2cc <_dtoa_r+0xa94>
 810d2be:	9905      	ldr	r1, [sp, #20]
 810d2c0:	ea41 0909 	orr.w	r9, r1, r9
 810d2c4:	9906      	ldr	r1, [sp, #24]
 810d2c6:	ea59 0101 	orrs.w	r1, r9, r1
 810d2ca:	d120      	bne.n	810d30e <_dtoa_r+0xad6>
 810d2cc:	2a00      	cmp	r2, #0
 810d2ce:	ddec      	ble.n	810d2aa <_dtoa_r+0xa72>
 810d2d0:	4659      	mov	r1, fp
 810d2d2:	2201      	movs	r2, #1
 810d2d4:	4620      	mov	r0, r4
 810d2d6:	9301      	str	r3, [sp, #4]
 810d2d8:	f001 f8c0 	bl	810e45c <__lshift>
 810d2dc:	4631      	mov	r1, r6
 810d2de:	4683      	mov	fp, r0
 810d2e0:	f001 f928 	bl	810e534 <__mcmp>
 810d2e4:	2800      	cmp	r0, #0
 810d2e6:	9b01      	ldr	r3, [sp, #4]
 810d2e8:	dc02      	bgt.n	810d2f0 <_dtoa_r+0xab8>
 810d2ea:	d1de      	bne.n	810d2aa <_dtoa_r+0xa72>
 810d2ec:	07da      	lsls	r2, r3, #31
 810d2ee:	d5dc      	bpl.n	810d2aa <_dtoa_r+0xa72>
 810d2f0:	2b39      	cmp	r3, #57	; 0x39
 810d2f2:	d1d8      	bne.n	810d2a6 <_dtoa_r+0xa6e>
 810d2f4:	9a02      	ldr	r2, [sp, #8]
 810d2f6:	2339      	movs	r3, #57	; 0x39
 810d2f8:	7013      	strb	r3, [r2, #0]
 810d2fa:	462b      	mov	r3, r5
 810d2fc:	461d      	mov	r5, r3
 810d2fe:	3b01      	subs	r3, #1
 810d300:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810d304:	2a39      	cmp	r2, #57	; 0x39
 810d306:	d050      	beq.n	810d3aa <_dtoa_r+0xb72>
 810d308:	3201      	adds	r2, #1
 810d30a:	701a      	strb	r2, [r3, #0]
 810d30c:	e745      	b.n	810d19a <_dtoa_r+0x962>
 810d30e:	2a00      	cmp	r2, #0
 810d310:	dd03      	ble.n	810d31a <_dtoa_r+0xae2>
 810d312:	2b39      	cmp	r3, #57	; 0x39
 810d314:	d0ee      	beq.n	810d2f4 <_dtoa_r+0xabc>
 810d316:	3301      	adds	r3, #1
 810d318:	e7c7      	b.n	810d2aa <_dtoa_r+0xa72>
 810d31a:	9a01      	ldr	r2, [sp, #4]
 810d31c:	9907      	ldr	r1, [sp, #28]
 810d31e:	f802 3c01 	strb.w	r3, [r2, #-1]
 810d322:	428a      	cmp	r2, r1
 810d324:	d02a      	beq.n	810d37c <_dtoa_r+0xb44>
 810d326:	4659      	mov	r1, fp
 810d328:	2300      	movs	r3, #0
 810d32a:	220a      	movs	r2, #10
 810d32c:	4620      	mov	r0, r4
 810d32e:	f000 fe9b 	bl	810e068 <__multadd>
 810d332:	45b8      	cmp	r8, r7
 810d334:	4683      	mov	fp, r0
 810d336:	f04f 0300 	mov.w	r3, #0
 810d33a:	f04f 020a 	mov.w	r2, #10
 810d33e:	4641      	mov	r1, r8
 810d340:	4620      	mov	r0, r4
 810d342:	d107      	bne.n	810d354 <_dtoa_r+0xb1c>
 810d344:	f000 fe90 	bl	810e068 <__multadd>
 810d348:	4680      	mov	r8, r0
 810d34a:	4607      	mov	r7, r0
 810d34c:	9b01      	ldr	r3, [sp, #4]
 810d34e:	3301      	adds	r3, #1
 810d350:	9301      	str	r3, [sp, #4]
 810d352:	e775      	b.n	810d240 <_dtoa_r+0xa08>
 810d354:	f000 fe88 	bl	810e068 <__multadd>
 810d358:	4639      	mov	r1, r7
 810d35a:	4680      	mov	r8, r0
 810d35c:	2300      	movs	r3, #0
 810d35e:	220a      	movs	r2, #10
 810d360:	4620      	mov	r0, r4
 810d362:	f000 fe81 	bl	810e068 <__multadd>
 810d366:	4607      	mov	r7, r0
 810d368:	e7f0      	b.n	810d34c <_dtoa_r+0xb14>
 810d36a:	f1b9 0f00 	cmp.w	r9, #0
 810d36e:	9a00      	ldr	r2, [sp, #0]
 810d370:	bfcc      	ite	gt
 810d372:	464d      	movgt	r5, r9
 810d374:	2501      	movle	r5, #1
 810d376:	4415      	add	r5, r2
 810d378:	f04f 0800 	mov.w	r8, #0
 810d37c:	4659      	mov	r1, fp
 810d37e:	2201      	movs	r2, #1
 810d380:	4620      	mov	r0, r4
 810d382:	9301      	str	r3, [sp, #4]
 810d384:	f001 f86a 	bl	810e45c <__lshift>
 810d388:	4631      	mov	r1, r6
 810d38a:	4683      	mov	fp, r0
 810d38c:	f001 f8d2 	bl	810e534 <__mcmp>
 810d390:	2800      	cmp	r0, #0
 810d392:	dcb2      	bgt.n	810d2fa <_dtoa_r+0xac2>
 810d394:	d102      	bne.n	810d39c <_dtoa_r+0xb64>
 810d396:	9b01      	ldr	r3, [sp, #4]
 810d398:	07db      	lsls	r3, r3, #31
 810d39a:	d4ae      	bmi.n	810d2fa <_dtoa_r+0xac2>
 810d39c:	462b      	mov	r3, r5
 810d39e:	461d      	mov	r5, r3
 810d3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810d3a4:	2a30      	cmp	r2, #48	; 0x30
 810d3a6:	d0fa      	beq.n	810d39e <_dtoa_r+0xb66>
 810d3a8:	e6f7      	b.n	810d19a <_dtoa_r+0x962>
 810d3aa:	9a00      	ldr	r2, [sp, #0]
 810d3ac:	429a      	cmp	r2, r3
 810d3ae:	d1a5      	bne.n	810d2fc <_dtoa_r+0xac4>
 810d3b0:	f10a 0a01 	add.w	sl, sl, #1
 810d3b4:	2331      	movs	r3, #49	; 0x31
 810d3b6:	e779      	b.n	810d2ac <_dtoa_r+0xa74>
 810d3b8:	4b13      	ldr	r3, [pc, #76]	; (810d408 <_dtoa_r+0xbd0>)
 810d3ba:	f7ff baaf 	b.w	810c91c <_dtoa_r+0xe4>
 810d3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d3c0:	2b00      	cmp	r3, #0
 810d3c2:	f47f aa86 	bne.w	810c8d2 <_dtoa_r+0x9a>
 810d3c6:	4b11      	ldr	r3, [pc, #68]	; (810d40c <_dtoa_r+0xbd4>)
 810d3c8:	f7ff baa8 	b.w	810c91c <_dtoa_r+0xe4>
 810d3cc:	f1b9 0f00 	cmp.w	r9, #0
 810d3d0:	dc03      	bgt.n	810d3da <_dtoa_r+0xba2>
 810d3d2:	9b05      	ldr	r3, [sp, #20]
 810d3d4:	2b02      	cmp	r3, #2
 810d3d6:	f73f aec9 	bgt.w	810d16c <_dtoa_r+0x934>
 810d3da:	9d00      	ldr	r5, [sp, #0]
 810d3dc:	4631      	mov	r1, r6
 810d3de:	4658      	mov	r0, fp
 810d3e0:	f7ff f99f 	bl	810c722 <quorem>
 810d3e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810d3e8:	f805 3b01 	strb.w	r3, [r5], #1
 810d3ec:	9a00      	ldr	r2, [sp, #0]
 810d3ee:	1aaa      	subs	r2, r5, r2
 810d3f0:	4591      	cmp	r9, r2
 810d3f2:	ddba      	ble.n	810d36a <_dtoa_r+0xb32>
 810d3f4:	4659      	mov	r1, fp
 810d3f6:	2300      	movs	r3, #0
 810d3f8:	220a      	movs	r2, #10
 810d3fa:	4620      	mov	r0, r4
 810d3fc:	f000 fe34 	bl	810e068 <__multadd>
 810d400:	4683      	mov	fp, r0
 810d402:	e7eb      	b.n	810d3dc <_dtoa_r+0xba4>
 810d404:	0810f39c 	.word	0x0810f39c
 810d408:	0810f199 	.word	0x0810f199
 810d40c:	0810f319 	.word	0x0810f319

0810d410 <__sflush_r>:
 810d410:	898a      	ldrh	r2, [r1, #12]
 810d412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d416:	4605      	mov	r5, r0
 810d418:	0710      	lsls	r0, r2, #28
 810d41a:	460c      	mov	r4, r1
 810d41c:	d458      	bmi.n	810d4d0 <__sflush_r+0xc0>
 810d41e:	684b      	ldr	r3, [r1, #4]
 810d420:	2b00      	cmp	r3, #0
 810d422:	dc05      	bgt.n	810d430 <__sflush_r+0x20>
 810d424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810d426:	2b00      	cmp	r3, #0
 810d428:	dc02      	bgt.n	810d430 <__sflush_r+0x20>
 810d42a:	2000      	movs	r0, #0
 810d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d432:	2e00      	cmp	r6, #0
 810d434:	d0f9      	beq.n	810d42a <__sflush_r+0x1a>
 810d436:	2300      	movs	r3, #0
 810d438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810d43c:	682f      	ldr	r7, [r5, #0]
 810d43e:	602b      	str	r3, [r5, #0]
 810d440:	d032      	beq.n	810d4a8 <__sflush_r+0x98>
 810d442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810d444:	89a3      	ldrh	r3, [r4, #12]
 810d446:	075a      	lsls	r2, r3, #29
 810d448:	d505      	bpl.n	810d456 <__sflush_r+0x46>
 810d44a:	6863      	ldr	r3, [r4, #4]
 810d44c:	1ac0      	subs	r0, r0, r3
 810d44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810d450:	b10b      	cbz	r3, 810d456 <__sflush_r+0x46>
 810d452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810d454:	1ac0      	subs	r0, r0, r3
 810d456:	2300      	movs	r3, #0
 810d458:	4602      	mov	r2, r0
 810d45a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d45c:	6a21      	ldr	r1, [r4, #32]
 810d45e:	4628      	mov	r0, r5
 810d460:	47b0      	blx	r6
 810d462:	1c43      	adds	r3, r0, #1
 810d464:	89a3      	ldrh	r3, [r4, #12]
 810d466:	d106      	bne.n	810d476 <__sflush_r+0x66>
 810d468:	6829      	ldr	r1, [r5, #0]
 810d46a:	291d      	cmp	r1, #29
 810d46c:	d82c      	bhi.n	810d4c8 <__sflush_r+0xb8>
 810d46e:	4a2a      	ldr	r2, [pc, #168]	; (810d518 <__sflush_r+0x108>)
 810d470:	40ca      	lsrs	r2, r1
 810d472:	07d6      	lsls	r6, r2, #31
 810d474:	d528      	bpl.n	810d4c8 <__sflush_r+0xb8>
 810d476:	2200      	movs	r2, #0
 810d478:	6062      	str	r2, [r4, #4]
 810d47a:	04d9      	lsls	r1, r3, #19
 810d47c:	6922      	ldr	r2, [r4, #16]
 810d47e:	6022      	str	r2, [r4, #0]
 810d480:	d504      	bpl.n	810d48c <__sflush_r+0x7c>
 810d482:	1c42      	adds	r2, r0, #1
 810d484:	d101      	bne.n	810d48a <__sflush_r+0x7a>
 810d486:	682b      	ldr	r3, [r5, #0]
 810d488:	b903      	cbnz	r3, 810d48c <__sflush_r+0x7c>
 810d48a:	6560      	str	r0, [r4, #84]	; 0x54
 810d48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d48e:	602f      	str	r7, [r5, #0]
 810d490:	2900      	cmp	r1, #0
 810d492:	d0ca      	beq.n	810d42a <__sflush_r+0x1a>
 810d494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d498:	4299      	cmp	r1, r3
 810d49a:	d002      	beq.n	810d4a2 <__sflush_r+0x92>
 810d49c:	4628      	mov	r0, r5
 810d49e:	f7fd f8eb 	bl	810a678 <_free_r>
 810d4a2:	2000      	movs	r0, #0
 810d4a4:	6360      	str	r0, [r4, #52]	; 0x34
 810d4a6:	e7c1      	b.n	810d42c <__sflush_r+0x1c>
 810d4a8:	6a21      	ldr	r1, [r4, #32]
 810d4aa:	2301      	movs	r3, #1
 810d4ac:	4628      	mov	r0, r5
 810d4ae:	47b0      	blx	r6
 810d4b0:	1c41      	adds	r1, r0, #1
 810d4b2:	d1c7      	bne.n	810d444 <__sflush_r+0x34>
 810d4b4:	682b      	ldr	r3, [r5, #0]
 810d4b6:	2b00      	cmp	r3, #0
 810d4b8:	d0c4      	beq.n	810d444 <__sflush_r+0x34>
 810d4ba:	2b1d      	cmp	r3, #29
 810d4bc:	d001      	beq.n	810d4c2 <__sflush_r+0xb2>
 810d4be:	2b16      	cmp	r3, #22
 810d4c0:	d101      	bne.n	810d4c6 <__sflush_r+0xb6>
 810d4c2:	602f      	str	r7, [r5, #0]
 810d4c4:	e7b1      	b.n	810d42a <__sflush_r+0x1a>
 810d4c6:	89a3      	ldrh	r3, [r4, #12]
 810d4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d4cc:	81a3      	strh	r3, [r4, #12]
 810d4ce:	e7ad      	b.n	810d42c <__sflush_r+0x1c>
 810d4d0:	690f      	ldr	r7, [r1, #16]
 810d4d2:	2f00      	cmp	r7, #0
 810d4d4:	d0a9      	beq.n	810d42a <__sflush_r+0x1a>
 810d4d6:	0793      	lsls	r3, r2, #30
 810d4d8:	680e      	ldr	r6, [r1, #0]
 810d4da:	bf08      	it	eq
 810d4dc:	694b      	ldreq	r3, [r1, #20]
 810d4de:	600f      	str	r7, [r1, #0]
 810d4e0:	bf18      	it	ne
 810d4e2:	2300      	movne	r3, #0
 810d4e4:	eba6 0807 	sub.w	r8, r6, r7
 810d4e8:	608b      	str	r3, [r1, #8]
 810d4ea:	f1b8 0f00 	cmp.w	r8, #0
 810d4ee:	dd9c      	ble.n	810d42a <__sflush_r+0x1a>
 810d4f0:	6a21      	ldr	r1, [r4, #32]
 810d4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810d4f4:	4643      	mov	r3, r8
 810d4f6:	463a      	mov	r2, r7
 810d4f8:	4628      	mov	r0, r5
 810d4fa:	47b0      	blx	r6
 810d4fc:	2800      	cmp	r0, #0
 810d4fe:	dc06      	bgt.n	810d50e <__sflush_r+0xfe>
 810d500:	89a3      	ldrh	r3, [r4, #12]
 810d502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d506:	81a3      	strh	r3, [r4, #12]
 810d508:	f04f 30ff 	mov.w	r0, #4294967295
 810d50c:	e78e      	b.n	810d42c <__sflush_r+0x1c>
 810d50e:	4407      	add	r7, r0
 810d510:	eba8 0800 	sub.w	r8, r8, r0
 810d514:	e7e9      	b.n	810d4ea <__sflush_r+0xda>
 810d516:	bf00      	nop
 810d518:	20400001 	.word	0x20400001

0810d51c <_fflush_r>:
 810d51c:	b538      	push	{r3, r4, r5, lr}
 810d51e:	690b      	ldr	r3, [r1, #16]
 810d520:	4605      	mov	r5, r0
 810d522:	460c      	mov	r4, r1
 810d524:	b913      	cbnz	r3, 810d52c <_fflush_r+0x10>
 810d526:	2500      	movs	r5, #0
 810d528:	4628      	mov	r0, r5
 810d52a:	bd38      	pop	{r3, r4, r5, pc}
 810d52c:	b118      	cbz	r0, 810d536 <_fflush_r+0x1a>
 810d52e:	6983      	ldr	r3, [r0, #24]
 810d530:	b90b      	cbnz	r3, 810d536 <_fflush_r+0x1a>
 810d532:	f000 f887 	bl	810d644 <__sinit>
 810d536:	4b14      	ldr	r3, [pc, #80]	; (810d588 <_fflush_r+0x6c>)
 810d538:	429c      	cmp	r4, r3
 810d53a:	d11b      	bne.n	810d574 <_fflush_r+0x58>
 810d53c:	686c      	ldr	r4, [r5, #4]
 810d53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d542:	2b00      	cmp	r3, #0
 810d544:	d0ef      	beq.n	810d526 <_fflush_r+0xa>
 810d546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810d548:	07d0      	lsls	r0, r2, #31
 810d54a:	d404      	bmi.n	810d556 <_fflush_r+0x3a>
 810d54c:	0599      	lsls	r1, r3, #22
 810d54e:	d402      	bmi.n	810d556 <_fflush_r+0x3a>
 810d550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d552:	f000 fc88 	bl	810de66 <__retarget_lock_acquire_recursive>
 810d556:	4628      	mov	r0, r5
 810d558:	4621      	mov	r1, r4
 810d55a:	f7ff ff59 	bl	810d410 <__sflush_r>
 810d55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810d560:	07da      	lsls	r2, r3, #31
 810d562:	4605      	mov	r5, r0
 810d564:	d4e0      	bmi.n	810d528 <_fflush_r+0xc>
 810d566:	89a3      	ldrh	r3, [r4, #12]
 810d568:	059b      	lsls	r3, r3, #22
 810d56a:	d4dd      	bmi.n	810d528 <_fflush_r+0xc>
 810d56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d56e:	f000 fc7b 	bl	810de68 <__retarget_lock_release_recursive>
 810d572:	e7d9      	b.n	810d528 <_fflush_r+0xc>
 810d574:	4b05      	ldr	r3, [pc, #20]	; (810d58c <_fflush_r+0x70>)
 810d576:	429c      	cmp	r4, r3
 810d578:	d101      	bne.n	810d57e <_fflush_r+0x62>
 810d57a:	68ac      	ldr	r4, [r5, #8]
 810d57c:	e7df      	b.n	810d53e <_fflush_r+0x22>
 810d57e:	4b04      	ldr	r3, [pc, #16]	; (810d590 <_fflush_r+0x74>)
 810d580:	429c      	cmp	r4, r3
 810d582:	bf08      	it	eq
 810d584:	68ec      	ldreq	r4, [r5, #12]
 810d586:	e7da      	b.n	810d53e <_fflush_r+0x22>
 810d588:	0810f3d0 	.word	0x0810f3d0
 810d58c:	0810f3f0 	.word	0x0810f3f0
 810d590:	0810f3b0 	.word	0x0810f3b0

0810d594 <std>:
 810d594:	2300      	movs	r3, #0
 810d596:	b510      	push	{r4, lr}
 810d598:	4604      	mov	r4, r0
 810d59a:	e9c0 3300 	strd	r3, r3, [r0]
 810d59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810d5a2:	6083      	str	r3, [r0, #8]
 810d5a4:	8181      	strh	r1, [r0, #12]
 810d5a6:	6643      	str	r3, [r0, #100]	; 0x64
 810d5a8:	81c2      	strh	r2, [r0, #14]
 810d5aa:	6183      	str	r3, [r0, #24]
 810d5ac:	4619      	mov	r1, r3
 810d5ae:	2208      	movs	r2, #8
 810d5b0:	305c      	adds	r0, #92	; 0x5c
 810d5b2:	f7fd f859 	bl	810a668 <memset>
 810d5b6:	4b05      	ldr	r3, [pc, #20]	; (810d5cc <std+0x38>)
 810d5b8:	6263      	str	r3, [r4, #36]	; 0x24
 810d5ba:	4b05      	ldr	r3, [pc, #20]	; (810d5d0 <std+0x3c>)
 810d5bc:	62a3      	str	r3, [r4, #40]	; 0x28
 810d5be:	4b05      	ldr	r3, [pc, #20]	; (810d5d4 <std+0x40>)
 810d5c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 810d5c2:	4b05      	ldr	r3, [pc, #20]	; (810d5d8 <std+0x44>)
 810d5c4:	6224      	str	r4, [r4, #32]
 810d5c6:	6323      	str	r3, [r4, #48]	; 0x30
 810d5c8:	bd10      	pop	{r4, pc}
 810d5ca:	bf00      	nop
 810d5cc:	0810ecc5 	.word	0x0810ecc5
 810d5d0:	0810ece7 	.word	0x0810ece7
 810d5d4:	0810ed1f 	.word	0x0810ed1f
 810d5d8:	0810ed43 	.word	0x0810ed43

0810d5dc <_cleanup_r>:
 810d5dc:	4901      	ldr	r1, [pc, #4]	; (810d5e4 <_cleanup_r+0x8>)
 810d5de:	f000 b8af 	b.w	810d740 <_fwalk_reent>
 810d5e2:	bf00      	nop
 810d5e4:	0810d51d 	.word	0x0810d51d

0810d5e8 <__sfmoreglue>:
 810d5e8:	b570      	push	{r4, r5, r6, lr}
 810d5ea:	1e4a      	subs	r2, r1, #1
 810d5ec:	2568      	movs	r5, #104	; 0x68
 810d5ee:	4355      	muls	r5, r2
 810d5f0:	460e      	mov	r6, r1
 810d5f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810d5f6:	f7fd f88f 	bl	810a718 <_malloc_r>
 810d5fa:	4604      	mov	r4, r0
 810d5fc:	b140      	cbz	r0, 810d610 <__sfmoreglue+0x28>
 810d5fe:	2100      	movs	r1, #0
 810d600:	e9c0 1600 	strd	r1, r6, [r0]
 810d604:	300c      	adds	r0, #12
 810d606:	60a0      	str	r0, [r4, #8]
 810d608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810d60c:	f7fd f82c 	bl	810a668 <memset>
 810d610:	4620      	mov	r0, r4
 810d612:	bd70      	pop	{r4, r5, r6, pc}

0810d614 <__sfp_lock_acquire>:
 810d614:	4801      	ldr	r0, [pc, #4]	; (810d61c <__sfp_lock_acquire+0x8>)
 810d616:	f000 bc26 	b.w	810de66 <__retarget_lock_acquire_recursive>
 810d61a:	bf00      	nop
 810d61c:	100006a4 	.word	0x100006a4

0810d620 <__sfp_lock_release>:
 810d620:	4801      	ldr	r0, [pc, #4]	; (810d628 <__sfp_lock_release+0x8>)
 810d622:	f000 bc21 	b.w	810de68 <__retarget_lock_release_recursive>
 810d626:	bf00      	nop
 810d628:	100006a4 	.word	0x100006a4

0810d62c <__sinit_lock_acquire>:
 810d62c:	4801      	ldr	r0, [pc, #4]	; (810d634 <__sinit_lock_acquire+0x8>)
 810d62e:	f000 bc1a 	b.w	810de66 <__retarget_lock_acquire_recursive>
 810d632:	bf00      	nop
 810d634:	1000069f 	.word	0x1000069f

0810d638 <__sinit_lock_release>:
 810d638:	4801      	ldr	r0, [pc, #4]	; (810d640 <__sinit_lock_release+0x8>)
 810d63a:	f000 bc15 	b.w	810de68 <__retarget_lock_release_recursive>
 810d63e:	bf00      	nop
 810d640:	1000069f 	.word	0x1000069f

0810d644 <__sinit>:
 810d644:	b510      	push	{r4, lr}
 810d646:	4604      	mov	r4, r0
 810d648:	f7ff fff0 	bl	810d62c <__sinit_lock_acquire>
 810d64c:	69a3      	ldr	r3, [r4, #24]
 810d64e:	b11b      	cbz	r3, 810d658 <__sinit+0x14>
 810d650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810d654:	f7ff bff0 	b.w	810d638 <__sinit_lock_release>
 810d658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810d65c:	6523      	str	r3, [r4, #80]	; 0x50
 810d65e:	4b13      	ldr	r3, [pc, #76]	; (810d6ac <__sinit+0x68>)
 810d660:	4a13      	ldr	r2, [pc, #76]	; (810d6b0 <__sinit+0x6c>)
 810d662:	681b      	ldr	r3, [r3, #0]
 810d664:	62a2      	str	r2, [r4, #40]	; 0x28
 810d666:	42a3      	cmp	r3, r4
 810d668:	bf04      	itt	eq
 810d66a:	2301      	moveq	r3, #1
 810d66c:	61a3      	streq	r3, [r4, #24]
 810d66e:	4620      	mov	r0, r4
 810d670:	f000 f820 	bl	810d6b4 <__sfp>
 810d674:	6060      	str	r0, [r4, #4]
 810d676:	4620      	mov	r0, r4
 810d678:	f000 f81c 	bl	810d6b4 <__sfp>
 810d67c:	60a0      	str	r0, [r4, #8]
 810d67e:	4620      	mov	r0, r4
 810d680:	f000 f818 	bl	810d6b4 <__sfp>
 810d684:	2200      	movs	r2, #0
 810d686:	60e0      	str	r0, [r4, #12]
 810d688:	2104      	movs	r1, #4
 810d68a:	6860      	ldr	r0, [r4, #4]
 810d68c:	f7ff ff82 	bl	810d594 <std>
 810d690:	68a0      	ldr	r0, [r4, #8]
 810d692:	2201      	movs	r2, #1
 810d694:	2109      	movs	r1, #9
 810d696:	f7ff ff7d 	bl	810d594 <std>
 810d69a:	68e0      	ldr	r0, [r4, #12]
 810d69c:	2202      	movs	r2, #2
 810d69e:	2112      	movs	r1, #18
 810d6a0:	f7ff ff78 	bl	810d594 <std>
 810d6a4:	2301      	movs	r3, #1
 810d6a6:	61a3      	str	r3, [r4, #24]
 810d6a8:	e7d2      	b.n	810d650 <__sinit+0xc>
 810d6aa:	bf00      	nop
 810d6ac:	0810f174 	.word	0x0810f174
 810d6b0:	0810d5dd 	.word	0x0810d5dd

0810d6b4 <__sfp>:
 810d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d6b6:	4607      	mov	r7, r0
 810d6b8:	f7ff ffac 	bl	810d614 <__sfp_lock_acquire>
 810d6bc:	4b1e      	ldr	r3, [pc, #120]	; (810d738 <__sfp+0x84>)
 810d6be:	681e      	ldr	r6, [r3, #0]
 810d6c0:	69b3      	ldr	r3, [r6, #24]
 810d6c2:	b913      	cbnz	r3, 810d6ca <__sfp+0x16>
 810d6c4:	4630      	mov	r0, r6
 810d6c6:	f7ff ffbd 	bl	810d644 <__sinit>
 810d6ca:	3648      	adds	r6, #72	; 0x48
 810d6cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810d6d0:	3b01      	subs	r3, #1
 810d6d2:	d503      	bpl.n	810d6dc <__sfp+0x28>
 810d6d4:	6833      	ldr	r3, [r6, #0]
 810d6d6:	b30b      	cbz	r3, 810d71c <__sfp+0x68>
 810d6d8:	6836      	ldr	r6, [r6, #0]
 810d6da:	e7f7      	b.n	810d6cc <__sfp+0x18>
 810d6dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810d6e0:	b9d5      	cbnz	r5, 810d718 <__sfp+0x64>
 810d6e2:	4b16      	ldr	r3, [pc, #88]	; (810d73c <__sfp+0x88>)
 810d6e4:	60e3      	str	r3, [r4, #12]
 810d6e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810d6ea:	6665      	str	r5, [r4, #100]	; 0x64
 810d6ec:	f000 fbba 	bl	810de64 <__retarget_lock_init_recursive>
 810d6f0:	f7ff ff96 	bl	810d620 <__sfp_lock_release>
 810d6f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810d6f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810d6fc:	6025      	str	r5, [r4, #0]
 810d6fe:	61a5      	str	r5, [r4, #24]
 810d700:	2208      	movs	r2, #8
 810d702:	4629      	mov	r1, r5
 810d704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810d708:	f7fc ffae 	bl	810a668 <memset>
 810d70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810d710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810d714:	4620      	mov	r0, r4
 810d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d718:	3468      	adds	r4, #104	; 0x68
 810d71a:	e7d9      	b.n	810d6d0 <__sfp+0x1c>
 810d71c:	2104      	movs	r1, #4
 810d71e:	4638      	mov	r0, r7
 810d720:	f7ff ff62 	bl	810d5e8 <__sfmoreglue>
 810d724:	4604      	mov	r4, r0
 810d726:	6030      	str	r0, [r6, #0]
 810d728:	2800      	cmp	r0, #0
 810d72a:	d1d5      	bne.n	810d6d8 <__sfp+0x24>
 810d72c:	f7ff ff78 	bl	810d620 <__sfp_lock_release>
 810d730:	230c      	movs	r3, #12
 810d732:	603b      	str	r3, [r7, #0]
 810d734:	e7ee      	b.n	810d714 <__sfp+0x60>
 810d736:	bf00      	nop
 810d738:	0810f174 	.word	0x0810f174
 810d73c:	ffff0001 	.word	0xffff0001

0810d740 <_fwalk_reent>:
 810d740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d744:	4606      	mov	r6, r0
 810d746:	4688      	mov	r8, r1
 810d748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810d74c:	2700      	movs	r7, #0
 810d74e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810d752:	f1b9 0901 	subs.w	r9, r9, #1
 810d756:	d505      	bpl.n	810d764 <_fwalk_reent+0x24>
 810d758:	6824      	ldr	r4, [r4, #0]
 810d75a:	2c00      	cmp	r4, #0
 810d75c:	d1f7      	bne.n	810d74e <_fwalk_reent+0xe>
 810d75e:	4638      	mov	r0, r7
 810d760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d764:	89ab      	ldrh	r3, [r5, #12]
 810d766:	2b01      	cmp	r3, #1
 810d768:	d907      	bls.n	810d77a <_fwalk_reent+0x3a>
 810d76a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810d76e:	3301      	adds	r3, #1
 810d770:	d003      	beq.n	810d77a <_fwalk_reent+0x3a>
 810d772:	4629      	mov	r1, r5
 810d774:	4630      	mov	r0, r6
 810d776:	47c0      	blx	r8
 810d778:	4307      	orrs	r7, r0
 810d77a:	3568      	adds	r5, #104	; 0x68
 810d77c:	e7e9      	b.n	810d752 <_fwalk_reent+0x12>

0810d77e <rshift>:
 810d77e:	6903      	ldr	r3, [r0, #16]
 810d780:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810d784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d788:	ea4f 1261 	mov.w	r2, r1, asr #5
 810d78c:	f100 0414 	add.w	r4, r0, #20
 810d790:	dd45      	ble.n	810d81e <rshift+0xa0>
 810d792:	f011 011f 	ands.w	r1, r1, #31
 810d796:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810d79a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810d79e:	d10c      	bne.n	810d7ba <rshift+0x3c>
 810d7a0:	f100 0710 	add.w	r7, r0, #16
 810d7a4:	4629      	mov	r1, r5
 810d7a6:	42b1      	cmp	r1, r6
 810d7a8:	d334      	bcc.n	810d814 <rshift+0x96>
 810d7aa:	1a9b      	subs	r3, r3, r2
 810d7ac:	009b      	lsls	r3, r3, #2
 810d7ae:	1eea      	subs	r2, r5, #3
 810d7b0:	4296      	cmp	r6, r2
 810d7b2:	bf38      	it	cc
 810d7b4:	2300      	movcc	r3, #0
 810d7b6:	4423      	add	r3, r4
 810d7b8:	e015      	b.n	810d7e6 <rshift+0x68>
 810d7ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810d7be:	f1c1 0820 	rsb	r8, r1, #32
 810d7c2:	40cf      	lsrs	r7, r1
 810d7c4:	f105 0e04 	add.w	lr, r5, #4
 810d7c8:	46a1      	mov	r9, r4
 810d7ca:	4576      	cmp	r6, lr
 810d7cc:	46f4      	mov	ip, lr
 810d7ce:	d815      	bhi.n	810d7fc <rshift+0x7e>
 810d7d0:	1a9b      	subs	r3, r3, r2
 810d7d2:	009a      	lsls	r2, r3, #2
 810d7d4:	3a04      	subs	r2, #4
 810d7d6:	3501      	adds	r5, #1
 810d7d8:	42ae      	cmp	r6, r5
 810d7da:	bf38      	it	cc
 810d7dc:	2200      	movcc	r2, #0
 810d7de:	18a3      	adds	r3, r4, r2
 810d7e0:	50a7      	str	r7, [r4, r2]
 810d7e2:	b107      	cbz	r7, 810d7e6 <rshift+0x68>
 810d7e4:	3304      	adds	r3, #4
 810d7e6:	1b1a      	subs	r2, r3, r4
 810d7e8:	42a3      	cmp	r3, r4
 810d7ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810d7ee:	bf08      	it	eq
 810d7f0:	2300      	moveq	r3, #0
 810d7f2:	6102      	str	r2, [r0, #16]
 810d7f4:	bf08      	it	eq
 810d7f6:	6143      	streq	r3, [r0, #20]
 810d7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d7fc:	f8dc c000 	ldr.w	ip, [ip]
 810d800:	fa0c fc08 	lsl.w	ip, ip, r8
 810d804:	ea4c 0707 	orr.w	r7, ip, r7
 810d808:	f849 7b04 	str.w	r7, [r9], #4
 810d80c:	f85e 7b04 	ldr.w	r7, [lr], #4
 810d810:	40cf      	lsrs	r7, r1
 810d812:	e7da      	b.n	810d7ca <rshift+0x4c>
 810d814:	f851 cb04 	ldr.w	ip, [r1], #4
 810d818:	f847 cf04 	str.w	ip, [r7, #4]!
 810d81c:	e7c3      	b.n	810d7a6 <rshift+0x28>
 810d81e:	4623      	mov	r3, r4
 810d820:	e7e1      	b.n	810d7e6 <rshift+0x68>

0810d822 <__hexdig_fun>:
 810d822:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810d826:	2b09      	cmp	r3, #9
 810d828:	d802      	bhi.n	810d830 <__hexdig_fun+0xe>
 810d82a:	3820      	subs	r0, #32
 810d82c:	b2c0      	uxtb	r0, r0
 810d82e:	4770      	bx	lr
 810d830:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810d834:	2b05      	cmp	r3, #5
 810d836:	d801      	bhi.n	810d83c <__hexdig_fun+0x1a>
 810d838:	3847      	subs	r0, #71	; 0x47
 810d83a:	e7f7      	b.n	810d82c <__hexdig_fun+0xa>
 810d83c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810d840:	2b05      	cmp	r3, #5
 810d842:	d801      	bhi.n	810d848 <__hexdig_fun+0x26>
 810d844:	3827      	subs	r0, #39	; 0x27
 810d846:	e7f1      	b.n	810d82c <__hexdig_fun+0xa>
 810d848:	2000      	movs	r0, #0
 810d84a:	4770      	bx	lr

0810d84c <__gethex>:
 810d84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d850:	ed2d 8b02 	vpush	{d8}
 810d854:	b089      	sub	sp, #36	; 0x24
 810d856:	ee08 0a10 	vmov	s16, r0
 810d85a:	9304      	str	r3, [sp, #16]
 810d85c:	4bbc      	ldr	r3, [pc, #752]	; (810db50 <__gethex+0x304>)
 810d85e:	681b      	ldr	r3, [r3, #0]
 810d860:	9301      	str	r3, [sp, #4]
 810d862:	4618      	mov	r0, r3
 810d864:	468b      	mov	fp, r1
 810d866:	4690      	mov	r8, r2
 810d868:	f7f2 fd44 	bl	81002f4 <strlen>
 810d86c:	9b01      	ldr	r3, [sp, #4]
 810d86e:	f8db 2000 	ldr.w	r2, [fp]
 810d872:	4403      	add	r3, r0
 810d874:	4682      	mov	sl, r0
 810d876:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810d87a:	9305      	str	r3, [sp, #20]
 810d87c:	1c93      	adds	r3, r2, #2
 810d87e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810d882:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810d886:	32fe      	adds	r2, #254	; 0xfe
 810d888:	18d1      	adds	r1, r2, r3
 810d88a:	461f      	mov	r7, r3
 810d88c:	f813 0b01 	ldrb.w	r0, [r3], #1
 810d890:	9100      	str	r1, [sp, #0]
 810d892:	2830      	cmp	r0, #48	; 0x30
 810d894:	d0f8      	beq.n	810d888 <__gethex+0x3c>
 810d896:	f7ff ffc4 	bl	810d822 <__hexdig_fun>
 810d89a:	4604      	mov	r4, r0
 810d89c:	2800      	cmp	r0, #0
 810d89e:	d13a      	bne.n	810d916 <__gethex+0xca>
 810d8a0:	9901      	ldr	r1, [sp, #4]
 810d8a2:	4652      	mov	r2, sl
 810d8a4:	4638      	mov	r0, r7
 810d8a6:	f7fd ff9b 	bl	810b7e0 <strncmp>
 810d8aa:	4605      	mov	r5, r0
 810d8ac:	2800      	cmp	r0, #0
 810d8ae:	d168      	bne.n	810d982 <__gethex+0x136>
 810d8b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 810d8b4:	eb07 060a 	add.w	r6, r7, sl
 810d8b8:	f7ff ffb3 	bl	810d822 <__hexdig_fun>
 810d8bc:	2800      	cmp	r0, #0
 810d8be:	d062      	beq.n	810d986 <__gethex+0x13a>
 810d8c0:	4633      	mov	r3, r6
 810d8c2:	7818      	ldrb	r0, [r3, #0]
 810d8c4:	2830      	cmp	r0, #48	; 0x30
 810d8c6:	461f      	mov	r7, r3
 810d8c8:	f103 0301 	add.w	r3, r3, #1
 810d8cc:	d0f9      	beq.n	810d8c2 <__gethex+0x76>
 810d8ce:	f7ff ffa8 	bl	810d822 <__hexdig_fun>
 810d8d2:	2301      	movs	r3, #1
 810d8d4:	fab0 f480 	clz	r4, r0
 810d8d8:	0964      	lsrs	r4, r4, #5
 810d8da:	4635      	mov	r5, r6
 810d8dc:	9300      	str	r3, [sp, #0]
 810d8de:	463a      	mov	r2, r7
 810d8e0:	4616      	mov	r6, r2
 810d8e2:	3201      	adds	r2, #1
 810d8e4:	7830      	ldrb	r0, [r6, #0]
 810d8e6:	f7ff ff9c 	bl	810d822 <__hexdig_fun>
 810d8ea:	2800      	cmp	r0, #0
 810d8ec:	d1f8      	bne.n	810d8e0 <__gethex+0x94>
 810d8ee:	9901      	ldr	r1, [sp, #4]
 810d8f0:	4652      	mov	r2, sl
 810d8f2:	4630      	mov	r0, r6
 810d8f4:	f7fd ff74 	bl	810b7e0 <strncmp>
 810d8f8:	b980      	cbnz	r0, 810d91c <__gethex+0xd0>
 810d8fa:	b94d      	cbnz	r5, 810d910 <__gethex+0xc4>
 810d8fc:	eb06 050a 	add.w	r5, r6, sl
 810d900:	462a      	mov	r2, r5
 810d902:	4616      	mov	r6, r2
 810d904:	3201      	adds	r2, #1
 810d906:	7830      	ldrb	r0, [r6, #0]
 810d908:	f7ff ff8b 	bl	810d822 <__hexdig_fun>
 810d90c:	2800      	cmp	r0, #0
 810d90e:	d1f8      	bne.n	810d902 <__gethex+0xb6>
 810d910:	1bad      	subs	r5, r5, r6
 810d912:	00ad      	lsls	r5, r5, #2
 810d914:	e004      	b.n	810d920 <__gethex+0xd4>
 810d916:	2400      	movs	r4, #0
 810d918:	4625      	mov	r5, r4
 810d91a:	e7e0      	b.n	810d8de <__gethex+0x92>
 810d91c:	2d00      	cmp	r5, #0
 810d91e:	d1f7      	bne.n	810d910 <__gethex+0xc4>
 810d920:	7833      	ldrb	r3, [r6, #0]
 810d922:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810d926:	2b50      	cmp	r3, #80	; 0x50
 810d928:	d13b      	bne.n	810d9a2 <__gethex+0x156>
 810d92a:	7873      	ldrb	r3, [r6, #1]
 810d92c:	2b2b      	cmp	r3, #43	; 0x2b
 810d92e:	d02c      	beq.n	810d98a <__gethex+0x13e>
 810d930:	2b2d      	cmp	r3, #45	; 0x2d
 810d932:	d02e      	beq.n	810d992 <__gethex+0x146>
 810d934:	1c71      	adds	r1, r6, #1
 810d936:	f04f 0900 	mov.w	r9, #0
 810d93a:	7808      	ldrb	r0, [r1, #0]
 810d93c:	f7ff ff71 	bl	810d822 <__hexdig_fun>
 810d940:	1e43      	subs	r3, r0, #1
 810d942:	b2db      	uxtb	r3, r3
 810d944:	2b18      	cmp	r3, #24
 810d946:	d82c      	bhi.n	810d9a2 <__gethex+0x156>
 810d948:	f1a0 0210 	sub.w	r2, r0, #16
 810d94c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810d950:	f7ff ff67 	bl	810d822 <__hexdig_fun>
 810d954:	1e43      	subs	r3, r0, #1
 810d956:	b2db      	uxtb	r3, r3
 810d958:	2b18      	cmp	r3, #24
 810d95a:	d91d      	bls.n	810d998 <__gethex+0x14c>
 810d95c:	f1b9 0f00 	cmp.w	r9, #0
 810d960:	d000      	beq.n	810d964 <__gethex+0x118>
 810d962:	4252      	negs	r2, r2
 810d964:	4415      	add	r5, r2
 810d966:	f8cb 1000 	str.w	r1, [fp]
 810d96a:	b1e4      	cbz	r4, 810d9a6 <__gethex+0x15a>
 810d96c:	9b00      	ldr	r3, [sp, #0]
 810d96e:	2b00      	cmp	r3, #0
 810d970:	bf14      	ite	ne
 810d972:	2700      	movne	r7, #0
 810d974:	2706      	moveq	r7, #6
 810d976:	4638      	mov	r0, r7
 810d978:	b009      	add	sp, #36	; 0x24
 810d97a:	ecbd 8b02 	vpop	{d8}
 810d97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d982:	463e      	mov	r6, r7
 810d984:	4625      	mov	r5, r4
 810d986:	2401      	movs	r4, #1
 810d988:	e7ca      	b.n	810d920 <__gethex+0xd4>
 810d98a:	f04f 0900 	mov.w	r9, #0
 810d98e:	1cb1      	adds	r1, r6, #2
 810d990:	e7d3      	b.n	810d93a <__gethex+0xee>
 810d992:	f04f 0901 	mov.w	r9, #1
 810d996:	e7fa      	b.n	810d98e <__gethex+0x142>
 810d998:	230a      	movs	r3, #10
 810d99a:	fb03 0202 	mla	r2, r3, r2, r0
 810d99e:	3a10      	subs	r2, #16
 810d9a0:	e7d4      	b.n	810d94c <__gethex+0x100>
 810d9a2:	4631      	mov	r1, r6
 810d9a4:	e7df      	b.n	810d966 <__gethex+0x11a>
 810d9a6:	1bf3      	subs	r3, r6, r7
 810d9a8:	3b01      	subs	r3, #1
 810d9aa:	4621      	mov	r1, r4
 810d9ac:	2b07      	cmp	r3, #7
 810d9ae:	dc0b      	bgt.n	810d9c8 <__gethex+0x17c>
 810d9b0:	ee18 0a10 	vmov	r0, s16
 810d9b4:	f000 faf6 	bl	810dfa4 <_Balloc>
 810d9b8:	4604      	mov	r4, r0
 810d9ba:	b940      	cbnz	r0, 810d9ce <__gethex+0x182>
 810d9bc:	4b65      	ldr	r3, [pc, #404]	; (810db54 <__gethex+0x308>)
 810d9be:	4602      	mov	r2, r0
 810d9c0:	21de      	movs	r1, #222	; 0xde
 810d9c2:	4865      	ldr	r0, [pc, #404]	; (810db58 <__gethex+0x30c>)
 810d9c4:	f7fc fdd8 	bl	810a578 <__assert_func>
 810d9c8:	3101      	adds	r1, #1
 810d9ca:	105b      	asrs	r3, r3, #1
 810d9cc:	e7ee      	b.n	810d9ac <__gethex+0x160>
 810d9ce:	f100 0914 	add.w	r9, r0, #20
 810d9d2:	f04f 0b00 	mov.w	fp, #0
 810d9d6:	f1ca 0301 	rsb	r3, sl, #1
 810d9da:	f8cd 9008 	str.w	r9, [sp, #8]
 810d9de:	f8cd b000 	str.w	fp, [sp]
 810d9e2:	9306      	str	r3, [sp, #24]
 810d9e4:	42b7      	cmp	r7, r6
 810d9e6:	d340      	bcc.n	810da6a <__gethex+0x21e>
 810d9e8:	9802      	ldr	r0, [sp, #8]
 810d9ea:	9b00      	ldr	r3, [sp, #0]
 810d9ec:	f840 3b04 	str.w	r3, [r0], #4
 810d9f0:	eba0 0009 	sub.w	r0, r0, r9
 810d9f4:	1080      	asrs	r0, r0, #2
 810d9f6:	0146      	lsls	r6, r0, #5
 810d9f8:	6120      	str	r0, [r4, #16]
 810d9fa:	4618      	mov	r0, r3
 810d9fc:	f000 fbc8 	bl	810e190 <__hi0bits>
 810da00:	1a30      	subs	r0, r6, r0
 810da02:	f8d8 6000 	ldr.w	r6, [r8]
 810da06:	42b0      	cmp	r0, r6
 810da08:	dd63      	ble.n	810dad2 <__gethex+0x286>
 810da0a:	1b87      	subs	r7, r0, r6
 810da0c:	4639      	mov	r1, r7
 810da0e:	4620      	mov	r0, r4
 810da10:	f000 ff62 	bl	810e8d8 <__any_on>
 810da14:	4682      	mov	sl, r0
 810da16:	b1a8      	cbz	r0, 810da44 <__gethex+0x1f8>
 810da18:	1e7b      	subs	r3, r7, #1
 810da1a:	1159      	asrs	r1, r3, #5
 810da1c:	f003 021f 	and.w	r2, r3, #31
 810da20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810da24:	f04f 0a01 	mov.w	sl, #1
 810da28:	fa0a f202 	lsl.w	r2, sl, r2
 810da2c:	420a      	tst	r2, r1
 810da2e:	d009      	beq.n	810da44 <__gethex+0x1f8>
 810da30:	4553      	cmp	r3, sl
 810da32:	dd05      	ble.n	810da40 <__gethex+0x1f4>
 810da34:	1eb9      	subs	r1, r7, #2
 810da36:	4620      	mov	r0, r4
 810da38:	f000 ff4e 	bl	810e8d8 <__any_on>
 810da3c:	2800      	cmp	r0, #0
 810da3e:	d145      	bne.n	810dacc <__gethex+0x280>
 810da40:	f04f 0a02 	mov.w	sl, #2
 810da44:	4639      	mov	r1, r7
 810da46:	4620      	mov	r0, r4
 810da48:	f7ff fe99 	bl	810d77e <rshift>
 810da4c:	443d      	add	r5, r7
 810da4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810da52:	42ab      	cmp	r3, r5
 810da54:	da4c      	bge.n	810daf0 <__gethex+0x2a4>
 810da56:	ee18 0a10 	vmov	r0, s16
 810da5a:	4621      	mov	r1, r4
 810da5c:	f000 fae2 	bl	810e024 <_Bfree>
 810da60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810da62:	2300      	movs	r3, #0
 810da64:	6013      	str	r3, [r2, #0]
 810da66:	27a3      	movs	r7, #163	; 0xa3
 810da68:	e785      	b.n	810d976 <__gethex+0x12a>
 810da6a:	1e73      	subs	r3, r6, #1
 810da6c:	9a05      	ldr	r2, [sp, #20]
 810da6e:	9303      	str	r3, [sp, #12]
 810da70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810da74:	4293      	cmp	r3, r2
 810da76:	d019      	beq.n	810daac <__gethex+0x260>
 810da78:	f1bb 0f20 	cmp.w	fp, #32
 810da7c:	d107      	bne.n	810da8e <__gethex+0x242>
 810da7e:	9b02      	ldr	r3, [sp, #8]
 810da80:	9a00      	ldr	r2, [sp, #0]
 810da82:	f843 2b04 	str.w	r2, [r3], #4
 810da86:	9302      	str	r3, [sp, #8]
 810da88:	2300      	movs	r3, #0
 810da8a:	9300      	str	r3, [sp, #0]
 810da8c:	469b      	mov	fp, r3
 810da8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810da92:	f7ff fec6 	bl	810d822 <__hexdig_fun>
 810da96:	9b00      	ldr	r3, [sp, #0]
 810da98:	f000 000f 	and.w	r0, r0, #15
 810da9c:	fa00 f00b 	lsl.w	r0, r0, fp
 810daa0:	4303      	orrs	r3, r0
 810daa2:	9300      	str	r3, [sp, #0]
 810daa4:	f10b 0b04 	add.w	fp, fp, #4
 810daa8:	9b03      	ldr	r3, [sp, #12]
 810daaa:	e00d      	b.n	810dac8 <__gethex+0x27c>
 810daac:	9b03      	ldr	r3, [sp, #12]
 810daae:	9a06      	ldr	r2, [sp, #24]
 810dab0:	4413      	add	r3, r2
 810dab2:	42bb      	cmp	r3, r7
 810dab4:	d3e0      	bcc.n	810da78 <__gethex+0x22c>
 810dab6:	4618      	mov	r0, r3
 810dab8:	9901      	ldr	r1, [sp, #4]
 810daba:	9307      	str	r3, [sp, #28]
 810dabc:	4652      	mov	r2, sl
 810dabe:	f7fd fe8f 	bl	810b7e0 <strncmp>
 810dac2:	9b07      	ldr	r3, [sp, #28]
 810dac4:	2800      	cmp	r0, #0
 810dac6:	d1d7      	bne.n	810da78 <__gethex+0x22c>
 810dac8:	461e      	mov	r6, r3
 810daca:	e78b      	b.n	810d9e4 <__gethex+0x198>
 810dacc:	f04f 0a03 	mov.w	sl, #3
 810dad0:	e7b8      	b.n	810da44 <__gethex+0x1f8>
 810dad2:	da0a      	bge.n	810daea <__gethex+0x29e>
 810dad4:	1a37      	subs	r7, r6, r0
 810dad6:	4621      	mov	r1, r4
 810dad8:	ee18 0a10 	vmov	r0, s16
 810dadc:	463a      	mov	r2, r7
 810dade:	f000 fcbd 	bl	810e45c <__lshift>
 810dae2:	1bed      	subs	r5, r5, r7
 810dae4:	4604      	mov	r4, r0
 810dae6:	f100 0914 	add.w	r9, r0, #20
 810daea:	f04f 0a00 	mov.w	sl, #0
 810daee:	e7ae      	b.n	810da4e <__gethex+0x202>
 810daf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810daf4:	42a8      	cmp	r0, r5
 810daf6:	dd72      	ble.n	810dbde <__gethex+0x392>
 810daf8:	1b45      	subs	r5, r0, r5
 810dafa:	42ae      	cmp	r6, r5
 810dafc:	dc36      	bgt.n	810db6c <__gethex+0x320>
 810dafe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810db02:	2b02      	cmp	r3, #2
 810db04:	d02a      	beq.n	810db5c <__gethex+0x310>
 810db06:	2b03      	cmp	r3, #3
 810db08:	d02c      	beq.n	810db64 <__gethex+0x318>
 810db0a:	2b01      	cmp	r3, #1
 810db0c:	d115      	bne.n	810db3a <__gethex+0x2ee>
 810db0e:	42ae      	cmp	r6, r5
 810db10:	d113      	bne.n	810db3a <__gethex+0x2ee>
 810db12:	2e01      	cmp	r6, #1
 810db14:	d10b      	bne.n	810db2e <__gethex+0x2e2>
 810db16:	9a04      	ldr	r2, [sp, #16]
 810db18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810db1c:	6013      	str	r3, [r2, #0]
 810db1e:	2301      	movs	r3, #1
 810db20:	6123      	str	r3, [r4, #16]
 810db22:	f8c9 3000 	str.w	r3, [r9]
 810db26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810db28:	2762      	movs	r7, #98	; 0x62
 810db2a:	601c      	str	r4, [r3, #0]
 810db2c:	e723      	b.n	810d976 <__gethex+0x12a>
 810db2e:	1e71      	subs	r1, r6, #1
 810db30:	4620      	mov	r0, r4
 810db32:	f000 fed1 	bl	810e8d8 <__any_on>
 810db36:	2800      	cmp	r0, #0
 810db38:	d1ed      	bne.n	810db16 <__gethex+0x2ca>
 810db3a:	ee18 0a10 	vmov	r0, s16
 810db3e:	4621      	mov	r1, r4
 810db40:	f000 fa70 	bl	810e024 <_Bfree>
 810db44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810db46:	2300      	movs	r3, #0
 810db48:	6013      	str	r3, [r2, #0]
 810db4a:	2750      	movs	r7, #80	; 0x50
 810db4c:	e713      	b.n	810d976 <__gethex+0x12a>
 810db4e:	bf00      	nop
 810db50:	0810f47c 	.word	0x0810f47c
 810db54:	0810f39c 	.word	0x0810f39c
 810db58:	0810f410 	.word	0x0810f410
 810db5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810db5e:	2b00      	cmp	r3, #0
 810db60:	d1eb      	bne.n	810db3a <__gethex+0x2ee>
 810db62:	e7d8      	b.n	810db16 <__gethex+0x2ca>
 810db64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810db66:	2b00      	cmp	r3, #0
 810db68:	d1d5      	bne.n	810db16 <__gethex+0x2ca>
 810db6a:	e7e6      	b.n	810db3a <__gethex+0x2ee>
 810db6c:	1e6f      	subs	r7, r5, #1
 810db6e:	f1ba 0f00 	cmp.w	sl, #0
 810db72:	d131      	bne.n	810dbd8 <__gethex+0x38c>
 810db74:	b127      	cbz	r7, 810db80 <__gethex+0x334>
 810db76:	4639      	mov	r1, r7
 810db78:	4620      	mov	r0, r4
 810db7a:	f000 fead 	bl	810e8d8 <__any_on>
 810db7e:	4682      	mov	sl, r0
 810db80:	117b      	asrs	r3, r7, #5
 810db82:	2101      	movs	r1, #1
 810db84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810db88:	f007 071f 	and.w	r7, r7, #31
 810db8c:	fa01 f707 	lsl.w	r7, r1, r7
 810db90:	421f      	tst	r7, r3
 810db92:	4629      	mov	r1, r5
 810db94:	4620      	mov	r0, r4
 810db96:	bf18      	it	ne
 810db98:	f04a 0a02 	orrne.w	sl, sl, #2
 810db9c:	1b76      	subs	r6, r6, r5
 810db9e:	f7ff fdee 	bl	810d77e <rshift>
 810dba2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810dba6:	2702      	movs	r7, #2
 810dba8:	f1ba 0f00 	cmp.w	sl, #0
 810dbac:	d048      	beq.n	810dc40 <__gethex+0x3f4>
 810dbae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810dbb2:	2b02      	cmp	r3, #2
 810dbb4:	d015      	beq.n	810dbe2 <__gethex+0x396>
 810dbb6:	2b03      	cmp	r3, #3
 810dbb8:	d017      	beq.n	810dbea <__gethex+0x39e>
 810dbba:	2b01      	cmp	r3, #1
 810dbbc:	d109      	bne.n	810dbd2 <__gethex+0x386>
 810dbbe:	f01a 0f02 	tst.w	sl, #2
 810dbc2:	d006      	beq.n	810dbd2 <__gethex+0x386>
 810dbc4:	f8d9 0000 	ldr.w	r0, [r9]
 810dbc8:	ea4a 0a00 	orr.w	sl, sl, r0
 810dbcc:	f01a 0f01 	tst.w	sl, #1
 810dbd0:	d10e      	bne.n	810dbf0 <__gethex+0x3a4>
 810dbd2:	f047 0710 	orr.w	r7, r7, #16
 810dbd6:	e033      	b.n	810dc40 <__gethex+0x3f4>
 810dbd8:	f04f 0a01 	mov.w	sl, #1
 810dbdc:	e7d0      	b.n	810db80 <__gethex+0x334>
 810dbde:	2701      	movs	r7, #1
 810dbe0:	e7e2      	b.n	810dba8 <__gethex+0x35c>
 810dbe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810dbe4:	f1c3 0301 	rsb	r3, r3, #1
 810dbe8:	9315      	str	r3, [sp, #84]	; 0x54
 810dbea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810dbec:	2b00      	cmp	r3, #0
 810dbee:	d0f0      	beq.n	810dbd2 <__gethex+0x386>
 810dbf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810dbf4:	f104 0314 	add.w	r3, r4, #20
 810dbf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810dbfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810dc00:	f04f 0c00 	mov.w	ip, #0
 810dc04:	4618      	mov	r0, r3
 810dc06:	f853 2b04 	ldr.w	r2, [r3], #4
 810dc0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 810dc0e:	d01c      	beq.n	810dc4a <__gethex+0x3fe>
 810dc10:	3201      	adds	r2, #1
 810dc12:	6002      	str	r2, [r0, #0]
 810dc14:	2f02      	cmp	r7, #2
 810dc16:	f104 0314 	add.w	r3, r4, #20
 810dc1a:	d13f      	bne.n	810dc9c <__gethex+0x450>
 810dc1c:	f8d8 2000 	ldr.w	r2, [r8]
 810dc20:	3a01      	subs	r2, #1
 810dc22:	42b2      	cmp	r2, r6
 810dc24:	d10a      	bne.n	810dc3c <__gethex+0x3f0>
 810dc26:	1171      	asrs	r1, r6, #5
 810dc28:	2201      	movs	r2, #1
 810dc2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810dc2e:	f006 061f 	and.w	r6, r6, #31
 810dc32:	fa02 f606 	lsl.w	r6, r2, r6
 810dc36:	421e      	tst	r6, r3
 810dc38:	bf18      	it	ne
 810dc3a:	4617      	movne	r7, r2
 810dc3c:	f047 0720 	orr.w	r7, r7, #32
 810dc40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810dc42:	601c      	str	r4, [r3, #0]
 810dc44:	9b04      	ldr	r3, [sp, #16]
 810dc46:	601d      	str	r5, [r3, #0]
 810dc48:	e695      	b.n	810d976 <__gethex+0x12a>
 810dc4a:	4299      	cmp	r1, r3
 810dc4c:	f843 cc04 	str.w	ip, [r3, #-4]
 810dc50:	d8d8      	bhi.n	810dc04 <__gethex+0x3b8>
 810dc52:	68a3      	ldr	r3, [r4, #8]
 810dc54:	459b      	cmp	fp, r3
 810dc56:	db19      	blt.n	810dc8c <__gethex+0x440>
 810dc58:	6861      	ldr	r1, [r4, #4]
 810dc5a:	ee18 0a10 	vmov	r0, s16
 810dc5e:	3101      	adds	r1, #1
 810dc60:	f000 f9a0 	bl	810dfa4 <_Balloc>
 810dc64:	4681      	mov	r9, r0
 810dc66:	b918      	cbnz	r0, 810dc70 <__gethex+0x424>
 810dc68:	4b1a      	ldr	r3, [pc, #104]	; (810dcd4 <__gethex+0x488>)
 810dc6a:	4602      	mov	r2, r0
 810dc6c:	2184      	movs	r1, #132	; 0x84
 810dc6e:	e6a8      	b.n	810d9c2 <__gethex+0x176>
 810dc70:	6922      	ldr	r2, [r4, #16]
 810dc72:	3202      	adds	r2, #2
 810dc74:	f104 010c 	add.w	r1, r4, #12
 810dc78:	0092      	lsls	r2, r2, #2
 810dc7a:	300c      	adds	r0, #12
 810dc7c:	f7fc fce6 	bl	810a64c <memcpy>
 810dc80:	4621      	mov	r1, r4
 810dc82:	ee18 0a10 	vmov	r0, s16
 810dc86:	f000 f9cd 	bl	810e024 <_Bfree>
 810dc8a:	464c      	mov	r4, r9
 810dc8c:	6923      	ldr	r3, [r4, #16]
 810dc8e:	1c5a      	adds	r2, r3, #1
 810dc90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810dc94:	6122      	str	r2, [r4, #16]
 810dc96:	2201      	movs	r2, #1
 810dc98:	615a      	str	r2, [r3, #20]
 810dc9a:	e7bb      	b.n	810dc14 <__gethex+0x3c8>
 810dc9c:	6922      	ldr	r2, [r4, #16]
 810dc9e:	455a      	cmp	r2, fp
 810dca0:	dd0b      	ble.n	810dcba <__gethex+0x46e>
 810dca2:	2101      	movs	r1, #1
 810dca4:	4620      	mov	r0, r4
 810dca6:	f7ff fd6a 	bl	810d77e <rshift>
 810dcaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810dcae:	3501      	adds	r5, #1
 810dcb0:	42ab      	cmp	r3, r5
 810dcb2:	f6ff aed0 	blt.w	810da56 <__gethex+0x20a>
 810dcb6:	2701      	movs	r7, #1
 810dcb8:	e7c0      	b.n	810dc3c <__gethex+0x3f0>
 810dcba:	f016 061f 	ands.w	r6, r6, #31
 810dcbe:	d0fa      	beq.n	810dcb6 <__gethex+0x46a>
 810dcc0:	449a      	add	sl, r3
 810dcc2:	f1c6 0620 	rsb	r6, r6, #32
 810dcc6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810dcca:	f000 fa61 	bl	810e190 <__hi0bits>
 810dcce:	42b0      	cmp	r0, r6
 810dcd0:	dbe7      	blt.n	810dca2 <__gethex+0x456>
 810dcd2:	e7f0      	b.n	810dcb6 <__gethex+0x46a>
 810dcd4:	0810f39c 	.word	0x0810f39c

0810dcd8 <L_shift>:
 810dcd8:	f1c2 0208 	rsb	r2, r2, #8
 810dcdc:	0092      	lsls	r2, r2, #2
 810dcde:	b570      	push	{r4, r5, r6, lr}
 810dce0:	f1c2 0620 	rsb	r6, r2, #32
 810dce4:	6843      	ldr	r3, [r0, #4]
 810dce6:	6804      	ldr	r4, [r0, #0]
 810dce8:	fa03 f506 	lsl.w	r5, r3, r6
 810dcec:	432c      	orrs	r4, r5
 810dcee:	40d3      	lsrs	r3, r2
 810dcf0:	6004      	str	r4, [r0, #0]
 810dcf2:	f840 3f04 	str.w	r3, [r0, #4]!
 810dcf6:	4288      	cmp	r0, r1
 810dcf8:	d3f4      	bcc.n	810dce4 <L_shift+0xc>
 810dcfa:	bd70      	pop	{r4, r5, r6, pc}

0810dcfc <__match>:
 810dcfc:	b530      	push	{r4, r5, lr}
 810dcfe:	6803      	ldr	r3, [r0, #0]
 810dd00:	3301      	adds	r3, #1
 810dd02:	f811 4b01 	ldrb.w	r4, [r1], #1
 810dd06:	b914      	cbnz	r4, 810dd0e <__match+0x12>
 810dd08:	6003      	str	r3, [r0, #0]
 810dd0a:	2001      	movs	r0, #1
 810dd0c:	bd30      	pop	{r4, r5, pc}
 810dd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dd12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810dd16:	2d19      	cmp	r5, #25
 810dd18:	bf98      	it	ls
 810dd1a:	3220      	addls	r2, #32
 810dd1c:	42a2      	cmp	r2, r4
 810dd1e:	d0f0      	beq.n	810dd02 <__match+0x6>
 810dd20:	2000      	movs	r0, #0
 810dd22:	e7f3      	b.n	810dd0c <__match+0x10>

0810dd24 <__hexnan>:
 810dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd28:	680b      	ldr	r3, [r1, #0]
 810dd2a:	6801      	ldr	r1, [r0, #0]
 810dd2c:	115e      	asrs	r6, r3, #5
 810dd2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810dd32:	f013 031f 	ands.w	r3, r3, #31
 810dd36:	b087      	sub	sp, #28
 810dd38:	bf18      	it	ne
 810dd3a:	3604      	addne	r6, #4
 810dd3c:	2500      	movs	r5, #0
 810dd3e:	1f37      	subs	r7, r6, #4
 810dd40:	4682      	mov	sl, r0
 810dd42:	4690      	mov	r8, r2
 810dd44:	9301      	str	r3, [sp, #4]
 810dd46:	f846 5c04 	str.w	r5, [r6, #-4]
 810dd4a:	46b9      	mov	r9, r7
 810dd4c:	463c      	mov	r4, r7
 810dd4e:	9502      	str	r5, [sp, #8]
 810dd50:	46ab      	mov	fp, r5
 810dd52:	784a      	ldrb	r2, [r1, #1]
 810dd54:	1c4b      	adds	r3, r1, #1
 810dd56:	9303      	str	r3, [sp, #12]
 810dd58:	b342      	cbz	r2, 810ddac <__hexnan+0x88>
 810dd5a:	4610      	mov	r0, r2
 810dd5c:	9105      	str	r1, [sp, #20]
 810dd5e:	9204      	str	r2, [sp, #16]
 810dd60:	f7ff fd5f 	bl	810d822 <__hexdig_fun>
 810dd64:	2800      	cmp	r0, #0
 810dd66:	d14f      	bne.n	810de08 <__hexnan+0xe4>
 810dd68:	9a04      	ldr	r2, [sp, #16]
 810dd6a:	9905      	ldr	r1, [sp, #20]
 810dd6c:	2a20      	cmp	r2, #32
 810dd6e:	d818      	bhi.n	810dda2 <__hexnan+0x7e>
 810dd70:	9b02      	ldr	r3, [sp, #8]
 810dd72:	459b      	cmp	fp, r3
 810dd74:	dd13      	ble.n	810dd9e <__hexnan+0x7a>
 810dd76:	454c      	cmp	r4, r9
 810dd78:	d206      	bcs.n	810dd88 <__hexnan+0x64>
 810dd7a:	2d07      	cmp	r5, #7
 810dd7c:	dc04      	bgt.n	810dd88 <__hexnan+0x64>
 810dd7e:	462a      	mov	r2, r5
 810dd80:	4649      	mov	r1, r9
 810dd82:	4620      	mov	r0, r4
 810dd84:	f7ff ffa8 	bl	810dcd8 <L_shift>
 810dd88:	4544      	cmp	r4, r8
 810dd8a:	d950      	bls.n	810de2e <__hexnan+0x10a>
 810dd8c:	2300      	movs	r3, #0
 810dd8e:	f1a4 0904 	sub.w	r9, r4, #4
 810dd92:	f844 3c04 	str.w	r3, [r4, #-4]
 810dd96:	f8cd b008 	str.w	fp, [sp, #8]
 810dd9a:	464c      	mov	r4, r9
 810dd9c:	461d      	mov	r5, r3
 810dd9e:	9903      	ldr	r1, [sp, #12]
 810dda0:	e7d7      	b.n	810dd52 <__hexnan+0x2e>
 810dda2:	2a29      	cmp	r2, #41	; 0x29
 810dda4:	d156      	bne.n	810de54 <__hexnan+0x130>
 810dda6:	3102      	adds	r1, #2
 810dda8:	f8ca 1000 	str.w	r1, [sl]
 810ddac:	f1bb 0f00 	cmp.w	fp, #0
 810ddb0:	d050      	beq.n	810de54 <__hexnan+0x130>
 810ddb2:	454c      	cmp	r4, r9
 810ddb4:	d206      	bcs.n	810ddc4 <__hexnan+0xa0>
 810ddb6:	2d07      	cmp	r5, #7
 810ddb8:	dc04      	bgt.n	810ddc4 <__hexnan+0xa0>
 810ddba:	462a      	mov	r2, r5
 810ddbc:	4649      	mov	r1, r9
 810ddbe:	4620      	mov	r0, r4
 810ddc0:	f7ff ff8a 	bl	810dcd8 <L_shift>
 810ddc4:	4544      	cmp	r4, r8
 810ddc6:	d934      	bls.n	810de32 <__hexnan+0x10e>
 810ddc8:	f1a8 0204 	sub.w	r2, r8, #4
 810ddcc:	4623      	mov	r3, r4
 810ddce:	f853 1b04 	ldr.w	r1, [r3], #4
 810ddd2:	f842 1f04 	str.w	r1, [r2, #4]!
 810ddd6:	429f      	cmp	r7, r3
 810ddd8:	d2f9      	bcs.n	810ddce <__hexnan+0xaa>
 810ddda:	1b3b      	subs	r3, r7, r4
 810dddc:	f023 0303 	bic.w	r3, r3, #3
 810dde0:	3304      	adds	r3, #4
 810dde2:	3401      	adds	r4, #1
 810dde4:	3e03      	subs	r6, #3
 810dde6:	42b4      	cmp	r4, r6
 810dde8:	bf88      	it	hi
 810ddea:	2304      	movhi	r3, #4
 810ddec:	4443      	add	r3, r8
 810ddee:	2200      	movs	r2, #0
 810ddf0:	f843 2b04 	str.w	r2, [r3], #4
 810ddf4:	429f      	cmp	r7, r3
 810ddf6:	d2fb      	bcs.n	810ddf0 <__hexnan+0xcc>
 810ddf8:	683b      	ldr	r3, [r7, #0]
 810ddfa:	b91b      	cbnz	r3, 810de04 <__hexnan+0xe0>
 810ddfc:	4547      	cmp	r7, r8
 810ddfe:	d127      	bne.n	810de50 <__hexnan+0x12c>
 810de00:	2301      	movs	r3, #1
 810de02:	603b      	str	r3, [r7, #0]
 810de04:	2005      	movs	r0, #5
 810de06:	e026      	b.n	810de56 <__hexnan+0x132>
 810de08:	3501      	adds	r5, #1
 810de0a:	2d08      	cmp	r5, #8
 810de0c:	f10b 0b01 	add.w	fp, fp, #1
 810de10:	dd06      	ble.n	810de20 <__hexnan+0xfc>
 810de12:	4544      	cmp	r4, r8
 810de14:	d9c3      	bls.n	810dd9e <__hexnan+0x7a>
 810de16:	2300      	movs	r3, #0
 810de18:	f844 3c04 	str.w	r3, [r4, #-4]
 810de1c:	2501      	movs	r5, #1
 810de1e:	3c04      	subs	r4, #4
 810de20:	6822      	ldr	r2, [r4, #0]
 810de22:	f000 000f 	and.w	r0, r0, #15
 810de26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810de2a:	6022      	str	r2, [r4, #0]
 810de2c:	e7b7      	b.n	810dd9e <__hexnan+0x7a>
 810de2e:	2508      	movs	r5, #8
 810de30:	e7b5      	b.n	810dd9e <__hexnan+0x7a>
 810de32:	9b01      	ldr	r3, [sp, #4]
 810de34:	2b00      	cmp	r3, #0
 810de36:	d0df      	beq.n	810ddf8 <__hexnan+0xd4>
 810de38:	f04f 32ff 	mov.w	r2, #4294967295
 810de3c:	f1c3 0320 	rsb	r3, r3, #32
 810de40:	fa22 f303 	lsr.w	r3, r2, r3
 810de44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810de48:	401a      	ands	r2, r3
 810de4a:	f846 2c04 	str.w	r2, [r6, #-4]
 810de4e:	e7d3      	b.n	810ddf8 <__hexnan+0xd4>
 810de50:	3f04      	subs	r7, #4
 810de52:	e7d1      	b.n	810ddf8 <__hexnan+0xd4>
 810de54:	2004      	movs	r0, #4
 810de56:	b007      	add	sp, #28
 810de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810de5c <_localeconv_r>:
 810de5c:	4800      	ldr	r0, [pc, #0]	; (810de60 <_localeconv_r+0x4>)
 810de5e:	4770      	bx	lr
 810de60:	10000214 	.word	0x10000214

0810de64 <__retarget_lock_init_recursive>:
 810de64:	4770      	bx	lr

0810de66 <__retarget_lock_acquire_recursive>:
 810de66:	4770      	bx	lr

0810de68 <__retarget_lock_release_recursive>:
 810de68:	4770      	bx	lr

0810de6a <__swhatbuf_r>:
 810de6a:	b570      	push	{r4, r5, r6, lr}
 810de6c:	460e      	mov	r6, r1
 810de6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810de72:	2900      	cmp	r1, #0
 810de74:	b096      	sub	sp, #88	; 0x58
 810de76:	4614      	mov	r4, r2
 810de78:	461d      	mov	r5, r3
 810de7a:	da07      	bge.n	810de8c <__swhatbuf_r+0x22>
 810de7c:	2300      	movs	r3, #0
 810de7e:	602b      	str	r3, [r5, #0]
 810de80:	89b3      	ldrh	r3, [r6, #12]
 810de82:	061a      	lsls	r2, r3, #24
 810de84:	d410      	bmi.n	810dea8 <__swhatbuf_r+0x3e>
 810de86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810de8a:	e00e      	b.n	810deaa <__swhatbuf_r+0x40>
 810de8c:	466a      	mov	r2, sp
 810de8e:	f000 ff8b 	bl	810eda8 <_fstat_r>
 810de92:	2800      	cmp	r0, #0
 810de94:	dbf2      	blt.n	810de7c <__swhatbuf_r+0x12>
 810de96:	9a01      	ldr	r2, [sp, #4]
 810de98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810de9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810dea0:	425a      	negs	r2, r3
 810dea2:	415a      	adcs	r2, r3
 810dea4:	602a      	str	r2, [r5, #0]
 810dea6:	e7ee      	b.n	810de86 <__swhatbuf_r+0x1c>
 810dea8:	2340      	movs	r3, #64	; 0x40
 810deaa:	2000      	movs	r0, #0
 810deac:	6023      	str	r3, [r4, #0]
 810deae:	b016      	add	sp, #88	; 0x58
 810deb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0810deb4 <__smakebuf_r>:
 810deb4:	898b      	ldrh	r3, [r1, #12]
 810deb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810deb8:	079d      	lsls	r5, r3, #30
 810deba:	4606      	mov	r6, r0
 810debc:	460c      	mov	r4, r1
 810debe:	d507      	bpl.n	810ded0 <__smakebuf_r+0x1c>
 810dec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810dec4:	6023      	str	r3, [r4, #0]
 810dec6:	6123      	str	r3, [r4, #16]
 810dec8:	2301      	movs	r3, #1
 810deca:	6163      	str	r3, [r4, #20]
 810decc:	b002      	add	sp, #8
 810dece:	bd70      	pop	{r4, r5, r6, pc}
 810ded0:	ab01      	add	r3, sp, #4
 810ded2:	466a      	mov	r2, sp
 810ded4:	f7ff ffc9 	bl	810de6a <__swhatbuf_r>
 810ded8:	9900      	ldr	r1, [sp, #0]
 810deda:	4605      	mov	r5, r0
 810dedc:	4630      	mov	r0, r6
 810dede:	f7fc fc1b 	bl	810a718 <_malloc_r>
 810dee2:	b948      	cbnz	r0, 810def8 <__smakebuf_r+0x44>
 810dee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dee8:	059a      	lsls	r2, r3, #22
 810deea:	d4ef      	bmi.n	810decc <__smakebuf_r+0x18>
 810deec:	f023 0303 	bic.w	r3, r3, #3
 810def0:	f043 0302 	orr.w	r3, r3, #2
 810def4:	81a3      	strh	r3, [r4, #12]
 810def6:	e7e3      	b.n	810dec0 <__smakebuf_r+0xc>
 810def8:	4b0d      	ldr	r3, [pc, #52]	; (810df30 <__smakebuf_r+0x7c>)
 810defa:	62b3      	str	r3, [r6, #40]	; 0x28
 810defc:	89a3      	ldrh	r3, [r4, #12]
 810defe:	6020      	str	r0, [r4, #0]
 810df00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810df04:	81a3      	strh	r3, [r4, #12]
 810df06:	9b00      	ldr	r3, [sp, #0]
 810df08:	6163      	str	r3, [r4, #20]
 810df0a:	9b01      	ldr	r3, [sp, #4]
 810df0c:	6120      	str	r0, [r4, #16]
 810df0e:	b15b      	cbz	r3, 810df28 <__smakebuf_r+0x74>
 810df10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810df14:	4630      	mov	r0, r6
 810df16:	f000 ff59 	bl	810edcc <_isatty_r>
 810df1a:	b128      	cbz	r0, 810df28 <__smakebuf_r+0x74>
 810df1c:	89a3      	ldrh	r3, [r4, #12]
 810df1e:	f023 0303 	bic.w	r3, r3, #3
 810df22:	f043 0301 	orr.w	r3, r3, #1
 810df26:	81a3      	strh	r3, [r4, #12]
 810df28:	89a0      	ldrh	r0, [r4, #12]
 810df2a:	4305      	orrs	r5, r0
 810df2c:	81a5      	strh	r5, [r4, #12]
 810df2e:	e7cd      	b.n	810decc <__smakebuf_r+0x18>
 810df30:	0810d5dd 	.word	0x0810d5dd

0810df34 <__ascii_mbtowc>:
 810df34:	b082      	sub	sp, #8
 810df36:	b901      	cbnz	r1, 810df3a <__ascii_mbtowc+0x6>
 810df38:	a901      	add	r1, sp, #4
 810df3a:	b142      	cbz	r2, 810df4e <__ascii_mbtowc+0x1a>
 810df3c:	b14b      	cbz	r3, 810df52 <__ascii_mbtowc+0x1e>
 810df3e:	7813      	ldrb	r3, [r2, #0]
 810df40:	600b      	str	r3, [r1, #0]
 810df42:	7812      	ldrb	r2, [r2, #0]
 810df44:	1e10      	subs	r0, r2, #0
 810df46:	bf18      	it	ne
 810df48:	2001      	movne	r0, #1
 810df4a:	b002      	add	sp, #8
 810df4c:	4770      	bx	lr
 810df4e:	4610      	mov	r0, r2
 810df50:	e7fb      	b.n	810df4a <__ascii_mbtowc+0x16>
 810df52:	f06f 0001 	mvn.w	r0, #1
 810df56:	e7f8      	b.n	810df4a <__ascii_mbtowc+0x16>

0810df58 <memmove>:
 810df58:	4288      	cmp	r0, r1
 810df5a:	b510      	push	{r4, lr}
 810df5c:	eb01 0402 	add.w	r4, r1, r2
 810df60:	d902      	bls.n	810df68 <memmove+0x10>
 810df62:	4284      	cmp	r4, r0
 810df64:	4623      	mov	r3, r4
 810df66:	d807      	bhi.n	810df78 <memmove+0x20>
 810df68:	1e43      	subs	r3, r0, #1
 810df6a:	42a1      	cmp	r1, r4
 810df6c:	d008      	beq.n	810df80 <memmove+0x28>
 810df6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810df72:	f803 2f01 	strb.w	r2, [r3, #1]!
 810df76:	e7f8      	b.n	810df6a <memmove+0x12>
 810df78:	4402      	add	r2, r0
 810df7a:	4601      	mov	r1, r0
 810df7c:	428a      	cmp	r2, r1
 810df7e:	d100      	bne.n	810df82 <memmove+0x2a>
 810df80:	bd10      	pop	{r4, pc}
 810df82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810df86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810df8a:	e7f7      	b.n	810df7c <memmove+0x24>

0810df8c <__malloc_lock>:
 810df8c:	4801      	ldr	r0, [pc, #4]	; (810df94 <__malloc_lock+0x8>)
 810df8e:	f7ff bf6a 	b.w	810de66 <__retarget_lock_acquire_recursive>
 810df92:	bf00      	nop
 810df94:	100006a0 	.word	0x100006a0

0810df98 <__malloc_unlock>:
 810df98:	4801      	ldr	r0, [pc, #4]	; (810dfa0 <__malloc_unlock+0x8>)
 810df9a:	f7ff bf65 	b.w	810de68 <__retarget_lock_release_recursive>
 810df9e:	bf00      	nop
 810dfa0:	100006a0 	.word	0x100006a0

0810dfa4 <_Balloc>:
 810dfa4:	b570      	push	{r4, r5, r6, lr}
 810dfa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810dfa8:	4604      	mov	r4, r0
 810dfaa:	460d      	mov	r5, r1
 810dfac:	b976      	cbnz	r6, 810dfcc <_Balloc+0x28>
 810dfae:	2010      	movs	r0, #16
 810dfb0:	f7fc fb3c 	bl	810a62c <malloc>
 810dfb4:	4602      	mov	r2, r0
 810dfb6:	6260      	str	r0, [r4, #36]	; 0x24
 810dfb8:	b920      	cbnz	r0, 810dfc4 <_Balloc+0x20>
 810dfba:	4b18      	ldr	r3, [pc, #96]	; (810e01c <_Balloc+0x78>)
 810dfbc:	4818      	ldr	r0, [pc, #96]	; (810e020 <_Balloc+0x7c>)
 810dfbe:	2166      	movs	r1, #102	; 0x66
 810dfc0:	f7fc fada 	bl	810a578 <__assert_func>
 810dfc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810dfc8:	6006      	str	r6, [r0, #0]
 810dfca:	60c6      	str	r6, [r0, #12]
 810dfcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810dfce:	68f3      	ldr	r3, [r6, #12]
 810dfd0:	b183      	cbz	r3, 810dff4 <_Balloc+0x50>
 810dfd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810dfd4:	68db      	ldr	r3, [r3, #12]
 810dfd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810dfda:	b9b8      	cbnz	r0, 810e00c <_Balloc+0x68>
 810dfdc:	2101      	movs	r1, #1
 810dfde:	fa01 f605 	lsl.w	r6, r1, r5
 810dfe2:	1d72      	adds	r2, r6, #5
 810dfe4:	0092      	lsls	r2, r2, #2
 810dfe6:	4620      	mov	r0, r4
 810dfe8:	f000 fc97 	bl	810e91a <_calloc_r>
 810dfec:	b160      	cbz	r0, 810e008 <_Balloc+0x64>
 810dfee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810dff2:	e00e      	b.n	810e012 <_Balloc+0x6e>
 810dff4:	2221      	movs	r2, #33	; 0x21
 810dff6:	2104      	movs	r1, #4
 810dff8:	4620      	mov	r0, r4
 810dffa:	f000 fc8e 	bl	810e91a <_calloc_r>
 810dffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e000:	60f0      	str	r0, [r6, #12]
 810e002:	68db      	ldr	r3, [r3, #12]
 810e004:	2b00      	cmp	r3, #0
 810e006:	d1e4      	bne.n	810dfd2 <_Balloc+0x2e>
 810e008:	2000      	movs	r0, #0
 810e00a:	bd70      	pop	{r4, r5, r6, pc}
 810e00c:	6802      	ldr	r2, [r0, #0]
 810e00e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810e012:	2300      	movs	r3, #0
 810e014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e018:	e7f7      	b.n	810e00a <_Balloc+0x66>
 810e01a:	bf00      	nop
 810e01c:	0810f326 	.word	0x0810f326
 810e020:	0810f490 	.word	0x0810f490

0810e024 <_Bfree>:
 810e024:	b570      	push	{r4, r5, r6, lr}
 810e026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e028:	4605      	mov	r5, r0
 810e02a:	460c      	mov	r4, r1
 810e02c:	b976      	cbnz	r6, 810e04c <_Bfree+0x28>
 810e02e:	2010      	movs	r0, #16
 810e030:	f7fc fafc 	bl	810a62c <malloc>
 810e034:	4602      	mov	r2, r0
 810e036:	6268      	str	r0, [r5, #36]	; 0x24
 810e038:	b920      	cbnz	r0, 810e044 <_Bfree+0x20>
 810e03a:	4b09      	ldr	r3, [pc, #36]	; (810e060 <_Bfree+0x3c>)
 810e03c:	4809      	ldr	r0, [pc, #36]	; (810e064 <_Bfree+0x40>)
 810e03e:	218a      	movs	r1, #138	; 0x8a
 810e040:	f7fc fa9a 	bl	810a578 <__assert_func>
 810e044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e048:	6006      	str	r6, [r0, #0]
 810e04a:	60c6      	str	r6, [r0, #12]
 810e04c:	b13c      	cbz	r4, 810e05e <_Bfree+0x3a>
 810e04e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810e050:	6862      	ldr	r2, [r4, #4]
 810e052:	68db      	ldr	r3, [r3, #12]
 810e054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e058:	6021      	str	r1, [r4, #0]
 810e05a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810e05e:	bd70      	pop	{r4, r5, r6, pc}
 810e060:	0810f326 	.word	0x0810f326
 810e064:	0810f490 	.word	0x0810f490

0810e068 <__multadd>:
 810e068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e06c:	690e      	ldr	r6, [r1, #16]
 810e06e:	4607      	mov	r7, r0
 810e070:	4698      	mov	r8, r3
 810e072:	460c      	mov	r4, r1
 810e074:	f101 0014 	add.w	r0, r1, #20
 810e078:	2300      	movs	r3, #0
 810e07a:	6805      	ldr	r5, [r0, #0]
 810e07c:	b2a9      	uxth	r1, r5
 810e07e:	fb02 8101 	mla	r1, r2, r1, r8
 810e082:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810e086:	0c2d      	lsrs	r5, r5, #16
 810e088:	fb02 c505 	mla	r5, r2, r5, ip
 810e08c:	b289      	uxth	r1, r1
 810e08e:	3301      	adds	r3, #1
 810e090:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810e094:	429e      	cmp	r6, r3
 810e096:	f840 1b04 	str.w	r1, [r0], #4
 810e09a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810e09e:	dcec      	bgt.n	810e07a <__multadd+0x12>
 810e0a0:	f1b8 0f00 	cmp.w	r8, #0
 810e0a4:	d022      	beq.n	810e0ec <__multadd+0x84>
 810e0a6:	68a3      	ldr	r3, [r4, #8]
 810e0a8:	42b3      	cmp	r3, r6
 810e0aa:	dc19      	bgt.n	810e0e0 <__multadd+0x78>
 810e0ac:	6861      	ldr	r1, [r4, #4]
 810e0ae:	4638      	mov	r0, r7
 810e0b0:	3101      	adds	r1, #1
 810e0b2:	f7ff ff77 	bl	810dfa4 <_Balloc>
 810e0b6:	4605      	mov	r5, r0
 810e0b8:	b928      	cbnz	r0, 810e0c6 <__multadd+0x5e>
 810e0ba:	4602      	mov	r2, r0
 810e0bc:	4b0d      	ldr	r3, [pc, #52]	; (810e0f4 <__multadd+0x8c>)
 810e0be:	480e      	ldr	r0, [pc, #56]	; (810e0f8 <__multadd+0x90>)
 810e0c0:	21b5      	movs	r1, #181	; 0xb5
 810e0c2:	f7fc fa59 	bl	810a578 <__assert_func>
 810e0c6:	6922      	ldr	r2, [r4, #16]
 810e0c8:	3202      	adds	r2, #2
 810e0ca:	f104 010c 	add.w	r1, r4, #12
 810e0ce:	0092      	lsls	r2, r2, #2
 810e0d0:	300c      	adds	r0, #12
 810e0d2:	f7fc fabb 	bl	810a64c <memcpy>
 810e0d6:	4621      	mov	r1, r4
 810e0d8:	4638      	mov	r0, r7
 810e0da:	f7ff ffa3 	bl	810e024 <_Bfree>
 810e0de:	462c      	mov	r4, r5
 810e0e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810e0e4:	3601      	adds	r6, #1
 810e0e6:	f8c3 8014 	str.w	r8, [r3, #20]
 810e0ea:	6126      	str	r6, [r4, #16]
 810e0ec:	4620      	mov	r0, r4
 810e0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e0f2:	bf00      	nop
 810e0f4:	0810f39c 	.word	0x0810f39c
 810e0f8:	0810f490 	.word	0x0810f490

0810e0fc <__s2b>:
 810e0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e100:	460c      	mov	r4, r1
 810e102:	4615      	mov	r5, r2
 810e104:	461f      	mov	r7, r3
 810e106:	2209      	movs	r2, #9
 810e108:	3308      	adds	r3, #8
 810e10a:	4606      	mov	r6, r0
 810e10c:	fb93 f3f2 	sdiv	r3, r3, r2
 810e110:	2100      	movs	r1, #0
 810e112:	2201      	movs	r2, #1
 810e114:	429a      	cmp	r2, r3
 810e116:	db09      	blt.n	810e12c <__s2b+0x30>
 810e118:	4630      	mov	r0, r6
 810e11a:	f7ff ff43 	bl	810dfa4 <_Balloc>
 810e11e:	b940      	cbnz	r0, 810e132 <__s2b+0x36>
 810e120:	4602      	mov	r2, r0
 810e122:	4b19      	ldr	r3, [pc, #100]	; (810e188 <__s2b+0x8c>)
 810e124:	4819      	ldr	r0, [pc, #100]	; (810e18c <__s2b+0x90>)
 810e126:	21ce      	movs	r1, #206	; 0xce
 810e128:	f7fc fa26 	bl	810a578 <__assert_func>
 810e12c:	0052      	lsls	r2, r2, #1
 810e12e:	3101      	adds	r1, #1
 810e130:	e7f0      	b.n	810e114 <__s2b+0x18>
 810e132:	9b08      	ldr	r3, [sp, #32]
 810e134:	6143      	str	r3, [r0, #20]
 810e136:	2d09      	cmp	r5, #9
 810e138:	f04f 0301 	mov.w	r3, #1
 810e13c:	6103      	str	r3, [r0, #16]
 810e13e:	dd16      	ble.n	810e16e <__s2b+0x72>
 810e140:	f104 0909 	add.w	r9, r4, #9
 810e144:	46c8      	mov	r8, r9
 810e146:	442c      	add	r4, r5
 810e148:	f818 3b01 	ldrb.w	r3, [r8], #1
 810e14c:	4601      	mov	r1, r0
 810e14e:	3b30      	subs	r3, #48	; 0x30
 810e150:	220a      	movs	r2, #10
 810e152:	4630      	mov	r0, r6
 810e154:	f7ff ff88 	bl	810e068 <__multadd>
 810e158:	45a0      	cmp	r8, r4
 810e15a:	d1f5      	bne.n	810e148 <__s2b+0x4c>
 810e15c:	f1a5 0408 	sub.w	r4, r5, #8
 810e160:	444c      	add	r4, r9
 810e162:	1b2d      	subs	r5, r5, r4
 810e164:	1963      	adds	r3, r4, r5
 810e166:	42bb      	cmp	r3, r7
 810e168:	db04      	blt.n	810e174 <__s2b+0x78>
 810e16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e16e:	340a      	adds	r4, #10
 810e170:	2509      	movs	r5, #9
 810e172:	e7f6      	b.n	810e162 <__s2b+0x66>
 810e174:	f814 3b01 	ldrb.w	r3, [r4], #1
 810e178:	4601      	mov	r1, r0
 810e17a:	3b30      	subs	r3, #48	; 0x30
 810e17c:	220a      	movs	r2, #10
 810e17e:	4630      	mov	r0, r6
 810e180:	f7ff ff72 	bl	810e068 <__multadd>
 810e184:	e7ee      	b.n	810e164 <__s2b+0x68>
 810e186:	bf00      	nop
 810e188:	0810f39c 	.word	0x0810f39c
 810e18c:	0810f490 	.word	0x0810f490

0810e190 <__hi0bits>:
 810e190:	0c03      	lsrs	r3, r0, #16
 810e192:	041b      	lsls	r3, r3, #16
 810e194:	b9d3      	cbnz	r3, 810e1cc <__hi0bits+0x3c>
 810e196:	0400      	lsls	r0, r0, #16
 810e198:	2310      	movs	r3, #16
 810e19a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810e19e:	bf04      	itt	eq
 810e1a0:	0200      	lsleq	r0, r0, #8
 810e1a2:	3308      	addeq	r3, #8
 810e1a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810e1a8:	bf04      	itt	eq
 810e1aa:	0100      	lsleq	r0, r0, #4
 810e1ac:	3304      	addeq	r3, #4
 810e1ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810e1b2:	bf04      	itt	eq
 810e1b4:	0080      	lsleq	r0, r0, #2
 810e1b6:	3302      	addeq	r3, #2
 810e1b8:	2800      	cmp	r0, #0
 810e1ba:	db05      	blt.n	810e1c8 <__hi0bits+0x38>
 810e1bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810e1c0:	f103 0301 	add.w	r3, r3, #1
 810e1c4:	bf08      	it	eq
 810e1c6:	2320      	moveq	r3, #32
 810e1c8:	4618      	mov	r0, r3
 810e1ca:	4770      	bx	lr
 810e1cc:	2300      	movs	r3, #0
 810e1ce:	e7e4      	b.n	810e19a <__hi0bits+0xa>

0810e1d0 <__lo0bits>:
 810e1d0:	6803      	ldr	r3, [r0, #0]
 810e1d2:	f013 0207 	ands.w	r2, r3, #7
 810e1d6:	4601      	mov	r1, r0
 810e1d8:	d00b      	beq.n	810e1f2 <__lo0bits+0x22>
 810e1da:	07da      	lsls	r2, r3, #31
 810e1dc:	d424      	bmi.n	810e228 <__lo0bits+0x58>
 810e1de:	0798      	lsls	r0, r3, #30
 810e1e0:	bf49      	itett	mi
 810e1e2:	085b      	lsrmi	r3, r3, #1
 810e1e4:	089b      	lsrpl	r3, r3, #2
 810e1e6:	2001      	movmi	r0, #1
 810e1e8:	600b      	strmi	r3, [r1, #0]
 810e1ea:	bf5c      	itt	pl
 810e1ec:	600b      	strpl	r3, [r1, #0]
 810e1ee:	2002      	movpl	r0, #2
 810e1f0:	4770      	bx	lr
 810e1f2:	b298      	uxth	r0, r3
 810e1f4:	b9b0      	cbnz	r0, 810e224 <__lo0bits+0x54>
 810e1f6:	0c1b      	lsrs	r3, r3, #16
 810e1f8:	2010      	movs	r0, #16
 810e1fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 810e1fe:	bf04      	itt	eq
 810e200:	0a1b      	lsreq	r3, r3, #8
 810e202:	3008      	addeq	r0, #8
 810e204:	071a      	lsls	r2, r3, #28
 810e206:	bf04      	itt	eq
 810e208:	091b      	lsreq	r3, r3, #4
 810e20a:	3004      	addeq	r0, #4
 810e20c:	079a      	lsls	r2, r3, #30
 810e20e:	bf04      	itt	eq
 810e210:	089b      	lsreq	r3, r3, #2
 810e212:	3002      	addeq	r0, #2
 810e214:	07da      	lsls	r2, r3, #31
 810e216:	d403      	bmi.n	810e220 <__lo0bits+0x50>
 810e218:	085b      	lsrs	r3, r3, #1
 810e21a:	f100 0001 	add.w	r0, r0, #1
 810e21e:	d005      	beq.n	810e22c <__lo0bits+0x5c>
 810e220:	600b      	str	r3, [r1, #0]
 810e222:	4770      	bx	lr
 810e224:	4610      	mov	r0, r2
 810e226:	e7e8      	b.n	810e1fa <__lo0bits+0x2a>
 810e228:	2000      	movs	r0, #0
 810e22a:	4770      	bx	lr
 810e22c:	2020      	movs	r0, #32
 810e22e:	4770      	bx	lr

0810e230 <__i2b>:
 810e230:	b510      	push	{r4, lr}
 810e232:	460c      	mov	r4, r1
 810e234:	2101      	movs	r1, #1
 810e236:	f7ff feb5 	bl	810dfa4 <_Balloc>
 810e23a:	4602      	mov	r2, r0
 810e23c:	b928      	cbnz	r0, 810e24a <__i2b+0x1a>
 810e23e:	4b05      	ldr	r3, [pc, #20]	; (810e254 <__i2b+0x24>)
 810e240:	4805      	ldr	r0, [pc, #20]	; (810e258 <__i2b+0x28>)
 810e242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810e246:	f7fc f997 	bl	810a578 <__assert_func>
 810e24a:	2301      	movs	r3, #1
 810e24c:	6144      	str	r4, [r0, #20]
 810e24e:	6103      	str	r3, [r0, #16]
 810e250:	bd10      	pop	{r4, pc}
 810e252:	bf00      	nop
 810e254:	0810f39c 	.word	0x0810f39c
 810e258:	0810f490 	.word	0x0810f490

0810e25c <__multiply>:
 810e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e260:	4614      	mov	r4, r2
 810e262:	690a      	ldr	r2, [r1, #16]
 810e264:	6923      	ldr	r3, [r4, #16]
 810e266:	429a      	cmp	r2, r3
 810e268:	bfb8      	it	lt
 810e26a:	460b      	movlt	r3, r1
 810e26c:	460d      	mov	r5, r1
 810e26e:	bfbc      	itt	lt
 810e270:	4625      	movlt	r5, r4
 810e272:	461c      	movlt	r4, r3
 810e274:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810e278:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810e27c:	68ab      	ldr	r3, [r5, #8]
 810e27e:	6869      	ldr	r1, [r5, #4]
 810e280:	eb0a 0709 	add.w	r7, sl, r9
 810e284:	42bb      	cmp	r3, r7
 810e286:	b085      	sub	sp, #20
 810e288:	bfb8      	it	lt
 810e28a:	3101      	addlt	r1, #1
 810e28c:	f7ff fe8a 	bl	810dfa4 <_Balloc>
 810e290:	b930      	cbnz	r0, 810e2a0 <__multiply+0x44>
 810e292:	4602      	mov	r2, r0
 810e294:	4b42      	ldr	r3, [pc, #264]	; (810e3a0 <__multiply+0x144>)
 810e296:	4843      	ldr	r0, [pc, #268]	; (810e3a4 <__multiply+0x148>)
 810e298:	f240 115d 	movw	r1, #349	; 0x15d
 810e29c:	f7fc f96c 	bl	810a578 <__assert_func>
 810e2a0:	f100 0614 	add.w	r6, r0, #20
 810e2a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810e2a8:	4633      	mov	r3, r6
 810e2aa:	2200      	movs	r2, #0
 810e2ac:	4543      	cmp	r3, r8
 810e2ae:	d31e      	bcc.n	810e2ee <__multiply+0x92>
 810e2b0:	f105 0c14 	add.w	ip, r5, #20
 810e2b4:	f104 0314 	add.w	r3, r4, #20
 810e2b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810e2bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810e2c0:	9202      	str	r2, [sp, #8]
 810e2c2:	ebac 0205 	sub.w	r2, ip, r5
 810e2c6:	3a15      	subs	r2, #21
 810e2c8:	f022 0203 	bic.w	r2, r2, #3
 810e2cc:	3204      	adds	r2, #4
 810e2ce:	f105 0115 	add.w	r1, r5, #21
 810e2d2:	458c      	cmp	ip, r1
 810e2d4:	bf38      	it	cc
 810e2d6:	2204      	movcc	r2, #4
 810e2d8:	9201      	str	r2, [sp, #4]
 810e2da:	9a02      	ldr	r2, [sp, #8]
 810e2dc:	9303      	str	r3, [sp, #12]
 810e2de:	429a      	cmp	r2, r3
 810e2e0:	d808      	bhi.n	810e2f4 <__multiply+0x98>
 810e2e2:	2f00      	cmp	r7, #0
 810e2e4:	dc55      	bgt.n	810e392 <__multiply+0x136>
 810e2e6:	6107      	str	r7, [r0, #16]
 810e2e8:	b005      	add	sp, #20
 810e2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e2ee:	f843 2b04 	str.w	r2, [r3], #4
 810e2f2:	e7db      	b.n	810e2ac <__multiply+0x50>
 810e2f4:	f8b3 a000 	ldrh.w	sl, [r3]
 810e2f8:	f1ba 0f00 	cmp.w	sl, #0
 810e2fc:	d020      	beq.n	810e340 <__multiply+0xe4>
 810e2fe:	f105 0e14 	add.w	lr, r5, #20
 810e302:	46b1      	mov	r9, r6
 810e304:	2200      	movs	r2, #0
 810e306:	f85e 4b04 	ldr.w	r4, [lr], #4
 810e30a:	f8d9 b000 	ldr.w	fp, [r9]
 810e30e:	b2a1      	uxth	r1, r4
 810e310:	fa1f fb8b 	uxth.w	fp, fp
 810e314:	fb0a b101 	mla	r1, sl, r1, fp
 810e318:	4411      	add	r1, r2
 810e31a:	f8d9 2000 	ldr.w	r2, [r9]
 810e31e:	0c24      	lsrs	r4, r4, #16
 810e320:	0c12      	lsrs	r2, r2, #16
 810e322:	fb0a 2404 	mla	r4, sl, r4, r2
 810e326:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810e32a:	b289      	uxth	r1, r1
 810e32c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810e330:	45f4      	cmp	ip, lr
 810e332:	f849 1b04 	str.w	r1, [r9], #4
 810e336:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810e33a:	d8e4      	bhi.n	810e306 <__multiply+0xaa>
 810e33c:	9901      	ldr	r1, [sp, #4]
 810e33e:	5072      	str	r2, [r6, r1]
 810e340:	9a03      	ldr	r2, [sp, #12]
 810e342:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810e346:	3304      	adds	r3, #4
 810e348:	f1b9 0f00 	cmp.w	r9, #0
 810e34c:	d01f      	beq.n	810e38e <__multiply+0x132>
 810e34e:	6834      	ldr	r4, [r6, #0]
 810e350:	f105 0114 	add.w	r1, r5, #20
 810e354:	46b6      	mov	lr, r6
 810e356:	f04f 0a00 	mov.w	sl, #0
 810e35a:	880a      	ldrh	r2, [r1, #0]
 810e35c:	f8be b002 	ldrh.w	fp, [lr, #2]
 810e360:	fb09 b202 	mla	r2, r9, r2, fp
 810e364:	4492      	add	sl, r2
 810e366:	b2a4      	uxth	r4, r4
 810e368:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810e36c:	f84e 4b04 	str.w	r4, [lr], #4
 810e370:	f851 4b04 	ldr.w	r4, [r1], #4
 810e374:	f8be 2000 	ldrh.w	r2, [lr]
 810e378:	0c24      	lsrs	r4, r4, #16
 810e37a:	fb09 2404 	mla	r4, r9, r4, r2
 810e37e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810e382:	458c      	cmp	ip, r1
 810e384:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810e388:	d8e7      	bhi.n	810e35a <__multiply+0xfe>
 810e38a:	9a01      	ldr	r2, [sp, #4]
 810e38c:	50b4      	str	r4, [r6, r2]
 810e38e:	3604      	adds	r6, #4
 810e390:	e7a3      	b.n	810e2da <__multiply+0x7e>
 810e392:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e396:	2b00      	cmp	r3, #0
 810e398:	d1a5      	bne.n	810e2e6 <__multiply+0x8a>
 810e39a:	3f01      	subs	r7, #1
 810e39c:	e7a1      	b.n	810e2e2 <__multiply+0x86>
 810e39e:	bf00      	nop
 810e3a0:	0810f39c 	.word	0x0810f39c
 810e3a4:	0810f490 	.word	0x0810f490

0810e3a8 <__pow5mult>:
 810e3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e3ac:	4615      	mov	r5, r2
 810e3ae:	f012 0203 	ands.w	r2, r2, #3
 810e3b2:	4606      	mov	r6, r0
 810e3b4:	460f      	mov	r7, r1
 810e3b6:	d007      	beq.n	810e3c8 <__pow5mult+0x20>
 810e3b8:	4c25      	ldr	r4, [pc, #148]	; (810e450 <__pow5mult+0xa8>)
 810e3ba:	3a01      	subs	r2, #1
 810e3bc:	2300      	movs	r3, #0
 810e3be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810e3c2:	f7ff fe51 	bl	810e068 <__multadd>
 810e3c6:	4607      	mov	r7, r0
 810e3c8:	10ad      	asrs	r5, r5, #2
 810e3ca:	d03d      	beq.n	810e448 <__pow5mult+0xa0>
 810e3cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810e3ce:	b97c      	cbnz	r4, 810e3f0 <__pow5mult+0x48>
 810e3d0:	2010      	movs	r0, #16
 810e3d2:	f7fc f92b 	bl	810a62c <malloc>
 810e3d6:	4602      	mov	r2, r0
 810e3d8:	6270      	str	r0, [r6, #36]	; 0x24
 810e3da:	b928      	cbnz	r0, 810e3e8 <__pow5mult+0x40>
 810e3dc:	4b1d      	ldr	r3, [pc, #116]	; (810e454 <__pow5mult+0xac>)
 810e3de:	481e      	ldr	r0, [pc, #120]	; (810e458 <__pow5mult+0xb0>)
 810e3e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810e3e4:	f7fc f8c8 	bl	810a578 <__assert_func>
 810e3e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810e3ec:	6004      	str	r4, [r0, #0]
 810e3ee:	60c4      	str	r4, [r0, #12]
 810e3f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810e3f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810e3f8:	b94c      	cbnz	r4, 810e40e <__pow5mult+0x66>
 810e3fa:	f240 2171 	movw	r1, #625	; 0x271
 810e3fe:	4630      	mov	r0, r6
 810e400:	f7ff ff16 	bl	810e230 <__i2b>
 810e404:	2300      	movs	r3, #0
 810e406:	f8c8 0008 	str.w	r0, [r8, #8]
 810e40a:	4604      	mov	r4, r0
 810e40c:	6003      	str	r3, [r0, #0]
 810e40e:	f04f 0900 	mov.w	r9, #0
 810e412:	07eb      	lsls	r3, r5, #31
 810e414:	d50a      	bpl.n	810e42c <__pow5mult+0x84>
 810e416:	4639      	mov	r1, r7
 810e418:	4622      	mov	r2, r4
 810e41a:	4630      	mov	r0, r6
 810e41c:	f7ff ff1e 	bl	810e25c <__multiply>
 810e420:	4639      	mov	r1, r7
 810e422:	4680      	mov	r8, r0
 810e424:	4630      	mov	r0, r6
 810e426:	f7ff fdfd 	bl	810e024 <_Bfree>
 810e42a:	4647      	mov	r7, r8
 810e42c:	106d      	asrs	r5, r5, #1
 810e42e:	d00b      	beq.n	810e448 <__pow5mult+0xa0>
 810e430:	6820      	ldr	r0, [r4, #0]
 810e432:	b938      	cbnz	r0, 810e444 <__pow5mult+0x9c>
 810e434:	4622      	mov	r2, r4
 810e436:	4621      	mov	r1, r4
 810e438:	4630      	mov	r0, r6
 810e43a:	f7ff ff0f 	bl	810e25c <__multiply>
 810e43e:	6020      	str	r0, [r4, #0]
 810e440:	f8c0 9000 	str.w	r9, [r0]
 810e444:	4604      	mov	r4, r0
 810e446:	e7e4      	b.n	810e412 <__pow5mult+0x6a>
 810e448:	4638      	mov	r0, r7
 810e44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e44e:	bf00      	nop
 810e450:	0810f5e0 	.word	0x0810f5e0
 810e454:	0810f326 	.word	0x0810f326
 810e458:	0810f490 	.word	0x0810f490

0810e45c <__lshift>:
 810e45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e460:	460c      	mov	r4, r1
 810e462:	6849      	ldr	r1, [r1, #4]
 810e464:	6923      	ldr	r3, [r4, #16]
 810e466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810e46a:	68a3      	ldr	r3, [r4, #8]
 810e46c:	4607      	mov	r7, r0
 810e46e:	4691      	mov	r9, r2
 810e470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810e474:	f108 0601 	add.w	r6, r8, #1
 810e478:	42b3      	cmp	r3, r6
 810e47a:	db0b      	blt.n	810e494 <__lshift+0x38>
 810e47c:	4638      	mov	r0, r7
 810e47e:	f7ff fd91 	bl	810dfa4 <_Balloc>
 810e482:	4605      	mov	r5, r0
 810e484:	b948      	cbnz	r0, 810e49a <__lshift+0x3e>
 810e486:	4602      	mov	r2, r0
 810e488:	4b28      	ldr	r3, [pc, #160]	; (810e52c <__lshift+0xd0>)
 810e48a:	4829      	ldr	r0, [pc, #164]	; (810e530 <__lshift+0xd4>)
 810e48c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810e490:	f7fc f872 	bl	810a578 <__assert_func>
 810e494:	3101      	adds	r1, #1
 810e496:	005b      	lsls	r3, r3, #1
 810e498:	e7ee      	b.n	810e478 <__lshift+0x1c>
 810e49a:	2300      	movs	r3, #0
 810e49c:	f100 0114 	add.w	r1, r0, #20
 810e4a0:	f100 0210 	add.w	r2, r0, #16
 810e4a4:	4618      	mov	r0, r3
 810e4a6:	4553      	cmp	r3, sl
 810e4a8:	db33      	blt.n	810e512 <__lshift+0xb6>
 810e4aa:	6920      	ldr	r0, [r4, #16]
 810e4ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e4b0:	f104 0314 	add.w	r3, r4, #20
 810e4b4:	f019 091f 	ands.w	r9, r9, #31
 810e4b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810e4bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810e4c0:	d02b      	beq.n	810e51a <__lshift+0xbe>
 810e4c2:	f1c9 0e20 	rsb	lr, r9, #32
 810e4c6:	468a      	mov	sl, r1
 810e4c8:	2200      	movs	r2, #0
 810e4ca:	6818      	ldr	r0, [r3, #0]
 810e4cc:	fa00 f009 	lsl.w	r0, r0, r9
 810e4d0:	4302      	orrs	r2, r0
 810e4d2:	f84a 2b04 	str.w	r2, [sl], #4
 810e4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 810e4da:	459c      	cmp	ip, r3
 810e4dc:	fa22 f20e 	lsr.w	r2, r2, lr
 810e4e0:	d8f3      	bhi.n	810e4ca <__lshift+0x6e>
 810e4e2:	ebac 0304 	sub.w	r3, ip, r4
 810e4e6:	3b15      	subs	r3, #21
 810e4e8:	f023 0303 	bic.w	r3, r3, #3
 810e4ec:	3304      	adds	r3, #4
 810e4ee:	f104 0015 	add.w	r0, r4, #21
 810e4f2:	4584      	cmp	ip, r0
 810e4f4:	bf38      	it	cc
 810e4f6:	2304      	movcc	r3, #4
 810e4f8:	50ca      	str	r2, [r1, r3]
 810e4fa:	b10a      	cbz	r2, 810e500 <__lshift+0xa4>
 810e4fc:	f108 0602 	add.w	r6, r8, #2
 810e500:	3e01      	subs	r6, #1
 810e502:	4638      	mov	r0, r7
 810e504:	612e      	str	r6, [r5, #16]
 810e506:	4621      	mov	r1, r4
 810e508:	f7ff fd8c 	bl	810e024 <_Bfree>
 810e50c:	4628      	mov	r0, r5
 810e50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e512:	f842 0f04 	str.w	r0, [r2, #4]!
 810e516:	3301      	adds	r3, #1
 810e518:	e7c5      	b.n	810e4a6 <__lshift+0x4a>
 810e51a:	3904      	subs	r1, #4
 810e51c:	f853 2b04 	ldr.w	r2, [r3], #4
 810e520:	f841 2f04 	str.w	r2, [r1, #4]!
 810e524:	459c      	cmp	ip, r3
 810e526:	d8f9      	bhi.n	810e51c <__lshift+0xc0>
 810e528:	e7ea      	b.n	810e500 <__lshift+0xa4>
 810e52a:	bf00      	nop
 810e52c:	0810f39c 	.word	0x0810f39c
 810e530:	0810f490 	.word	0x0810f490

0810e534 <__mcmp>:
 810e534:	b530      	push	{r4, r5, lr}
 810e536:	6902      	ldr	r2, [r0, #16]
 810e538:	690c      	ldr	r4, [r1, #16]
 810e53a:	1b12      	subs	r2, r2, r4
 810e53c:	d10e      	bne.n	810e55c <__mcmp+0x28>
 810e53e:	f100 0314 	add.w	r3, r0, #20
 810e542:	3114      	adds	r1, #20
 810e544:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810e548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810e54c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810e550:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810e554:	42a5      	cmp	r5, r4
 810e556:	d003      	beq.n	810e560 <__mcmp+0x2c>
 810e558:	d305      	bcc.n	810e566 <__mcmp+0x32>
 810e55a:	2201      	movs	r2, #1
 810e55c:	4610      	mov	r0, r2
 810e55e:	bd30      	pop	{r4, r5, pc}
 810e560:	4283      	cmp	r3, r0
 810e562:	d3f3      	bcc.n	810e54c <__mcmp+0x18>
 810e564:	e7fa      	b.n	810e55c <__mcmp+0x28>
 810e566:	f04f 32ff 	mov.w	r2, #4294967295
 810e56a:	e7f7      	b.n	810e55c <__mcmp+0x28>

0810e56c <__mdiff>:
 810e56c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e570:	460c      	mov	r4, r1
 810e572:	4606      	mov	r6, r0
 810e574:	4611      	mov	r1, r2
 810e576:	4620      	mov	r0, r4
 810e578:	4617      	mov	r7, r2
 810e57a:	f7ff ffdb 	bl	810e534 <__mcmp>
 810e57e:	1e05      	subs	r5, r0, #0
 810e580:	d110      	bne.n	810e5a4 <__mdiff+0x38>
 810e582:	4629      	mov	r1, r5
 810e584:	4630      	mov	r0, r6
 810e586:	f7ff fd0d 	bl	810dfa4 <_Balloc>
 810e58a:	b930      	cbnz	r0, 810e59a <__mdiff+0x2e>
 810e58c:	4b39      	ldr	r3, [pc, #228]	; (810e674 <__mdiff+0x108>)
 810e58e:	4602      	mov	r2, r0
 810e590:	f240 2132 	movw	r1, #562	; 0x232
 810e594:	4838      	ldr	r0, [pc, #224]	; (810e678 <__mdiff+0x10c>)
 810e596:	f7fb ffef 	bl	810a578 <__assert_func>
 810e59a:	2301      	movs	r3, #1
 810e59c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810e5a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e5a4:	bfa4      	itt	ge
 810e5a6:	463b      	movge	r3, r7
 810e5a8:	4627      	movge	r7, r4
 810e5aa:	4630      	mov	r0, r6
 810e5ac:	6879      	ldr	r1, [r7, #4]
 810e5ae:	bfa6      	itte	ge
 810e5b0:	461c      	movge	r4, r3
 810e5b2:	2500      	movge	r5, #0
 810e5b4:	2501      	movlt	r5, #1
 810e5b6:	f7ff fcf5 	bl	810dfa4 <_Balloc>
 810e5ba:	b920      	cbnz	r0, 810e5c6 <__mdiff+0x5a>
 810e5bc:	4b2d      	ldr	r3, [pc, #180]	; (810e674 <__mdiff+0x108>)
 810e5be:	4602      	mov	r2, r0
 810e5c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 810e5c4:	e7e6      	b.n	810e594 <__mdiff+0x28>
 810e5c6:	693e      	ldr	r6, [r7, #16]
 810e5c8:	60c5      	str	r5, [r0, #12]
 810e5ca:	6925      	ldr	r5, [r4, #16]
 810e5cc:	f107 0114 	add.w	r1, r7, #20
 810e5d0:	f104 0914 	add.w	r9, r4, #20
 810e5d4:	f100 0e14 	add.w	lr, r0, #20
 810e5d8:	f107 0210 	add.w	r2, r7, #16
 810e5dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810e5e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810e5e4:	46f2      	mov	sl, lr
 810e5e6:	2700      	movs	r7, #0
 810e5e8:	f859 3b04 	ldr.w	r3, [r9], #4
 810e5ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810e5f0:	fa1f f883 	uxth.w	r8, r3
 810e5f4:	fa17 f78b 	uxtah	r7, r7, fp
 810e5f8:	0c1b      	lsrs	r3, r3, #16
 810e5fa:	eba7 0808 	sub.w	r8, r7, r8
 810e5fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810e602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810e606:	fa1f f888 	uxth.w	r8, r8
 810e60a:	141f      	asrs	r7, r3, #16
 810e60c:	454d      	cmp	r5, r9
 810e60e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810e612:	f84a 3b04 	str.w	r3, [sl], #4
 810e616:	d8e7      	bhi.n	810e5e8 <__mdiff+0x7c>
 810e618:	1b2b      	subs	r3, r5, r4
 810e61a:	3b15      	subs	r3, #21
 810e61c:	f023 0303 	bic.w	r3, r3, #3
 810e620:	3304      	adds	r3, #4
 810e622:	3415      	adds	r4, #21
 810e624:	42a5      	cmp	r5, r4
 810e626:	bf38      	it	cc
 810e628:	2304      	movcc	r3, #4
 810e62a:	4419      	add	r1, r3
 810e62c:	4473      	add	r3, lr
 810e62e:	469e      	mov	lr, r3
 810e630:	460d      	mov	r5, r1
 810e632:	4565      	cmp	r5, ip
 810e634:	d30e      	bcc.n	810e654 <__mdiff+0xe8>
 810e636:	f10c 0203 	add.w	r2, ip, #3
 810e63a:	1a52      	subs	r2, r2, r1
 810e63c:	f022 0203 	bic.w	r2, r2, #3
 810e640:	3903      	subs	r1, #3
 810e642:	458c      	cmp	ip, r1
 810e644:	bf38      	it	cc
 810e646:	2200      	movcc	r2, #0
 810e648:	441a      	add	r2, r3
 810e64a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810e64e:	b17b      	cbz	r3, 810e670 <__mdiff+0x104>
 810e650:	6106      	str	r6, [r0, #16]
 810e652:	e7a5      	b.n	810e5a0 <__mdiff+0x34>
 810e654:	f855 8b04 	ldr.w	r8, [r5], #4
 810e658:	fa17 f488 	uxtah	r4, r7, r8
 810e65c:	1422      	asrs	r2, r4, #16
 810e65e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810e662:	b2a4      	uxth	r4, r4
 810e664:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810e668:	f84e 4b04 	str.w	r4, [lr], #4
 810e66c:	1417      	asrs	r7, r2, #16
 810e66e:	e7e0      	b.n	810e632 <__mdiff+0xc6>
 810e670:	3e01      	subs	r6, #1
 810e672:	e7ea      	b.n	810e64a <__mdiff+0xde>
 810e674:	0810f39c 	.word	0x0810f39c
 810e678:	0810f490 	.word	0x0810f490

0810e67c <__ulp>:
 810e67c:	b082      	sub	sp, #8
 810e67e:	ed8d 0b00 	vstr	d0, [sp]
 810e682:	9b01      	ldr	r3, [sp, #4]
 810e684:	4912      	ldr	r1, [pc, #72]	; (810e6d0 <__ulp+0x54>)
 810e686:	4019      	ands	r1, r3
 810e688:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810e68c:	2900      	cmp	r1, #0
 810e68e:	dd05      	ble.n	810e69c <__ulp+0x20>
 810e690:	2200      	movs	r2, #0
 810e692:	460b      	mov	r3, r1
 810e694:	ec43 2b10 	vmov	d0, r2, r3
 810e698:	b002      	add	sp, #8
 810e69a:	4770      	bx	lr
 810e69c:	4249      	negs	r1, r1
 810e69e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810e6a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 810e6a6:	f04f 0200 	mov.w	r2, #0
 810e6aa:	f04f 0300 	mov.w	r3, #0
 810e6ae:	da04      	bge.n	810e6ba <__ulp+0x3e>
 810e6b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810e6b4:	fa41 f300 	asr.w	r3, r1, r0
 810e6b8:	e7ec      	b.n	810e694 <__ulp+0x18>
 810e6ba:	f1a0 0114 	sub.w	r1, r0, #20
 810e6be:	291e      	cmp	r1, #30
 810e6c0:	bfda      	itte	le
 810e6c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810e6c6:	fa20 f101 	lsrle.w	r1, r0, r1
 810e6ca:	2101      	movgt	r1, #1
 810e6cc:	460a      	mov	r2, r1
 810e6ce:	e7e1      	b.n	810e694 <__ulp+0x18>
 810e6d0:	7ff00000 	.word	0x7ff00000

0810e6d4 <__b2d>:
 810e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6d6:	6905      	ldr	r5, [r0, #16]
 810e6d8:	f100 0714 	add.w	r7, r0, #20
 810e6dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810e6e0:	1f2e      	subs	r6, r5, #4
 810e6e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810e6e6:	4620      	mov	r0, r4
 810e6e8:	f7ff fd52 	bl	810e190 <__hi0bits>
 810e6ec:	f1c0 0320 	rsb	r3, r0, #32
 810e6f0:	280a      	cmp	r0, #10
 810e6f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810e770 <__b2d+0x9c>
 810e6f6:	600b      	str	r3, [r1, #0]
 810e6f8:	dc14      	bgt.n	810e724 <__b2d+0x50>
 810e6fa:	f1c0 0e0b 	rsb	lr, r0, #11
 810e6fe:	fa24 f10e 	lsr.w	r1, r4, lr
 810e702:	42b7      	cmp	r7, r6
 810e704:	ea41 030c 	orr.w	r3, r1, ip
 810e708:	bf34      	ite	cc
 810e70a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810e70e:	2100      	movcs	r1, #0
 810e710:	3015      	adds	r0, #21
 810e712:	fa04 f000 	lsl.w	r0, r4, r0
 810e716:	fa21 f10e 	lsr.w	r1, r1, lr
 810e71a:	ea40 0201 	orr.w	r2, r0, r1
 810e71e:	ec43 2b10 	vmov	d0, r2, r3
 810e722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e724:	42b7      	cmp	r7, r6
 810e726:	bf3a      	itte	cc
 810e728:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810e72c:	f1a5 0608 	subcc.w	r6, r5, #8
 810e730:	2100      	movcs	r1, #0
 810e732:	380b      	subs	r0, #11
 810e734:	d017      	beq.n	810e766 <__b2d+0x92>
 810e736:	f1c0 0c20 	rsb	ip, r0, #32
 810e73a:	fa04 f500 	lsl.w	r5, r4, r0
 810e73e:	42be      	cmp	r6, r7
 810e740:	fa21 f40c 	lsr.w	r4, r1, ip
 810e744:	ea45 0504 	orr.w	r5, r5, r4
 810e748:	bf8c      	ite	hi
 810e74a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810e74e:	2400      	movls	r4, #0
 810e750:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810e754:	fa01 f000 	lsl.w	r0, r1, r0
 810e758:	fa24 f40c 	lsr.w	r4, r4, ip
 810e75c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810e760:	ea40 0204 	orr.w	r2, r0, r4
 810e764:	e7db      	b.n	810e71e <__b2d+0x4a>
 810e766:	ea44 030c 	orr.w	r3, r4, ip
 810e76a:	460a      	mov	r2, r1
 810e76c:	e7d7      	b.n	810e71e <__b2d+0x4a>
 810e76e:	bf00      	nop
 810e770:	3ff00000 	.word	0x3ff00000

0810e774 <__d2b>:
 810e774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810e778:	4689      	mov	r9, r1
 810e77a:	2101      	movs	r1, #1
 810e77c:	ec57 6b10 	vmov	r6, r7, d0
 810e780:	4690      	mov	r8, r2
 810e782:	f7ff fc0f 	bl	810dfa4 <_Balloc>
 810e786:	4604      	mov	r4, r0
 810e788:	b930      	cbnz	r0, 810e798 <__d2b+0x24>
 810e78a:	4602      	mov	r2, r0
 810e78c:	4b25      	ldr	r3, [pc, #148]	; (810e824 <__d2b+0xb0>)
 810e78e:	4826      	ldr	r0, [pc, #152]	; (810e828 <__d2b+0xb4>)
 810e790:	f240 310a 	movw	r1, #778	; 0x30a
 810e794:	f7fb fef0 	bl	810a578 <__assert_func>
 810e798:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810e79c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810e7a0:	bb35      	cbnz	r5, 810e7f0 <__d2b+0x7c>
 810e7a2:	2e00      	cmp	r6, #0
 810e7a4:	9301      	str	r3, [sp, #4]
 810e7a6:	d028      	beq.n	810e7fa <__d2b+0x86>
 810e7a8:	4668      	mov	r0, sp
 810e7aa:	9600      	str	r6, [sp, #0]
 810e7ac:	f7ff fd10 	bl	810e1d0 <__lo0bits>
 810e7b0:	9900      	ldr	r1, [sp, #0]
 810e7b2:	b300      	cbz	r0, 810e7f6 <__d2b+0x82>
 810e7b4:	9a01      	ldr	r2, [sp, #4]
 810e7b6:	f1c0 0320 	rsb	r3, r0, #32
 810e7ba:	fa02 f303 	lsl.w	r3, r2, r3
 810e7be:	430b      	orrs	r3, r1
 810e7c0:	40c2      	lsrs	r2, r0
 810e7c2:	6163      	str	r3, [r4, #20]
 810e7c4:	9201      	str	r2, [sp, #4]
 810e7c6:	9b01      	ldr	r3, [sp, #4]
 810e7c8:	61a3      	str	r3, [r4, #24]
 810e7ca:	2b00      	cmp	r3, #0
 810e7cc:	bf14      	ite	ne
 810e7ce:	2202      	movne	r2, #2
 810e7d0:	2201      	moveq	r2, #1
 810e7d2:	6122      	str	r2, [r4, #16]
 810e7d4:	b1d5      	cbz	r5, 810e80c <__d2b+0x98>
 810e7d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810e7da:	4405      	add	r5, r0
 810e7dc:	f8c9 5000 	str.w	r5, [r9]
 810e7e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810e7e4:	f8c8 0000 	str.w	r0, [r8]
 810e7e8:	4620      	mov	r0, r4
 810e7ea:	b003      	add	sp, #12
 810e7ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e7f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e7f4:	e7d5      	b.n	810e7a2 <__d2b+0x2e>
 810e7f6:	6161      	str	r1, [r4, #20]
 810e7f8:	e7e5      	b.n	810e7c6 <__d2b+0x52>
 810e7fa:	a801      	add	r0, sp, #4
 810e7fc:	f7ff fce8 	bl	810e1d0 <__lo0bits>
 810e800:	9b01      	ldr	r3, [sp, #4]
 810e802:	6163      	str	r3, [r4, #20]
 810e804:	2201      	movs	r2, #1
 810e806:	6122      	str	r2, [r4, #16]
 810e808:	3020      	adds	r0, #32
 810e80a:	e7e3      	b.n	810e7d4 <__d2b+0x60>
 810e80c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810e810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810e814:	f8c9 0000 	str.w	r0, [r9]
 810e818:	6918      	ldr	r0, [r3, #16]
 810e81a:	f7ff fcb9 	bl	810e190 <__hi0bits>
 810e81e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810e822:	e7df      	b.n	810e7e4 <__d2b+0x70>
 810e824:	0810f39c 	.word	0x0810f39c
 810e828:	0810f490 	.word	0x0810f490

0810e82c <__ratio>:
 810e82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e830:	4688      	mov	r8, r1
 810e832:	4669      	mov	r1, sp
 810e834:	4681      	mov	r9, r0
 810e836:	f7ff ff4d 	bl	810e6d4 <__b2d>
 810e83a:	a901      	add	r1, sp, #4
 810e83c:	4640      	mov	r0, r8
 810e83e:	ec55 4b10 	vmov	r4, r5, d0
 810e842:	f7ff ff47 	bl	810e6d4 <__b2d>
 810e846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810e84a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810e84e:	eba3 0c02 	sub.w	ip, r3, r2
 810e852:	e9dd 3200 	ldrd	r3, r2, [sp]
 810e856:	1a9b      	subs	r3, r3, r2
 810e858:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810e85c:	ec51 0b10 	vmov	r0, r1, d0
 810e860:	2b00      	cmp	r3, #0
 810e862:	bfd6      	itet	le
 810e864:	460a      	movle	r2, r1
 810e866:	462a      	movgt	r2, r5
 810e868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810e86c:	468b      	mov	fp, r1
 810e86e:	462f      	mov	r7, r5
 810e870:	bfd4      	ite	le
 810e872:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810e876:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810e87a:	4620      	mov	r0, r4
 810e87c:	ee10 2a10 	vmov	r2, s0
 810e880:	465b      	mov	r3, fp
 810e882:	4639      	mov	r1, r7
 810e884:	f7f2 f87a 	bl	810097c <__aeabi_ddiv>
 810e888:	ec41 0b10 	vmov	d0, r0, r1
 810e88c:	b003      	add	sp, #12
 810e88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e892 <__copybits>:
 810e892:	3901      	subs	r1, #1
 810e894:	b570      	push	{r4, r5, r6, lr}
 810e896:	1149      	asrs	r1, r1, #5
 810e898:	6914      	ldr	r4, [r2, #16]
 810e89a:	3101      	adds	r1, #1
 810e89c:	f102 0314 	add.w	r3, r2, #20
 810e8a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810e8a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810e8a8:	1f05      	subs	r5, r0, #4
 810e8aa:	42a3      	cmp	r3, r4
 810e8ac:	d30c      	bcc.n	810e8c8 <__copybits+0x36>
 810e8ae:	1aa3      	subs	r3, r4, r2
 810e8b0:	3b11      	subs	r3, #17
 810e8b2:	f023 0303 	bic.w	r3, r3, #3
 810e8b6:	3211      	adds	r2, #17
 810e8b8:	42a2      	cmp	r2, r4
 810e8ba:	bf88      	it	hi
 810e8bc:	2300      	movhi	r3, #0
 810e8be:	4418      	add	r0, r3
 810e8c0:	2300      	movs	r3, #0
 810e8c2:	4288      	cmp	r0, r1
 810e8c4:	d305      	bcc.n	810e8d2 <__copybits+0x40>
 810e8c6:	bd70      	pop	{r4, r5, r6, pc}
 810e8c8:	f853 6b04 	ldr.w	r6, [r3], #4
 810e8cc:	f845 6f04 	str.w	r6, [r5, #4]!
 810e8d0:	e7eb      	b.n	810e8aa <__copybits+0x18>
 810e8d2:	f840 3b04 	str.w	r3, [r0], #4
 810e8d6:	e7f4      	b.n	810e8c2 <__copybits+0x30>

0810e8d8 <__any_on>:
 810e8d8:	f100 0214 	add.w	r2, r0, #20
 810e8dc:	6900      	ldr	r0, [r0, #16]
 810e8de:	114b      	asrs	r3, r1, #5
 810e8e0:	4298      	cmp	r0, r3
 810e8e2:	b510      	push	{r4, lr}
 810e8e4:	db11      	blt.n	810e90a <__any_on+0x32>
 810e8e6:	dd0a      	ble.n	810e8fe <__any_on+0x26>
 810e8e8:	f011 011f 	ands.w	r1, r1, #31
 810e8ec:	d007      	beq.n	810e8fe <__any_on+0x26>
 810e8ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810e8f2:	fa24 f001 	lsr.w	r0, r4, r1
 810e8f6:	fa00 f101 	lsl.w	r1, r0, r1
 810e8fa:	428c      	cmp	r4, r1
 810e8fc:	d10b      	bne.n	810e916 <__any_on+0x3e>
 810e8fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810e902:	4293      	cmp	r3, r2
 810e904:	d803      	bhi.n	810e90e <__any_on+0x36>
 810e906:	2000      	movs	r0, #0
 810e908:	bd10      	pop	{r4, pc}
 810e90a:	4603      	mov	r3, r0
 810e90c:	e7f7      	b.n	810e8fe <__any_on+0x26>
 810e90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810e912:	2900      	cmp	r1, #0
 810e914:	d0f5      	beq.n	810e902 <__any_on+0x2a>
 810e916:	2001      	movs	r0, #1
 810e918:	e7f6      	b.n	810e908 <__any_on+0x30>

0810e91a <_calloc_r>:
 810e91a:	b513      	push	{r0, r1, r4, lr}
 810e91c:	434a      	muls	r2, r1
 810e91e:	4611      	mov	r1, r2
 810e920:	9201      	str	r2, [sp, #4]
 810e922:	f7fb fef9 	bl	810a718 <_malloc_r>
 810e926:	4604      	mov	r4, r0
 810e928:	b118      	cbz	r0, 810e932 <_calloc_r+0x18>
 810e92a:	9a01      	ldr	r2, [sp, #4]
 810e92c:	2100      	movs	r1, #0
 810e92e:	f7fb fe9b 	bl	810a668 <memset>
 810e932:	4620      	mov	r0, r4
 810e934:	b002      	add	sp, #8
 810e936:	bd10      	pop	{r4, pc}

0810e938 <_realloc_r>:
 810e938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e93a:	4607      	mov	r7, r0
 810e93c:	4614      	mov	r4, r2
 810e93e:	460e      	mov	r6, r1
 810e940:	b921      	cbnz	r1, 810e94c <_realloc_r+0x14>
 810e942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810e946:	4611      	mov	r1, r2
 810e948:	f7fb bee6 	b.w	810a718 <_malloc_r>
 810e94c:	b922      	cbnz	r2, 810e958 <_realloc_r+0x20>
 810e94e:	f7fb fe93 	bl	810a678 <_free_r>
 810e952:	4625      	mov	r5, r4
 810e954:	4628      	mov	r0, r5
 810e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810e958:	f000 fa5a 	bl	810ee10 <_malloc_usable_size_r>
 810e95c:	42a0      	cmp	r0, r4
 810e95e:	d20f      	bcs.n	810e980 <_realloc_r+0x48>
 810e960:	4621      	mov	r1, r4
 810e962:	4638      	mov	r0, r7
 810e964:	f7fb fed8 	bl	810a718 <_malloc_r>
 810e968:	4605      	mov	r5, r0
 810e96a:	2800      	cmp	r0, #0
 810e96c:	d0f2      	beq.n	810e954 <_realloc_r+0x1c>
 810e96e:	4631      	mov	r1, r6
 810e970:	4622      	mov	r2, r4
 810e972:	f7fb fe6b 	bl	810a64c <memcpy>
 810e976:	4631      	mov	r1, r6
 810e978:	4638      	mov	r0, r7
 810e97a:	f7fb fe7d 	bl	810a678 <_free_r>
 810e97e:	e7e9      	b.n	810e954 <_realloc_r+0x1c>
 810e980:	4635      	mov	r5, r6
 810e982:	e7e7      	b.n	810e954 <_realloc_r+0x1c>

0810e984 <__ssputs_r>:
 810e984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e988:	688e      	ldr	r6, [r1, #8]
 810e98a:	429e      	cmp	r6, r3
 810e98c:	4682      	mov	sl, r0
 810e98e:	460c      	mov	r4, r1
 810e990:	4690      	mov	r8, r2
 810e992:	461f      	mov	r7, r3
 810e994:	d838      	bhi.n	810ea08 <__ssputs_r+0x84>
 810e996:	898a      	ldrh	r2, [r1, #12]
 810e998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810e99c:	d032      	beq.n	810ea04 <__ssputs_r+0x80>
 810e99e:	6825      	ldr	r5, [r4, #0]
 810e9a0:	6909      	ldr	r1, [r1, #16]
 810e9a2:	eba5 0901 	sub.w	r9, r5, r1
 810e9a6:	6965      	ldr	r5, [r4, #20]
 810e9a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810e9ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810e9b0:	3301      	adds	r3, #1
 810e9b2:	444b      	add	r3, r9
 810e9b4:	106d      	asrs	r5, r5, #1
 810e9b6:	429d      	cmp	r5, r3
 810e9b8:	bf38      	it	cc
 810e9ba:	461d      	movcc	r5, r3
 810e9bc:	0553      	lsls	r3, r2, #21
 810e9be:	d531      	bpl.n	810ea24 <__ssputs_r+0xa0>
 810e9c0:	4629      	mov	r1, r5
 810e9c2:	f7fb fea9 	bl	810a718 <_malloc_r>
 810e9c6:	4606      	mov	r6, r0
 810e9c8:	b950      	cbnz	r0, 810e9e0 <__ssputs_r+0x5c>
 810e9ca:	230c      	movs	r3, #12
 810e9cc:	f8ca 3000 	str.w	r3, [sl]
 810e9d0:	89a3      	ldrh	r3, [r4, #12]
 810e9d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e9d6:	81a3      	strh	r3, [r4, #12]
 810e9d8:	f04f 30ff 	mov.w	r0, #4294967295
 810e9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e9e0:	6921      	ldr	r1, [r4, #16]
 810e9e2:	464a      	mov	r2, r9
 810e9e4:	f7fb fe32 	bl	810a64c <memcpy>
 810e9e8:	89a3      	ldrh	r3, [r4, #12]
 810e9ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810e9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e9f2:	81a3      	strh	r3, [r4, #12]
 810e9f4:	6126      	str	r6, [r4, #16]
 810e9f6:	6165      	str	r5, [r4, #20]
 810e9f8:	444e      	add	r6, r9
 810e9fa:	eba5 0509 	sub.w	r5, r5, r9
 810e9fe:	6026      	str	r6, [r4, #0]
 810ea00:	60a5      	str	r5, [r4, #8]
 810ea02:	463e      	mov	r6, r7
 810ea04:	42be      	cmp	r6, r7
 810ea06:	d900      	bls.n	810ea0a <__ssputs_r+0x86>
 810ea08:	463e      	mov	r6, r7
 810ea0a:	4632      	mov	r2, r6
 810ea0c:	6820      	ldr	r0, [r4, #0]
 810ea0e:	4641      	mov	r1, r8
 810ea10:	f7ff faa2 	bl	810df58 <memmove>
 810ea14:	68a3      	ldr	r3, [r4, #8]
 810ea16:	6822      	ldr	r2, [r4, #0]
 810ea18:	1b9b      	subs	r3, r3, r6
 810ea1a:	4432      	add	r2, r6
 810ea1c:	60a3      	str	r3, [r4, #8]
 810ea1e:	6022      	str	r2, [r4, #0]
 810ea20:	2000      	movs	r0, #0
 810ea22:	e7db      	b.n	810e9dc <__ssputs_r+0x58>
 810ea24:	462a      	mov	r2, r5
 810ea26:	f7ff ff87 	bl	810e938 <_realloc_r>
 810ea2a:	4606      	mov	r6, r0
 810ea2c:	2800      	cmp	r0, #0
 810ea2e:	d1e1      	bne.n	810e9f4 <__ssputs_r+0x70>
 810ea30:	6921      	ldr	r1, [r4, #16]
 810ea32:	4650      	mov	r0, sl
 810ea34:	f7fb fe20 	bl	810a678 <_free_r>
 810ea38:	e7c7      	b.n	810e9ca <__ssputs_r+0x46>
	...

0810ea3c <_svfiprintf_r>:
 810ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ea40:	4698      	mov	r8, r3
 810ea42:	898b      	ldrh	r3, [r1, #12]
 810ea44:	061b      	lsls	r3, r3, #24
 810ea46:	b09d      	sub	sp, #116	; 0x74
 810ea48:	4607      	mov	r7, r0
 810ea4a:	460d      	mov	r5, r1
 810ea4c:	4614      	mov	r4, r2
 810ea4e:	d50e      	bpl.n	810ea6e <_svfiprintf_r+0x32>
 810ea50:	690b      	ldr	r3, [r1, #16]
 810ea52:	b963      	cbnz	r3, 810ea6e <_svfiprintf_r+0x32>
 810ea54:	2140      	movs	r1, #64	; 0x40
 810ea56:	f7fb fe5f 	bl	810a718 <_malloc_r>
 810ea5a:	6028      	str	r0, [r5, #0]
 810ea5c:	6128      	str	r0, [r5, #16]
 810ea5e:	b920      	cbnz	r0, 810ea6a <_svfiprintf_r+0x2e>
 810ea60:	230c      	movs	r3, #12
 810ea62:	603b      	str	r3, [r7, #0]
 810ea64:	f04f 30ff 	mov.w	r0, #4294967295
 810ea68:	e0d1      	b.n	810ec0e <_svfiprintf_r+0x1d2>
 810ea6a:	2340      	movs	r3, #64	; 0x40
 810ea6c:	616b      	str	r3, [r5, #20]
 810ea6e:	2300      	movs	r3, #0
 810ea70:	9309      	str	r3, [sp, #36]	; 0x24
 810ea72:	2320      	movs	r3, #32
 810ea74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810ea78:	f8cd 800c 	str.w	r8, [sp, #12]
 810ea7c:	2330      	movs	r3, #48	; 0x30
 810ea7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810ec28 <_svfiprintf_r+0x1ec>
 810ea82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ea86:	f04f 0901 	mov.w	r9, #1
 810ea8a:	4623      	mov	r3, r4
 810ea8c:	469a      	mov	sl, r3
 810ea8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ea92:	b10a      	cbz	r2, 810ea98 <_svfiprintf_r+0x5c>
 810ea94:	2a25      	cmp	r2, #37	; 0x25
 810ea96:	d1f9      	bne.n	810ea8c <_svfiprintf_r+0x50>
 810ea98:	ebba 0b04 	subs.w	fp, sl, r4
 810ea9c:	d00b      	beq.n	810eab6 <_svfiprintf_r+0x7a>
 810ea9e:	465b      	mov	r3, fp
 810eaa0:	4622      	mov	r2, r4
 810eaa2:	4629      	mov	r1, r5
 810eaa4:	4638      	mov	r0, r7
 810eaa6:	f7ff ff6d 	bl	810e984 <__ssputs_r>
 810eaaa:	3001      	adds	r0, #1
 810eaac:	f000 80aa 	beq.w	810ec04 <_svfiprintf_r+0x1c8>
 810eab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810eab2:	445a      	add	r2, fp
 810eab4:	9209      	str	r2, [sp, #36]	; 0x24
 810eab6:	f89a 3000 	ldrb.w	r3, [sl]
 810eaba:	2b00      	cmp	r3, #0
 810eabc:	f000 80a2 	beq.w	810ec04 <_svfiprintf_r+0x1c8>
 810eac0:	2300      	movs	r3, #0
 810eac2:	f04f 32ff 	mov.w	r2, #4294967295
 810eac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810eaca:	f10a 0a01 	add.w	sl, sl, #1
 810eace:	9304      	str	r3, [sp, #16]
 810ead0:	9307      	str	r3, [sp, #28]
 810ead2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ead6:	931a      	str	r3, [sp, #104]	; 0x68
 810ead8:	4654      	mov	r4, sl
 810eada:	2205      	movs	r2, #5
 810eadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810eae0:	4851      	ldr	r0, [pc, #324]	; (810ec28 <_svfiprintf_r+0x1ec>)
 810eae2:	f7f1 fc15 	bl	8100310 <memchr>
 810eae6:	9a04      	ldr	r2, [sp, #16]
 810eae8:	b9d8      	cbnz	r0, 810eb22 <_svfiprintf_r+0xe6>
 810eaea:	06d0      	lsls	r0, r2, #27
 810eaec:	bf44      	itt	mi
 810eaee:	2320      	movmi	r3, #32
 810eaf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810eaf4:	0711      	lsls	r1, r2, #28
 810eaf6:	bf44      	itt	mi
 810eaf8:	232b      	movmi	r3, #43	; 0x2b
 810eafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810eafe:	f89a 3000 	ldrb.w	r3, [sl]
 810eb02:	2b2a      	cmp	r3, #42	; 0x2a
 810eb04:	d015      	beq.n	810eb32 <_svfiprintf_r+0xf6>
 810eb06:	9a07      	ldr	r2, [sp, #28]
 810eb08:	4654      	mov	r4, sl
 810eb0a:	2000      	movs	r0, #0
 810eb0c:	f04f 0c0a 	mov.w	ip, #10
 810eb10:	4621      	mov	r1, r4
 810eb12:	f811 3b01 	ldrb.w	r3, [r1], #1
 810eb16:	3b30      	subs	r3, #48	; 0x30
 810eb18:	2b09      	cmp	r3, #9
 810eb1a:	d94e      	bls.n	810ebba <_svfiprintf_r+0x17e>
 810eb1c:	b1b0      	cbz	r0, 810eb4c <_svfiprintf_r+0x110>
 810eb1e:	9207      	str	r2, [sp, #28]
 810eb20:	e014      	b.n	810eb4c <_svfiprintf_r+0x110>
 810eb22:	eba0 0308 	sub.w	r3, r0, r8
 810eb26:	fa09 f303 	lsl.w	r3, r9, r3
 810eb2a:	4313      	orrs	r3, r2
 810eb2c:	9304      	str	r3, [sp, #16]
 810eb2e:	46a2      	mov	sl, r4
 810eb30:	e7d2      	b.n	810ead8 <_svfiprintf_r+0x9c>
 810eb32:	9b03      	ldr	r3, [sp, #12]
 810eb34:	1d19      	adds	r1, r3, #4
 810eb36:	681b      	ldr	r3, [r3, #0]
 810eb38:	9103      	str	r1, [sp, #12]
 810eb3a:	2b00      	cmp	r3, #0
 810eb3c:	bfbb      	ittet	lt
 810eb3e:	425b      	neglt	r3, r3
 810eb40:	f042 0202 	orrlt.w	r2, r2, #2
 810eb44:	9307      	strge	r3, [sp, #28]
 810eb46:	9307      	strlt	r3, [sp, #28]
 810eb48:	bfb8      	it	lt
 810eb4a:	9204      	strlt	r2, [sp, #16]
 810eb4c:	7823      	ldrb	r3, [r4, #0]
 810eb4e:	2b2e      	cmp	r3, #46	; 0x2e
 810eb50:	d10c      	bne.n	810eb6c <_svfiprintf_r+0x130>
 810eb52:	7863      	ldrb	r3, [r4, #1]
 810eb54:	2b2a      	cmp	r3, #42	; 0x2a
 810eb56:	d135      	bne.n	810ebc4 <_svfiprintf_r+0x188>
 810eb58:	9b03      	ldr	r3, [sp, #12]
 810eb5a:	1d1a      	adds	r2, r3, #4
 810eb5c:	681b      	ldr	r3, [r3, #0]
 810eb5e:	9203      	str	r2, [sp, #12]
 810eb60:	2b00      	cmp	r3, #0
 810eb62:	bfb8      	it	lt
 810eb64:	f04f 33ff 	movlt.w	r3, #4294967295
 810eb68:	3402      	adds	r4, #2
 810eb6a:	9305      	str	r3, [sp, #20]
 810eb6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810ec38 <_svfiprintf_r+0x1fc>
 810eb70:	7821      	ldrb	r1, [r4, #0]
 810eb72:	2203      	movs	r2, #3
 810eb74:	4650      	mov	r0, sl
 810eb76:	f7f1 fbcb 	bl	8100310 <memchr>
 810eb7a:	b140      	cbz	r0, 810eb8e <_svfiprintf_r+0x152>
 810eb7c:	2340      	movs	r3, #64	; 0x40
 810eb7e:	eba0 000a 	sub.w	r0, r0, sl
 810eb82:	fa03 f000 	lsl.w	r0, r3, r0
 810eb86:	9b04      	ldr	r3, [sp, #16]
 810eb88:	4303      	orrs	r3, r0
 810eb8a:	3401      	adds	r4, #1
 810eb8c:	9304      	str	r3, [sp, #16]
 810eb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810eb92:	4826      	ldr	r0, [pc, #152]	; (810ec2c <_svfiprintf_r+0x1f0>)
 810eb94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810eb98:	2206      	movs	r2, #6
 810eb9a:	f7f1 fbb9 	bl	8100310 <memchr>
 810eb9e:	2800      	cmp	r0, #0
 810eba0:	d038      	beq.n	810ec14 <_svfiprintf_r+0x1d8>
 810eba2:	4b23      	ldr	r3, [pc, #140]	; (810ec30 <_svfiprintf_r+0x1f4>)
 810eba4:	bb1b      	cbnz	r3, 810ebee <_svfiprintf_r+0x1b2>
 810eba6:	9b03      	ldr	r3, [sp, #12]
 810eba8:	3307      	adds	r3, #7
 810ebaa:	f023 0307 	bic.w	r3, r3, #7
 810ebae:	3308      	adds	r3, #8
 810ebb0:	9303      	str	r3, [sp, #12]
 810ebb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ebb4:	4433      	add	r3, r6
 810ebb6:	9309      	str	r3, [sp, #36]	; 0x24
 810ebb8:	e767      	b.n	810ea8a <_svfiprintf_r+0x4e>
 810ebba:	fb0c 3202 	mla	r2, ip, r2, r3
 810ebbe:	460c      	mov	r4, r1
 810ebc0:	2001      	movs	r0, #1
 810ebc2:	e7a5      	b.n	810eb10 <_svfiprintf_r+0xd4>
 810ebc4:	2300      	movs	r3, #0
 810ebc6:	3401      	adds	r4, #1
 810ebc8:	9305      	str	r3, [sp, #20]
 810ebca:	4619      	mov	r1, r3
 810ebcc:	f04f 0c0a 	mov.w	ip, #10
 810ebd0:	4620      	mov	r0, r4
 810ebd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ebd6:	3a30      	subs	r2, #48	; 0x30
 810ebd8:	2a09      	cmp	r2, #9
 810ebda:	d903      	bls.n	810ebe4 <_svfiprintf_r+0x1a8>
 810ebdc:	2b00      	cmp	r3, #0
 810ebde:	d0c5      	beq.n	810eb6c <_svfiprintf_r+0x130>
 810ebe0:	9105      	str	r1, [sp, #20]
 810ebe2:	e7c3      	b.n	810eb6c <_svfiprintf_r+0x130>
 810ebe4:	fb0c 2101 	mla	r1, ip, r1, r2
 810ebe8:	4604      	mov	r4, r0
 810ebea:	2301      	movs	r3, #1
 810ebec:	e7f0      	b.n	810ebd0 <_svfiprintf_r+0x194>
 810ebee:	ab03      	add	r3, sp, #12
 810ebf0:	9300      	str	r3, [sp, #0]
 810ebf2:	462a      	mov	r2, r5
 810ebf4:	4b0f      	ldr	r3, [pc, #60]	; (810ec34 <_svfiprintf_r+0x1f8>)
 810ebf6:	a904      	add	r1, sp, #16
 810ebf8:	4638      	mov	r0, r7
 810ebfa:	f7fb ffe1 	bl	810abc0 <_printf_float>
 810ebfe:	1c42      	adds	r2, r0, #1
 810ec00:	4606      	mov	r6, r0
 810ec02:	d1d6      	bne.n	810ebb2 <_svfiprintf_r+0x176>
 810ec04:	89ab      	ldrh	r3, [r5, #12]
 810ec06:	065b      	lsls	r3, r3, #25
 810ec08:	f53f af2c 	bmi.w	810ea64 <_svfiprintf_r+0x28>
 810ec0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810ec0e:	b01d      	add	sp, #116	; 0x74
 810ec10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ec14:	ab03      	add	r3, sp, #12
 810ec16:	9300      	str	r3, [sp, #0]
 810ec18:	462a      	mov	r2, r5
 810ec1a:	4b06      	ldr	r3, [pc, #24]	; (810ec34 <_svfiprintf_r+0x1f8>)
 810ec1c:	a904      	add	r1, sp, #16
 810ec1e:	4638      	mov	r0, r7
 810ec20:	f7fc fa72 	bl	810b108 <_printf_i>
 810ec24:	e7eb      	b.n	810ebfe <_svfiprintf_r+0x1c2>
 810ec26:	bf00      	nop
 810ec28:	0810f178 	.word	0x0810f178
 810ec2c:	0810f182 	.word	0x0810f182
 810ec30:	0810abc1 	.word	0x0810abc1
 810ec34:	0810e985 	.word	0x0810e985
 810ec38:	0810f17e 	.word	0x0810f17e

0810ec3c <_raise_r>:
 810ec3c:	291f      	cmp	r1, #31
 810ec3e:	b538      	push	{r3, r4, r5, lr}
 810ec40:	4604      	mov	r4, r0
 810ec42:	460d      	mov	r5, r1
 810ec44:	d904      	bls.n	810ec50 <_raise_r+0x14>
 810ec46:	2316      	movs	r3, #22
 810ec48:	6003      	str	r3, [r0, #0]
 810ec4a:	f04f 30ff 	mov.w	r0, #4294967295
 810ec4e:	bd38      	pop	{r3, r4, r5, pc}
 810ec50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810ec52:	b112      	cbz	r2, 810ec5a <_raise_r+0x1e>
 810ec54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ec58:	b94b      	cbnz	r3, 810ec6e <_raise_r+0x32>
 810ec5a:	4620      	mov	r0, r4
 810ec5c:	f000 f830 	bl	810ecc0 <_getpid_r>
 810ec60:	462a      	mov	r2, r5
 810ec62:	4601      	mov	r1, r0
 810ec64:	4620      	mov	r0, r4
 810ec66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ec6a:	f000 b817 	b.w	810ec9c <_kill_r>
 810ec6e:	2b01      	cmp	r3, #1
 810ec70:	d00a      	beq.n	810ec88 <_raise_r+0x4c>
 810ec72:	1c59      	adds	r1, r3, #1
 810ec74:	d103      	bne.n	810ec7e <_raise_r+0x42>
 810ec76:	2316      	movs	r3, #22
 810ec78:	6003      	str	r3, [r0, #0]
 810ec7a:	2001      	movs	r0, #1
 810ec7c:	e7e7      	b.n	810ec4e <_raise_r+0x12>
 810ec7e:	2400      	movs	r4, #0
 810ec80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ec84:	4628      	mov	r0, r5
 810ec86:	4798      	blx	r3
 810ec88:	2000      	movs	r0, #0
 810ec8a:	e7e0      	b.n	810ec4e <_raise_r+0x12>

0810ec8c <raise>:
 810ec8c:	4b02      	ldr	r3, [pc, #8]	; (810ec98 <raise+0xc>)
 810ec8e:	4601      	mov	r1, r0
 810ec90:	6818      	ldr	r0, [r3, #0]
 810ec92:	f7ff bfd3 	b.w	810ec3c <_raise_r>
 810ec96:	bf00      	nop
 810ec98:	100000bc 	.word	0x100000bc

0810ec9c <_kill_r>:
 810ec9c:	b538      	push	{r3, r4, r5, lr}
 810ec9e:	4d07      	ldr	r5, [pc, #28]	; (810ecbc <_kill_r+0x20>)
 810eca0:	2300      	movs	r3, #0
 810eca2:	4604      	mov	r4, r0
 810eca4:	4608      	mov	r0, r1
 810eca6:	4611      	mov	r1, r2
 810eca8:	602b      	str	r3, [r5, #0]
 810ecaa:	f7f2 fd79 	bl	81017a0 <_kill>
 810ecae:	1c43      	adds	r3, r0, #1
 810ecb0:	d102      	bne.n	810ecb8 <_kill_r+0x1c>
 810ecb2:	682b      	ldr	r3, [r5, #0]
 810ecb4:	b103      	cbz	r3, 810ecb8 <_kill_r+0x1c>
 810ecb6:	6023      	str	r3, [r4, #0]
 810ecb8:	bd38      	pop	{r3, r4, r5, pc}
 810ecba:	bf00      	nop
 810ecbc:	100006a8 	.word	0x100006a8

0810ecc0 <_getpid_r>:
 810ecc0:	f7f2 bd66 	b.w	8101790 <_getpid>

0810ecc4 <__sread>:
 810ecc4:	b510      	push	{r4, lr}
 810ecc6:	460c      	mov	r4, r1
 810ecc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810eccc:	f000 f8a8 	bl	810ee20 <_read_r>
 810ecd0:	2800      	cmp	r0, #0
 810ecd2:	bfab      	itete	ge
 810ecd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810ecd6:	89a3      	ldrhlt	r3, [r4, #12]
 810ecd8:	181b      	addge	r3, r3, r0
 810ecda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810ecde:	bfac      	ite	ge
 810ece0:	6563      	strge	r3, [r4, #84]	; 0x54
 810ece2:	81a3      	strhlt	r3, [r4, #12]
 810ece4:	bd10      	pop	{r4, pc}

0810ece6 <__swrite>:
 810ece6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ecea:	461f      	mov	r7, r3
 810ecec:	898b      	ldrh	r3, [r1, #12]
 810ecee:	05db      	lsls	r3, r3, #23
 810ecf0:	4605      	mov	r5, r0
 810ecf2:	460c      	mov	r4, r1
 810ecf4:	4616      	mov	r6, r2
 810ecf6:	d505      	bpl.n	810ed04 <__swrite+0x1e>
 810ecf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ecfc:	2302      	movs	r3, #2
 810ecfe:	2200      	movs	r2, #0
 810ed00:	f000 f874 	bl	810edec <_lseek_r>
 810ed04:	89a3      	ldrh	r3, [r4, #12]
 810ed06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810ed0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ed0e:	81a3      	strh	r3, [r4, #12]
 810ed10:	4632      	mov	r2, r6
 810ed12:	463b      	mov	r3, r7
 810ed14:	4628      	mov	r0, r5
 810ed16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ed1a:	f000 b823 	b.w	810ed64 <_write_r>

0810ed1e <__sseek>:
 810ed1e:	b510      	push	{r4, lr}
 810ed20:	460c      	mov	r4, r1
 810ed22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ed26:	f000 f861 	bl	810edec <_lseek_r>
 810ed2a:	1c43      	adds	r3, r0, #1
 810ed2c:	89a3      	ldrh	r3, [r4, #12]
 810ed2e:	bf15      	itete	ne
 810ed30:	6560      	strne	r0, [r4, #84]	; 0x54
 810ed32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810ed36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810ed3a:	81a3      	strheq	r3, [r4, #12]
 810ed3c:	bf18      	it	ne
 810ed3e:	81a3      	strhne	r3, [r4, #12]
 810ed40:	bd10      	pop	{r4, pc}

0810ed42 <__sclose>:
 810ed42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ed46:	f000 b81f 	b.w	810ed88 <_close_r>

0810ed4a <__ascii_wctomb>:
 810ed4a:	b149      	cbz	r1, 810ed60 <__ascii_wctomb+0x16>
 810ed4c:	2aff      	cmp	r2, #255	; 0xff
 810ed4e:	bf85      	ittet	hi
 810ed50:	238a      	movhi	r3, #138	; 0x8a
 810ed52:	6003      	strhi	r3, [r0, #0]
 810ed54:	700a      	strbls	r2, [r1, #0]
 810ed56:	f04f 30ff 	movhi.w	r0, #4294967295
 810ed5a:	bf98      	it	ls
 810ed5c:	2001      	movls	r0, #1
 810ed5e:	4770      	bx	lr
 810ed60:	4608      	mov	r0, r1
 810ed62:	4770      	bx	lr

0810ed64 <_write_r>:
 810ed64:	b538      	push	{r3, r4, r5, lr}
 810ed66:	4d07      	ldr	r5, [pc, #28]	; (810ed84 <_write_r+0x20>)
 810ed68:	4604      	mov	r4, r0
 810ed6a:	4608      	mov	r0, r1
 810ed6c:	4611      	mov	r1, r2
 810ed6e:	2200      	movs	r2, #0
 810ed70:	602a      	str	r2, [r5, #0]
 810ed72:	461a      	mov	r2, r3
 810ed74:	f7f2 fd4b 	bl	810180e <_write>
 810ed78:	1c43      	adds	r3, r0, #1
 810ed7a:	d102      	bne.n	810ed82 <_write_r+0x1e>
 810ed7c:	682b      	ldr	r3, [r5, #0]
 810ed7e:	b103      	cbz	r3, 810ed82 <_write_r+0x1e>
 810ed80:	6023      	str	r3, [r4, #0]
 810ed82:	bd38      	pop	{r3, r4, r5, pc}
 810ed84:	100006a8 	.word	0x100006a8

0810ed88 <_close_r>:
 810ed88:	b538      	push	{r3, r4, r5, lr}
 810ed8a:	4d06      	ldr	r5, [pc, #24]	; (810eda4 <_close_r+0x1c>)
 810ed8c:	2300      	movs	r3, #0
 810ed8e:	4604      	mov	r4, r0
 810ed90:	4608      	mov	r0, r1
 810ed92:	602b      	str	r3, [r5, #0]
 810ed94:	f7f2 fd57 	bl	8101846 <_close>
 810ed98:	1c43      	adds	r3, r0, #1
 810ed9a:	d102      	bne.n	810eda2 <_close_r+0x1a>
 810ed9c:	682b      	ldr	r3, [r5, #0]
 810ed9e:	b103      	cbz	r3, 810eda2 <_close_r+0x1a>
 810eda0:	6023      	str	r3, [r4, #0]
 810eda2:	bd38      	pop	{r3, r4, r5, pc}
 810eda4:	100006a8 	.word	0x100006a8

0810eda8 <_fstat_r>:
 810eda8:	b538      	push	{r3, r4, r5, lr}
 810edaa:	4d07      	ldr	r5, [pc, #28]	; (810edc8 <_fstat_r+0x20>)
 810edac:	2300      	movs	r3, #0
 810edae:	4604      	mov	r4, r0
 810edb0:	4608      	mov	r0, r1
 810edb2:	4611      	mov	r1, r2
 810edb4:	602b      	str	r3, [r5, #0]
 810edb6:	f7f2 fd52 	bl	810185e <_fstat>
 810edba:	1c43      	adds	r3, r0, #1
 810edbc:	d102      	bne.n	810edc4 <_fstat_r+0x1c>
 810edbe:	682b      	ldr	r3, [r5, #0]
 810edc0:	b103      	cbz	r3, 810edc4 <_fstat_r+0x1c>
 810edc2:	6023      	str	r3, [r4, #0]
 810edc4:	bd38      	pop	{r3, r4, r5, pc}
 810edc6:	bf00      	nop
 810edc8:	100006a8 	.word	0x100006a8

0810edcc <_isatty_r>:
 810edcc:	b538      	push	{r3, r4, r5, lr}
 810edce:	4d06      	ldr	r5, [pc, #24]	; (810ede8 <_isatty_r+0x1c>)
 810edd0:	2300      	movs	r3, #0
 810edd2:	4604      	mov	r4, r0
 810edd4:	4608      	mov	r0, r1
 810edd6:	602b      	str	r3, [r5, #0]
 810edd8:	f7f2 fd51 	bl	810187e <_isatty>
 810eddc:	1c43      	adds	r3, r0, #1
 810edde:	d102      	bne.n	810ede6 <_isatty_r+0x1a>
 810ede0:	682b      	ldr	r3, [r5, #0]
 810ede2:	b103      	cbz	r3, 810ede6 <_isatty_r+0x1a>
 810ede4:	6023      	str	r3, [r4, #0]
 810ede6:	bd38      	pop	{r3, r4, r5, pc}
 810ede8:	100006a8 	.word	0x100006a8

0810edec <_lseek_r>:
 810edec:	b538      	push	{r3, r4, r5, lr}
 810edee:	4d07      	ldr	r5, [pc, #28]	; (810ee0c <_lseek_r+0x20>)
 810edf0:	4604      	mov	r4, r0
 810edf2:	4608      	mov	r0, r1
 810edf4:	4611      	mov	r1, r2
 810edf6:	2200      	movs	r2, #0
 810edf8:	602a      	str	r2, [r5, #0]
 810edfa:	461a      	mov	r2, r3
 810edfc:	f7f2 fd4a 	bl	8101894 <_lseek>
 810ee00:	1c43      	adds	r3, r0, #1
 810ee02:	d102      	bne.n	810ee0a <_lseek_r+0x1e>
 810ee04:	682b      	ldr	r3, [r5, #0]
 810ee06:	b103      	cbz	r3, 810ee0a <_lseek_r+0x1e>
 810ee08:	6023      	str	r3, [r4, #0]
 810ee0a:	bd38      	pop	{r3, r4, r5, pc}
 810ee0c:	100006a8 	.word	0x100006a8

0810ee10 <_malloc_usable_size_r>:
 810ee10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ee14:	1f18      	subs	r0, r3, #4
 810ee16:	2b00      	cmp	r3, #0
 810ee18:	bfbc      	itt	lt
 810ee1a:	580b      	ldrlt	r3, [r1, r0]
 810ee1c:	18c0      	addlt	r0, r0, r3
 810ee1e:	4770      	bx	lr

0810ee20 <_read_r>:
 810ee20:	b538      	push	{r3, r4, r5, lr}
 810ee22:	4d07      	ldr	r5, [pc, #28]	; (810ee40 <_read_r+0x20>)
 810ee24:	4604      	mov	r4, r0
 810ee26:	4608      	mov	r0, r1
 810ee28:	4611      	mov	r1, r2
 810ee2a:	2200      	movs	r2, #0
 810ee2c:	602a      	str	r2, [r5, #0]
 810ee2e:	461a      	mov	r2, r3
 810ee30:	f7f2 fcd0 	bl	81017d4 <_read>
 810ee34:	1c43      	adds	r3, r0, #1
 810ee36:	d102      	bne.n	810ee3e <_read_r+0x1e>
 810ee38:	682b      	ldr	r3, [r5, #0]
 810ee3a:	b103      	cbz	r3, 810ee3e <_read_r+0x1e>
 810ee3c:	6023      	str	r3, [r4, #0]
 810ee3e:	bd38      	pop	{r3, r4, r5, pc}
 810ee40:	100006a8 	.word	0x100006a8

0810ee44 <_init>:
 810ee44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ee46:	bf00      	nop
 810ee48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ee4a:	bc08      	pop	{r3}
 810ee4c:	469e      	mov	lr, r3
 810ee4e:	4770      	bx	lr

0810ee50 <_fini>:
 810ee50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ee52:	bf00      	nop
 810ee54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ee56:	bc08      	pop	{r3}
 810ee58:	469e      	mov	lr, r3
 810ee5a:	4770      	bx	lr
